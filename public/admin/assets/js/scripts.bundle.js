/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/components/blockui.js":
/*!************************************************!*\
  !*** ./resources/src/js/components/blockui.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTBlockUI = function KTBlockUI(element, options) {\n  //////////////////////////////\n  // ** Private variables  ** //\n  //////////////////////////////\n  var the = this;\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  }\n\n  // Default options\n  var defaultOptions = {\n    zIndex: false,\n    overlayClass: '',\n    overflow: 'hidden',\n    message: '<span class=\"spinner-border text-primary\"></span>'\n  };\n\n  ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('blockui')) {\n      the = KTUtil.data(element).get('blockui');\n    } else {\n      _init();\n    }\n  };\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.element = element;\n    the.overlayElement = null;\n    the.blocked = false;\n    the.positionChanged = false;\n    the.overflowChanged = false;\n\n    // Bind Instance\n    KTUtil.data(the.element).set('blockui', the);\n  };\n  var _block = function _block() {\n    if (KTEventHandler.trigger(the.element, 'kt.blockui.block', the) === false) {\n      return;\n    }\n    var isPage = the.element.tagName === 'BODY';\n    var position = KTUtil.css(the.element, 'position');\n    var overflow = KTUtil.css(the.element, 'overflow');\n    var zIndex = isPage ? 10000 : 1;\n    if (the.options.zIndex > 0) {\n      zIndex = the.options.zIndex;\n    } else {\n      if (KTUtil.css(the.element, 'z-index') != 'auto') {\n        zIndex = KTUtil.css(the.element, 'z-index');\n      }\n    }\n    the.element.classList.add('blockui');\n    if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n      KTUtil.css(the.element, 'position', 'relative');\n      the.positionChanged = true;\n    }\n    if (the.options.overflow === 'hidden' && overflow === 'visible') {\n      KTUtil.css(the.element, 'overflow', 'hidden');\n      the.overflowChanged = true;\n    }\n    the.overlayElement = document.createElement('DIV');\n    the.overlayElement.setAttribute('class', 'blockui-overlay ' + the.options.overlayClass);\n    the.overlayElement.innerHTML = the.options.message;\n    KTUtil.css(the.overlayElement, 'z-index', zIndex);\n    the.element.append(the.overlayElement);\n    the.blocked = true;\n    KTEventHandler.trigger(the.element, 'kt.blockui.after.blocked', the) === false;\n  };\n  var _release = function _release() {\n    if (KTEventHandler.trigger(the.element, 'kt.blockui.release', the) === false) {\n      return;\n    }\n    the.element.classList.add('blockui');\n    if (the.positionChanged) {\n      KTUtil.css(the.element, 'position', '');\n    }\n    if (the.overflowChanged) {\n      KTUtil.css(the.element, 'overflow', '');\n    }\n    if (the.overlayElement) {\n      KTUtil.remove(the.overlayElement);\n    }\n    the.blocked = false;\n    KTEventHandler.trigger(the.element, 'kt.blockui.released', the);\n  };\n  var _isBlocked = function _isBlocked() {\n    return the.blocked;\n  };\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('blockui');\n  };\n\n  // Construct class\n  _construct();\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Plugin API\n  the.block = function () {\n    _block();\n  };\n  the.release = function () {\n    _release();\n  };\n  the.isBlocked = function () {\n    return _isBlocked();\n  };\n  the.destroy = function () {\n    return _destroy();\n  };\n\n  // Event API\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n};\n\n// Static methods\nKTBlockUI.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('blockui')) {\n    return KTUtil.data(element).get('blockui');\n  } else {\n    return null;\n  }\n};\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTBlockUI;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/components/blockui.js\n");

/***/ }),

/***/ "./resources/src/js/components/cookie.js":
/*!***********************************************!*\
  !*** ./resources/src/js/components/cookie.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// DOCS: https://javascript.info/cookie\n\n// Class definition\nvar KTCookie = function () {\n  return {\n    // returns the cookie with the given name,\n    // or undefined if not found\n    get: function get(name) {\n      var matches = document.cookie.match(new RegExp(\"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"));\n      return matches ? decodeURIComponent(matches[1]) : null;\n    },\n    // Please note that a cookie value is encoded,\n    // so getCookie uses a built-in decodeURIComponent function to decode it.\n    set: function set(name, value, options) {\n      if (typeof options === \"undefined\" || options === null) {\n        options = {};\n      }\n      options = Object.assign({}, {\n        path: '/'\n      }, options);\n      if (options.expires instanceof Date) {\n        options.expires = options.expires.toUTCString();\n      }\n      var updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\n      for (var optionKey in options) {\n        if (options.hasOwnProperty(optionKey) === false) {\n          continue;\n        }\n        updatedCookie += \"; \" + optionKey;\n        var optionValue = options[optionKey];\n        if (optionValue !== true) {\n          updatedCookie += \"=\" + optionValue;\n        }\n      }\n      document.cookie = updatedCookie;\n    },\n    // To remove a cookie, we can call it with a negative expiration date:\n    remove: function remove(name) {\n      this.set(name, \"\", {\n        'max-age': -1\n      });\n    }\n  };\n}();\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTCookie;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc3JjL2pzL2NvbXBvbmVudHMvY29va2llLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiOztBQUVBO0FBQ0EsSUFBSUEsUUFBUSxHQUFHLFlBQVc7RUFDdEIsT0FBTztJQUNIO0lBQ0E7SUFDQUMsR0FBRyxFQUFFLFNBQUFBLElBQVNDLElBQUksRUFBRTtNQUNoQixJQUFJQyxPQUFPLEdBQUdDLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDQyxLQUFLLENBQUMsSUFBSUMsTUFBTSxDQUMxQyxVQUFVLEdBQUdMLElBQUksQ0FBQ00sT0FBTyxDQUFDLDhCQUE4QixFQUFFLE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FDakYsQ0FBQztNQUVGLE9BQU9MLE9BQU8sR0FBR00sa0JBQWtCLENBQUNOLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUk7SUFDMUQsQ0FBQztJQUVEO0lBQ0E7SUFDQU8sR0FBRyxFQUFFLFNBQUFBLElBQVNSLElBQUksRUFBRVMsS0FBSyxFQUFFQyxPQUFPLEVBQUU7TUFDaEMsSUFBSyxPQUFPQSxPQUFPLEtBQUssV0FBVyxJQUFJQSxPQUFPLEtBQUssSUFBSSxFQUFHO1FBQ3REQSxPQUFPLEdBQUcsQ0FBQyxDQUFDO01BQ2hCO01BRUFBLE9BQU8sR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDeEJDLElBQUksRUFBRTtNQUNWLENBQUMsRUFBRUgsT0FBTyxDQUFDO01BRVgsSUFBS0EsT0FBTyxDQUFDSSxPQUFPLFlBQVlDLElBQUksRUFBRztRQUNuQ0wsT0FBTyxDQUFDSSxPQUFPLEdBQUdKLE9BQU8sQ0FBQ0ksT0FBTyxDQUFDRSxXQUFXLEVBQUU7TUFDbkQ7TUFFQSxJQUFJQyxhQUFhLEdBQUdDLGtCQUFrQixDQUFDbEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHa0Isa0JBQWtCLENBQUNULEtBQUssQ0FBQztNQUU5RSxLQUFNLElBQUlVLFNBQVMsSUFBSVQsT0FBTyxFQUFHO1FBQzdCLElBQUtBLE9BQU8sQ0FBQ1UsY0FBYyxDQUFDRCxTQUFTLENBQUMsS0FBSyxLQUFLLEVBQUc7VUFDL0M7UUFDSjtRQUVBRixhQUFhLElBQUksSUFBSSxHQUFHRSxTQUFTO1FBQ2pDLElBQUlFLFdBQVcsR0FBR1gsT0FBTyxDQUFDUyxTQUFTLENBQUM7UUFFcEMsSUFBS0UsV0FBVyxLQUFLLElBQUksRUFBRztVQUN4QkosYUFBYSxJQUFJLEdBQUcsR0FBR0ksV0FBVztRQUN0QztNQUNKO01BRUFuQixRQUFRLENBQUNDLE1BQU0sR0FBR2MsYUFBYTtJQUNuQyxDQUFDO0lBRUQ7SUFDQUssTUFBTSxFQUFFLFNBQUFBLE9BQVN0QixJQUFJLEVBQUU7TUFDbkIsSUFBSSxDQUFDUSxHQUFHLENBQUNSLElBQUksRUFBRSxFQUFFLEVBQUU7UUFDZixTQUFTLEVBQUUsQ0FBQztNQUNoQixDQUFDLENBQUM7SUFDTjtFQUNKLENBQUM7QUFDTCxDQUFDLEVBQUU7O0FBRUg7QUFDQSxJQUFJLEtBQTZCLElBQUksT0FBT3VCLE1BQU0sQ0FBQ0MsT0FBTyxLQUFLLFdBQVcsRUFBRTtFQUN4RUQsTUFBTSxDQUFDQyxPQUFPLEdBQUcxQixRQUFRO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9qcy9jb21wb25lbnRzL2Nvb2tpZS5qcz8wOTJkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vLyBET0NTOiBodHRwczovL2phdmFzY3JpcHQuaW5mby9jb29raWVcclxuXHJcbi8vIENsYXNzIGRlZmluaXRpb25cclxudmFyIEtUQ29va2llID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIHJldHVybnMgdGhlIGNvb2tpZSB3aXRoIHRoZSBnaXZlbiBuYW1lLFxyXG4gICAgICAgIC8vIG9yIHVuZGVmaW5lZCBpZiBub3QgZm91bmRcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cChcclxuICAgICAgICAgICAgICAgIFwiKD86Xnw7IClcIiArIG5hbWUucmVwbGFjZSgvKFtcXC4kPyp8e31cXChcXClcXFtcXF1cXFxcXFwvXFwrXl0pL2csICdcXFxcJDEnKSArIFwiPShbXjtdKilcIlxyXG4gICAgICAgICAgICApKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVzID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoZXNbMV0pIDogbnVsbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBQbGVhc2Ugbm90ZSB0aGF0IGEgY29va2llIHZhbHVlIGlzIGVuY29kZWQsXHJcbiAgICAgICAgLy8gc28gZ2V0Q29va2llIHVzZXMgYSBidWlsdC1pbiBkZWNvZGVVUklDb21wb25lbnQgZnVuY3Rpb24gdG8gZGVjb2RlIGl0LlxyXG4gICAgICAgIHNldDogZnVuY3Rpb24obmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYgKCB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJ1bmRlZmluZWRcIiB8fCBvcHRpb25zID09PSBudWxsICkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwge1xyXG4gICAgICAgICAgICAgICAgcGF0aDogJy8nXHJcbiAgICAgICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBvcHRpb25zLmV4cGlyZXMgaW5zdGFuY2VvZiBEYXRlICkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5leHBpcmVzID0gb3B0aW9ucy5leHBpcmVzLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciB1cGRhdGVkQ29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgZm9yICggdmFyIG9wdGlvbktleSBpbiBvcHRpb25zICkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCBvcHRpb25zLmhhc093blByb3BlcnR5KG9wdGlvbktleSkgPT09IGZhbHNlICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHVwZGF0ZWRDb29raWUgKz0gXCI7IFwiICsgb3B0aW9uS2V5O1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvblZhbHVlID0gb3B0aW9uc1tvcHRpb25LZXldO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggb3B0aW9uVmFsdWUgIT09IHRydWUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZENvb2tpZSArPSBcIj1cIiArIG9wdGlvblZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSB1cGRhdGVkQ29va2llO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIFRvIHJlbW92ZSBhIGNvb2tpZSwgd2UgY2FuIGNhbGwgaXQgd2l0aCBhIG5lZ2F0aXZlIGV4cGlyYXRpb24gZGF0ZTpcclxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXQobmFtZSwgXCJcIiwge1xyXG4gICAgICAgICAgICAgICAgJ21heC1hZ2UnOiAtMVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBLVENvb2tpZTtcclxufVxyXG4iXSwibmFtZXMiOlsiS1RDb29raWUiLCJnZXQiLCJuYW1lIiwibWF0Y2hlcyIsImRvY3VtZW50IiwiY29va2llIiwibWF0Y2giLCJSZWdFeHAiLCJyZXBsYWNlIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic2V0IiwidmFsdWUiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwicGF0aCIsImV4cGlyZXMiLCJEYXRlIiwidG9VVENTdHJpbmciLCJ1cGRhdGVkQ29va2llIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwib3B0aW9uS2V5IiwiaGFzT3duUHJvcGVydHkiLCJvcHRpb25WYWx1ZSIsInJlbW92ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/src/js/components/cookie.js\n");

/***/ }),

/***/ "./resources/src/js/components/dialer.js":
/*!***********************************************!*\
  !*** ./resources/src/js/components/dialer.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTDialer = function KTDialer(element, options) {\n  ////////////////////////////\n  // ** Private variables  ** //\n  ////////////////////////////\n  var the = this;\n  if (!element) {\n    return;\n  }\n\n  // Default options\n  var defaultOptions = {\n    min: null,\n    max: null,\n    step: 1,\n    decimals: 0,\n    prefix: \"\",\n    suffix: \"\"\n  };\n\n  ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n\n  // Constructor\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('dialer') === true) {\n      the = KTUtil.data(element).get('dialer');\n    } else {\n      _init();\n    }\n  };\n\n  // Initialize\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n\n    // Elements\n    the.element = element;\n    the.incElement = the.element.querySelector('[data-kt-dialer-control=\"increase\"]');\n    the.decElement = the.element.querySelector('[data-kt-dialer-control=\"decrease\"]');\n    the.inputElement = the.element.querySelector('input[type]');\n\n    // Set Values\n    if (_getOption('decimals')) {\n      the.options.decimals = parseInt(_getOption('decimals'));\n    }\n    if (_getOption('prefix')) {\n      the.options.prefix = _getOption('prefix');\n    }\n    if (_getOption('suffix')) {\n      the.options.suffix = _getOption('suffix');\n    }\n    if (_getOption('step')) {\n      the.options.step = parseFloat(_getOption('step'));\n    }\n    if (_getOption('min')) {\n      the.options.min = parseFloat(_getOption('min'));\n    }\n    if (_getOption('max')) {\n      the.options.max = parseFloat(_getOption('max'));\n    }\n    the.value = parseFloat(the.inputElement.value.replace(/[^\\d.]/g, ''));\n    _setValue();\n\n    // Event Handlers\n    _handlers();\n\n    // Bind Instance\n    KTUtil.data(the.element).set('dialer', the);\n  };\n\n  // Handlers\n  var _handlers = function _handlers() {\n    KTUtil.addEvent(the.incElement, 'click', function (e) {\n      e.preventDefault();\n      _increase();\n    });\n    KTUtil.addEvent(the.decElement, 'click', function (e) {\n      e.preventDefault();\n      _decrease();\n    });\n    KTUtil.addEvent(the.inputElement, 'input', function (e) {\n      e.preventDefault();\n      _setValue();\n    });\n  };\n\n  // Event handlers\n  var _increase = function _increase() {\n    // Trigger \"after.dialer\" event\n    KTEventHandler.trigger(the.element, 'kt.dialer.increase', the);\n    the.inputElement.value = the.value + the.options.step;\n    _setValue();\n\n    // Trigger \"before.dialer\" event\n    KTEventHandler.trigger(the.element, 'kt.dialer.increased', the);\n    return the;\n  };\n  var _decrease = function _decrease() {\n    // Trigger \"after.dialer\" event\n    KTEventHandler.trigger(the.element, 'kt.dialer.decrease', the);\n    the.inputElement.value = the.value - the.options.step;\n    _setValue();\n\n    // Trigger \"before.dialer\" event\n    KTEventHandler.trigger(the.element, 'kt.dialer.decreased', the);\n    return the;\n  };\n\n  // Set Input Value\n  var _setValue = function _setValue(value) {\n    // Trigger \"after.dialer\" event\n    KTEventHandler.trigger(the.element, 'kt.dialer.change', the);\n    if (value !== undefined) {\n      the.value = value;\n    } else {\n      the.value = _parse(the.inputElement.value);\n    }\n    if (the.options.min !== null && the.value < the.options.min) {\n      the.value = the.options.min;\n    }\n    if (the.options.max !== null && the.value > the.options.max) {\n      the.value = the.options.max;\n    }\n    the.inputElement.value = _format(the.value);\n\n    // Trigger input change event\n    the.inputElement.dispatchEvent(new Event('change'));\n\n    // Trigger \"after.dialer\" event\n    KTEventHandler.trigger(the.element, 'kt.dialer.changed', the);\n  };\n  var _parse = function _parse(val) {\n    val = val.replace(/[^0-9.-]/g, '') // remove chars except number, hyphen, point. \n    .replace(/(\\..*)\\./g, '$1') // remove multiple points.\n    .replace(/(?!^)-/g, '') // remove middle hyphen.\n    .replace(/^0+(\\d)/gm, '$1'); // remove multiple leading zeros. <-- I added this.\n\n    val = parseFloat(val);\n    if (isNaN(val)) {\n      val = 0;\n    }\n    return val;\n  };\n\n  // Format\n  var _format = function _format(val) {\n    return the.options.prefix + parseFloat(val).toFixed(the.options.decimals) + the.options.suffix;\n  };\n\n  // Get option\n  var _getOption = function _getOption(name) {\n    if (the.element.hasAttribute('data-kt-dialer-' + name) === true) {\n      var attr = the.element.getAttribute('data-kt-dialer-' + name);\n      var value = attr;\n      return value;\n    } else {\n      return null;\n    }\n  };\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('dialer');\n  };\n\n  // Construct class\n  _construct();\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Plugin API\n  the.setMinValue = function (value) {\n    the.options.min = value;\n  };\n  the.setMaxValue = function (value) {\n    the.options.max = value;\n  };\n  the.setValue = function (value) {\n    _setValue(value);\n  };\n  the.getValue = function () {\n    return the.inputElement.value;\n  };\n  the.update = function () {\n    _setValue();\n  };\n  the.increase = function () {\n    return _increase();\n  };\n  the.decrease = function () {\n    return _decrease();\n  };\n  the.getElement = function () {\n    return the.element;\n  };\n  the.destroy = function () {\n    return _destroy();\n  };\n\n  // Event API\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n};\n\n// Static methods\nKTDialer.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('dialer')) {\n    return KTUtil.data(element).get('dialer');\n  } else {\n    return null;\n  }\n};\n\n// Create instances\nKTDialer.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-dialer=\"true\"]';\n  // Get instances\n  var elements = document.body.querySelectorAll(selector);\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      // Initialize instances\n      new KTDialer(elements[i]);\n    }\n  }\n};\n\n// Global initialization\nKTDialer.init = function () {\n  KTDialer.createInstances();\n};\n\n// On document ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTDialer.init);\n} else {\n  KTDialer.init();\n}\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTDialer;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc3JjL2pzL2NvbXBvbmVudHMvZGlhbGVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0EsSUFBSUEsUUFBUSxHQUFHLFNBQVhBLFFBQVFBLENBQVlDLE9BQU8sRUFBRUMsT0FBTyxFQUFFO0VBQ3RDO0VBQ0E7RUFDQTtFQUNBLElBQUlDLEdBQUcsR0FBRyxJQUFJO0VBRWQsSUFBSSxDQUFDRixPQUFPLEVBQUU7SUFDVjtFQUNKOztFQUVBO0VBQ0EsSUFBSUcsY0FBYyxHQUFHO0lBQ2pCQyxHQUFHLEVBQUUsSUFBSTtJQUNUQyxHQUFHLEVBQUUsSUFBSTtJQUNUQyxJQUFJLEVBQUUsQ0FBQztJQUNQQyxRQUFRLEVBQUUsQ0FBQztJQUNYQyxNQUFNLEVBQUUsRUFBRTtJQUNWQyxNQUFNLEVBQUU7RUFDWixDQUFDOztFQUVEO0VBQ0E7RUFDQTs7RUFFQTtFQUNBLElBQUlDLFVBQVUsR0FBRyxTQUFiQSxVQUFVQSxDQUFBLEVBQWM7SUFDeEIsSUFBS0MsTUFBTSxDQUFDQyxJQUFJLENBQUNaLE9BQU8sQ0FBQyxDQUFDYSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFHO01BQy9DWCxHQUFHLEdBQUdTLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDWixPQUFPLENBQUMsQ0FBQ2MsR0FBRyxDQUFDLFFBQVEsQ0FBQztJQUM1QyxDQUFDLE1BQU07TUFDSEMsS0FBSyxFQUFFO0lBQ1g7RUFDSixDQUFDOztFQUVEO0VBQ0EsSUFBSUEsS0FBSyxHQUFHLFNBQVJBLEtBQUtBLENBQUEsRUFBYztJQUNuQjtJQUNBYixHQUFHLENBQUNELE9BQU8sR0FBR1UsTUFBTSxDQUFDSyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUViLGNBQWMsRUFBRUYsT0FBTyxDQUFDOztJQUU1RDtJQUNBQyxHQUFHLENBQUNGLE9BQU8sR0FBR0EsT0FBTztJQUNyQkUsR0FBRyxDQUFDZSxVQUFVLEdBQUdmLEdBQUcsQ0FBQ0YsT0FBTyxDQUFDa0IsYUFBYSxDQUFD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SixDQUFDOztBQUVEO0FBQ0ExRSxRQUFRLENBQUM0RSxJQUFJLEdBQUcsWUFBVztFQUN2QjVFLFFBQVEsQ0FBQ2tFLGVBQWUsRUFBRTtBQUM5QixDQUFDOztBQUVEO0FBQ0EsSUFBSUssUUFBUSxDQUFDTSxVQUFVLEtBQUssU0FBUyxFQUFFO0VBQ3BDTixRQUFRLENBQUNPLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFOUUsUUFBUSxDQUFDNEUsSUFBSSxDQUFDO0FBQy9ELENBQUMsTUFBTTtFQUNINUUsUUFBUSxDQUFDNEUsSUFBSSxFQUFFO0FBQ25COztBQUVBO0FBQ0EsSUFBSSxLQUE2QixJQUFJLE9BQU9HLE1BQU0sQ0FBQ0MsT0FBTyxLQUFLLFdBQVcsRUFBRTtFQUN4RUQsTUFBTSxDQUFDQyxPQUFPLEdBQUdoRixRQUFRO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9qcy9jb21wb25lbnRzL2RpYWxlci5qcz9iNmY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gQ2xhc3MgZGVmaW5pdGlvblxyXG52YXIgS1REaWFsZXIgPSBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyAqKiBQcml2YXRlIHZhcmlhYmxlcyAgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIHZhciB0aGUgPSB0aGlzO1xyXG5cclxuICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEZWZhdWx0IG9wdGlvbnNcclxuICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgICAgICBtaW46IG51bGwsXHJcbiAgICAgICAgbWF4OiBudWxsLFxyXG4gICAgICAgIHN0ZXA6IDEsXHJcbiAgICAgICAgZGVjaW1hbHM6IDAsXHJcbiAgICAgICAgcHJlZml4OiBcIlwiLFxyXG4gICAgICAgIHN1ZmZpeDogXCJcIlxyXG4gICAgfTtcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyAqKiBQcml2YXRlIG1ldGhvZHMgICoqIC8vXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgLy8gQ29uc3RydWN0b3JcclxuICAgIHZhciBfY29uc3RydWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCBLVFV0aWwuZGF0YShlbGVtZW50KS5oYXMoJ2RpYWxlcicpID09PSB0cnVlICkge1xyXG4gICAgICAgICAgICB0aGUgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ2RpYWxlcicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEluaXRpYWxpemVcclxuICAgIHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIFZhcmlhYmxlc1xyXG4gICAgICAgIHRoZS5vcHRpb25zID0gS1RVdGlsLmRlZXBFeHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgLy8gRWxlbWVudHNcclxuICAgICAgICB0aGUuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhlLmluY0VsZW1lbnQgPSB0aGUuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1kaWFsZXItY29udHJvbD1cImluY3JlYXNlXCJdJyk7XHJcbiAgICAgICAgdGhlLmRlY0VsZW1lbnQgPSB0aGUuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1kaWFsZXItY29udHJvbD1cImRlY3JlYXNlXCJdJyk7XHJcbiAgICAgICAgdGhlLmlucHV0RWxlbWVudCA9IHRoZS5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGVdJyk7IFxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFNldCBWYWx1ZXNcclxuICAgICAgICBpZiAoX2dldE9wdGlvbignZGVjaW1hbHMnKSkge1xyXG4gICAgICAgICAgICB0aGUub3B0aW9ucy5kZWNpbWFscyA9IHBhcnNlSW50KF9nZXRPcHRpb24oJ2RlY2ltYWxzJykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAoX2dldE9wdGlvbigncHJlZml4JykpIHtcclxuICAgICAgICAgICAgdGhlLm9wdGlvbnMucHJlZml4ID0gX2dldE9wdGlvbigncHJlZml4Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChfZ2V0T3B0aW9uKCdzdWZmaXgnKSkge1xyXG4gICAgICAgICAgICB0aGUub3B0aW9ucy5zdWZmaXggPSBfZ2V0T3B0aW9uKCdzdWZmaXgnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKF9nZXRPcHRpb24oJ3N0ZXAnKSkge1xyXG4gICAgICAgICAgICB0aGUub3B0aW9ucy5zdGVwID0gcGFyc2VGbG9hdChfZ2V0T3B0aW9uKCdzdGVwJykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF9nZXRPcHRpb24oJ21pbicpKSB7XHJcbiAgICAgICAgICAgIHRoZS5vcHRpb25zLm1pbiA9IHBhcnNlRmxvYXQoX2dldE9wdGlvbignbWluJykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF9nZXRPcHRpb24oJ21heCcpKSB7XHJcbiAgICAgICAgICAgIHRoZS5vcHRpb25zLm1heCA9IHBhcnNlRmxvYXQoX2dldE9wdGlvbignbWF4JykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhlLnZhbHVlID0gcGFyc2VGbG9hdCh0aGUuaW5wdXRFbGVtZW50LnZhbHVlLnJlcGxhY2UoL1teXFxkLl0vZywgJycpKTsgIFxyXG5cclxuICAgICAgICBfc2V0VmFsdWUoKTtcclxuXHJcbiAgICAgICAgLy8gRXZlbnQgSGFuZGxlcnNcclxuICAgICAgICBfaGFuZGxlcnMoKTtcclxuXHJcbiAgICAgICAgLy8gQmluZCBJbnN0YW5jZVxyXG4gICAgICAgIEtUVXRpbC5kYXRhKHRoZS5lbGVtZW50KS5zZXQoJ2RpYWxlcicsIHRoZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFuZGxlcnNcclxuICAgIHZhciBfaGFuZGxlcnMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBLVFV0aWwuYWRkRXZlbnQodGhlLmluY0VsZW1lbnQsICdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBfaW5jcmVhc2UoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgS1RVdGlsLmFkZEV2ZW50KHRoZS5kZWNFbGVtZW50LCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIF9kZWNyZWFzZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBLVFV0aWwuYWRkRXZlbnQodGhlLmlucHV0RWxlbWVudCwgJ2lucHV0JywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBfc2V0VmFsdWUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFdmVudCBoYW5kbGVyc1xyXG4gICAgdmFyIF9pbmNyZWFzZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIFRyaWdnZXIgXCJhZnRlci5kaWFsZXJcIiBldmVudFxyXG4gICAgICAgIEtURXZlbnRIYW5kbGVyLnRyaWdnZXIodGhlLmVsZW1lbnQsICdrdC5kaWFsZXIuaW5jcmVhc2UnLCB0aGUpO1xyXG5cclxuICAgICAgICB0aGUuaW5wdXRFbGVtZW50LnZhbHVlID0gdGhlLnZhbHVlICsgdGhlLm9wdGlvbnMuc3RlcDtcclxuICAgICAgICBfc2V0VmFsdWUoKTtcclxuXHJcbiAgICAgICAgLy8gVHJpZ2dlciBcImJlZm9yZS5kaWFsZXJcIiBldmVudFxyXG4gICAgICAgIEtURXZlbnRIYW5kbGVyLnRyaWdnZXIodGhlLmVsZW1lbnQsICdrdC5kaWFsZXIuaW5jcmVhc2VkJywgdGhlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoZTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2RlY3JlYXNlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gVHJpZ2dlciBcImFmdGVyLmRpYWxlclwiIGV2ZW50XHJcbiAgICAgICAgS1RFdmVudEhhbmRsZXIudHJpZ2dlcih0aGUuZWxlbWVudCwgJ2t0LmRpYWxlci5kZWNyZWFzZScsIHRoZSk7XHJcblxyXG4gICAgICAgIHRoZS5pbnB1dEVsZW1lbnQudmFsdWUgPSB0aGUudmFsdWUgLSB0aGUub3B0aW9ucy5zdGVwOyAgICAgIFxyXG5cclxuICAgICAgICBfc2V0VmFsdWUoKTtcclxuXHJcbiAgICAgICAgLy8gVHJpZ2dlciBcImJlZm9yZS5kaWFsZXJcIiBldmVudFxyXG4gICAgICAgIEtURXZlbnRIYW5kbGVyLnRyaWdnZXIodGhlLmVsZW1lbnQsICdrdC5kaWFsZXIuZGVjcmVhc2VkJywgdGhlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZXQgSW5wdXQgVmFsdWVcclxuICAgIHZhciBfc2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIC8vIFRyaWdnZXIgXCJhZnRlci5kaWFsZXJcIiBldmVudFxyXG4gICAgICAgIEtURXZlbnRIYW5kbGVyLnRyaWdnZXIodGhlLmVsZW1lbnQsICdrdC5kaWFsZXIuY2hhbmdlJywgdGhlKTtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhlLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhlLnZhbHVlID0gX3BhcnNlKHRoZS5pbnB1dEVsZW1lbnQudmFsdWUpOyBcclxuICAgICAgICB9ICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBpZiAodGhlLm9wdGlvbnMubWluICE9PSBudWxsICYmIHRoZS52YWx1ZSA8IHRoZS5vcHRpb25zLm1pbikge1xyXG4gICAgICAgICAgICB0aGUudmFsdWUgPSB0aGUub3B0aW9ucy5taW47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhlLm9wdGlvbnMubWF4ICE9PSBudWxsICYmIHRoZS52YWx1ZSA+IHRoZS5vcHRpb25zLm1heCkge1xyXG4gICAgICAgICAgICB0aGUudmFsdWUgPSB0aGUub3B0aW9ucy5tYXg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGUuaW5wdXRFbGVtZW50LnZhbHVlID0gX2Zvcm1hdCh0aGUudmFsdWUpO1xyXG5cclxuICAgICAgICAvLyBUcmlnZ2VyIGlucHV0IGNoYW5nZSBldmVudFxyXG4gICAgICAgIHRoZS5pbnB1dEVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcclxuXHJcbiAgICAgICAgLy8gVHJpZ2dlciBcImFmdGVyLmRpYWxlclwiIGV2ZW50XHJcbiAgICAgICAgS1RFdmVudEhhbmRsZXIudHJpZ2dlcih0aGUuZWxlbWVudCwgJ2t0LmRpYWxlci5jaGFuZ2VkJywgdGhlKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX3BhcnNlID0gZnVuY3Rpb24odmFsKSB7XHJcbiAgICAgICAgdmFsID0gdmFsXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXjAtOS4tXS9nLCAnJykgICAgICAgLy8gcmVtb3ZlIGNoYXJzIGV4Y2VwdCBudW1iZXIsIGh5cGhlbiwgcG9pbnQuIFxyXG4gICAgICAgICAgICAucmVwbGFjZSgvKFxcLi4qKVxcLi9nLCAnJDEnKSAgICAgLy8gcmVtb3ZlIG11bHRpcGxlIHBvaW50cy5cclxuICAgICAgICAgICAgLnJlcGxhY2UoLyg/IV4pLS9nLCAnJykgICAgICAgICAvLyByZW1vdmUgbWlkZGxlIGh5cGhlbi5cclxuICAgICAgICAgICAgLnJlcGxhY2UoL14wKyhcXGQpL2dtLCAnJDEnKTsgICAgLy8gcmVtb3ZlIG11bHRpcGxlIGxlYWRpbmcgemVyb3MuIDwtLSBJIGFkZGVkIHRoaXMuXHJcblxyXG4gICAgICAgIHZhbCA9IHBhcnNlRmxvYXQodmFsKTtcclxuXHJcbiAgICAgICAgaWYgKGlzTmFOKHZhbCkpIHtcclxuICAgICAgICAgICAgdmFsID0gMDtcclxuICAgICAgICB9IFxyXG5cclxuICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZvcm1hdFxyXG4gICAgdmFyIF9mb3JtYXQgPSBmdW5jdGlvbih2YWwpe1xyXG4gICAgICAgIHJldHVybiB0aGUub3B0aW9ucy5wcmVmaXggKyBwYXJzZUZsb2F0KHZhbCkudG9GaXhlZCh0aGUub3B0aW9ucy5kZWNpbWFscykgKyB0aGUub3B0aW9ucy5zdWZmaXg7ICAgICAgICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICAvLyBHZXQgb3B0aW9uXHJcbiAgICB2YXIgX2dldE9wdGlvbiA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICBpZiAoIHRoZS5lbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGF0YS1rdC1kaWFsZXItJyArIG5hbWUpID09PSB0cnVlICkge1xyXG4gICAgICAgICAgICB2YXIgYXR0ciA9IHRoZS5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1rdC1kaWFsZXItJyArIG5hbWUpO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBhdHRyOyAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2Rlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBLVFV0aWwuZGF0YSh0aGUuZWxlbWVudCkucmVtb3ZlKCdkaWFsZXInKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb25zdHJ1Y3QgY2xhc3NcclxuICAgIF9jb25zdHJ1Y3QoKTtcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gKiogUHVibGljIEFQSSAgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgLy8gUGx1Z2luIEFQSVxyXG4gICAgdGhlLnNldE1pblZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICB0aGUub3B0aW9ucy5taW4gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGUuc2V0TWF4VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHRoZS5vcHRpb25zLm1heCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgX3NldFZhbHVlKHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGUuZ2V0VmFsdWUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhlLmlucHV0RWxlbWVudC52YWx1ZTtcclxuICAgIH0gICAgXHJcblxyXG4gICAgdGhlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIF9zZXRWYWx1ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoZS5pbmNyZWFzZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBfaW5jcmVhc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGUuZGVjcmVhc2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gX2RlY3JlYXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhlLmdldEVsZW1lbnQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhlLmVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgdGhlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gX2Rlc3Ryb3koKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFdmVudCBBUElcclxuICAgIHRoZS5vbiA9IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gS1RFdmVudEhhbmRsZXIub24odGhlLmVsZW1lbnQsIG5hbWUsIGhhbmRsZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoZS5vbmUgPSBmdW5jdGlvbihuYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIEtURXZlbnRIYW5kbGVyLm9uZSh0aGUuZWxlbWVudCwgbmFtZSwgaGFuZGxlcik7XHJcbiAgICB9XHJcblxyXG4gICAgdGhlLm9mZiA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gS1RFdmVudEhhbmRsZXIub2ZmKHRoZS5lbGVtZW50LCBuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGUudHJpZ2dlciA9IGZ1bmN0aW9uKG5hbWUsIGV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIEtURXZlbnRIYW5kbGVyLnRyaWdnZXIodGhlLmVsZW1lbnQsIG5hbWUsIGV2ZW50LCB0aGUsIGV2ZW50KTtcclxuICAgIH1cclxufTtcclxuXHJcbi8vIFN0YXRpYyBtZXRob2RzXHJcbktURGlhbGVyLmdldEluc3RhbmNlID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgaWYgKCBlbGVtZW50ICE9PSBudWxsICYmIEtUVXRpbC5kYXRhKGVsZW1lbnQpLmhhcygnZGlhbGVyJykgKSB7XHJcbiAgICAgICAgcmV0dXJuIEtUVXRpbC5kYXRhKGVsZW1lbnQpLmdldCgnZGlhbGVyJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDcmVhdGUgaW5zdGFuY2VzXHJcbktURGlhbGVyLmNyZWF0ZUluc3RhbmNlcyA9IGZ1bmN0aW9uKHNlbGVjdG9yID0gJ1tkYXRhLWt0LWRpYWxlcj1cInRydWVcIl0nKSB7XHJcbiAgICAvLyBHZXQgaW5zdGFuY2VzXHJcbiAgICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG5cclxuICAgIGlmICggZWxlbWVudHMgJiYgZWxlbWVudHMubGVuZ3RoID4gMCApIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBpbnN0YW5jZXNcclxuICAgICAgICAgICAgbmV3IEtURGlhbGVyKGVsZW1lbnRzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEdsb2JhbCBpbml0aWFsaXphdGlvblxyXG5LVERpYWxlci5pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBLVERpYWxlci5jcmVhdGVJbnN0YW5jZXMoKTtcclxufTtcclxuXHJcbi8vIE9uIGRvY3VtZW50IHJlYWR5XHJcbmlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcclxuICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIEtURGlhbGVyLmluaXQpO1xyXG59IGVsc2Uge1xyXG4gICAgS1REaWFsZXIuaW5pdCgpO1xyXG59XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gS1REaWFsZXI7XHJcbn0iXSwibmFtZXMiOlsiS1REaWFsZXIiLCJlbGVtZW50Iiwib3B0aW9ucyIsInRoZSIsImRlZmF1bHRPcHRpb25zIiwibWluIiwibWF4Iiwic3RlcCIsImRlY2ltYWxzIiwicHJlZml4Iiwic3VmZml4IiwiX2NvbnN0cnVjdCIsIktUVXRpbCIsImRhdGEiLCJoYXMiLCJnZXQiLCJfaW5pdCIsImRlZXBFeHRlbmQiLCJpbmNFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImRlY0VsZW1lbnQiLCJpbnB1dEVsZW1lbnQiLCJfZ2V0T3B0aW9uIiwicGFyc2VJbnQiLCJwYXJzZUZsb2F0IiwidmFsdWUiLCJyZXBsYWNlIiwiX3NldFZhbHVlIiwiX2hhbmRsZXJzIiwic2V0IiwiYWRkRXZlbnQiLCJlIiwicHJldmVudERlZmF1bHQiLCJfaW5jcmVhc2UiLCJfZGVjcmVhc2UiLCJLVEV2ZW50SGFuZGxlciIsInRyaWdnZXIiLCJ1bmRlZmluZWQiLCJfcGFyc2UiLCJfZm9ybWF0IiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwidmFsIiwiaXNOYU4iLCJ0b0ZpeGVkIiwibmFtZSIsImhhc0F0dHJpYnV0ZSIsImF0dHIiLCJnZXRBdHRyaWJ1dGUiLCJfZGVzdHJveSIsInJlbW92ZSIsInNldE1pblZhbHVlIiwic2V0TWF4VmFsdWUiLCJzZXRWYWx1ZSIsImdldFZhbHVlIiwidXBkYXRlIiwiaW5jcmVhc2UiLCJkZWNyZWFzZSIsImdldEVsZW1lbnQiLCJkZXN0cm95Iiwib24iLCJoYW5kbGVyIiwib25lIiwib2ZmIiwiZXZlbnQiLCJnZXRJbnN0YW5jZSIsImNyZWF0ZUluc3RhbmNlcyIsInNlbGVjdG9yIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZWxlbWVudHMiLCJkb2N1bWVudCIsImJvZHkiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaSIsImxlbiIsImluaXQiLCJyZWFkeVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/src/js/components/dialer.js\n");

/***/ }),

/***/ "./resources/src/js/components/drawer.js":
/*!***********************************************!*\
  !*** ./resources/src/js/components/drawer.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTDrawer = function KTDrawer(element, options) {\n  //////////////////////////////\n  // ** Private variables  ** //\n  //////////////////////////////\n  var the = this;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  }\n\n  // Default options\n  var defaultOptions = {\n    overlay: true,\n    direction: 'end',\n    baseClass: 'drawer',\n    overlayClass: 'drawer-overlay'\n  };\n\n  ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('drawer')) {\n      the = KTUtil.data(element).get('drawer');\n    } else {\n      _init();\n    }\n  };\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('drawer');\n    the.element = element;\n    the.overlayElement = null;\n    the.name = the.element.getAttribute('data-kt-drawer-name');\n    the.shown = false;\n    the.lastWidth;\n    the.toggleElement = null;\n\n    // Set initialized\n    the.element.setAttribute('data-kt-drawer', 'true');\n\n    // Event Handlers\n    _handlers();\n\n    // Update Instance\n    _update();\n\n    // Bind Instance\n    KTUtil.data(the.element).set('drawer', the);\n  };\n  var _handlers = function _handlers() {\n    var togglers = _getOption('toggle');\n    var closers = _getOption('close');\n    if (togglers !== null && togglers.length > 0) {\n      KTUtil.on(body, togglers, 'click', function (e) {\n        e.preventDefault();\n        the.toggleElement = this;\n        _toggle();\n      });\n    }\n    if (closers !== null && closers.length > 0) {\n      KTUtil.on(body, closers, 'click', function (e) {\n        e.preventDefault();\n        the.closeElement = this;\n        _hide();\n      });\n    }\n  };\n  var _toggle = function _toggle() {\n    if (KTEventHandler.trigger(the.element, 'kt.drawer.toggle', the) === false) {\n      return;\n    }\n    if (the.shown === true) {\n      _hide();\n    } else {\n      _show();\n    }\n    KTEventHandler.trigger(the.element, 'kt.drawer.toggled', the);\n  };\n  var _hide = function _hide() {\n    if (KTEventHandler.trigger(the.element, 'kt.drawer.hide', the) === false) {\n      return;\n    }\n    the.shown = false;\n    _deleteOverlay();\n    body.removeAttribute('data-kt-drawer-' + the.name, 'on');\n    body.removeAttribute('data-kt-drawer');\n    KTUtil.removeClass(the.element, the.options.baseClass + '-on');\n    if (the.toggleElement !== null) {\n      KTUtil.removeClass(the.toggleElement, 'active');\n    }\n    KTEventHandler.trigger(the.element, 'kt.drawer.after.hidden', the) === false;\n  };\n  var _show = function _show() {\n    if (KTEventHandler.trigger(the.element, 'kt.drawer.show', the) === false) {\n      return;\n    }\n    the.shown = true;\n    _createOverlay();\n    body.setAttribute('data-kt-drawer-' + the.name, 'on');\n    body.setAttribute('data-kt-drawer', 'on');\n    KTUtil.addClass(the.element, the.options.baseClass + '-on');\n    if (the.toggleElement !== null) {\n      KTUtil.addClass(the.toggleElement, 'active');\n    }\n    KTEventHandler.trigger(the.element, 'kt.drawer.shown', the);\n  };\n  var _update = function _update() {\n    var width = _getWidth();\n    var direction = _getOption('direction');\n    var top = _getOption('top');\n    var bottom = _getOption('bottom');\n    var start = _getOption('start');\n    var end = _getOption('end');\n\n    // Reset state\n    if (KTUtil.hasClass(the.element, the.options.baseClass + '-on') === true && String(body.getAttribute('data-kt-drawer-' + the.name + '-')) === 'on') {\n      the.shown = true;\n    } else {\n      the.shown = false;\n    }\n\n    // Activate/deactivate\n    if (_getOption('activate') === true) {\n      KTUtil.addClass(the.element, the.options.baseClass);\n      KTUtil.addClass(the.element, the.options.baseClass + '-' + direction);\n      KTUtil.css(the.element, 'width', width, true);\n      the.lastWidth = width;\n      if (top) {\n        KTUtil.css(the.element, 'top', top);\n      }\n      if (bottom) {\n        KTUtil.css(the.element, 'bottom', bottom);\n      }\n      if (start) {\n        if (KTUtil.isRTL()) {\n          KTUtil.css(the.element, 'right', start);\n        } else {\n          KTUtil.css(the.element, 'left', start);\n        }\n      }\n      if (end) {\n        if (KTUtil.isRTL()) {\n          KTUtil.css(the.element, 'left', end);\n        } else {\n          KTUtil.css(the.element, 'right', end);\n        }\n      }\n    } else {\n      KTUtil.removeClass(the.element, the.options.baseClass);\n      KTUtil.removeClass(the.element, the.options.baseClass + '-' + direction);\n      KTUtil.css(the.element, 'width', '');\n      if (top) {\n        KTUtil.css(the.element, 'top', '');\n      }\n      if (bottom) {\n        KTUtil.css(the.element, 'bottom', '');\n      }\n      if (start) {\n        if (KTUtil.isRTL()) {\n          KTUtil.css(the.element, 'right', '');\n        } else {\n          KTUtil.css(the.element, 'left', '');\n        }\n      }\n      if (end) {\n        if (KTUtil.isRTL()) {\n          KTUtil.css(the.element, 'left', '');\n        } else {\n          KTUtil.css(the.element, 'right', '');\n        }\n      }\n      _hide();\n    }\n  };\n  var _createOverlay = function _createOverlay() {\n    if (_getOption('overlay') === true) {\n      the.overlayElement = document.createElement('DIV');\n      KTUtil.css(the.overlayElement, 'z-index', KTUtil.css(the.element, 'z-index') - 1); // update\n\n      body.append(the.overlayElement);\n      KTUtil.addClass(the.overlayElement, _getOption('overlay-class'));\n      KTUtil.addEvent(the.overlayElement, 'click', function (e) {\n        e.preventDefault();\n        _hide();\n      });\n    }\n  };\n  var _deleteOverlay = function _deleteOverlay() {\n    if (the.overlayElement !== null) {\n      KTUtil.remove(the.overlayElement);\n    }\n  };\n  var _getOption = function _getOption(name) {\n    if (the.element.hasAttribute('data-kt-drawer-' + name) === true) {\n      var attr = the.element.getAttribute('data-kt-drawer-' + name);\n      var value = KTUtil.getResponsiveValue(attr);\n      if (value !== null && String(value) === 'true') {\n        value = true;\n      } else if (value !== null && String(value) === 'false') {\n        value = false;\n      }\n      return value;\n    } else {\n      var optionName = KTUtil.snakeToCamel(name);\n      if (the.options[optionName]) {\n        return KTUtil.getResponsiveValue(the.options[optionName]);\n      } else {\n        return null;\n      }\n    }\n  };\n  var _getWidth = function _getWidth() {\n    var width = _getOption('width');\n    if (width === 'auto') {\n      width = KTUtil.css(the.element, 'width');\n    }\n    return width;\n  };\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('drawer');\n  };\n\n  // Construct class\n  _construct();\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Plugin API\n  the.toggle = function () {\n    return _toggle();\n  };\n  the.show = function () {\n    return _show();\n  };\n  the.hide = function () {\n    return _hide();\n  };\n  the.isShown = function () {\n    return the.shown;\n  };\n  the.update = function () {\n    _update();\n  };\n  the.goElement = function () {\n    return the.element;\n  };\n  the.destroy = function () {\n    return _destroy();\n  };\n\n  // Event API\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n};\n\n// Static methods\nKTDrawer.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('drawer')) {\n    return KTUtil.data(element).get('drawer');\n  } else {\n    return null;\n  }\n};\n\n// Hide all drawers and skip one if provided\nKTDrawer.hideAll = function () {\n  var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '[data-kt-drawer=\"true\"]';\n  var items = document.querySelectorAll(selector);\n  if (items && items.length > 0) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      var item = items[i];\n      var drawer = KTDrawer.getInstance(item);\n      if (!drawer) {\n        continue;\n      }\n      if (skip) {\n        if (item !== skip) {\n          drawer.hide();\n        }\n      } else {\n        drawer.hide();\n      }\n    }\n  }\n};\n\n// Update all drawers\nKTDrawer.updateAll = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-drawer=\"true\"]';\n  var items = document.querySelectorAll(selector);\n  if (items && items.length > 0) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      var item = items[i];\n      var drawer = KTDrawer.getInstance(item);\n      if (drawer) {\n        drawer.update();\n        ;\n      }\n    }\n  }\n};\n\n// Create instances\nKTDrawer.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-drawer=\"true\"]';\n  var body = document.getElementsByTagName(\"BODY\")[0];\n\n  // Initialize Menus\n  var elements = body.querySelectorAll(selector);\n  var drawer;\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      drawer = new KTDrawer(elements[i]);\n    }\n  }\n};\n\n// Toggle instances\nKTDrawer.handleShow = function () {\n  // External drawer toggle handler\n  KTUtil.on(document.body, '[data-kt-drawer-show=\"true\"][data-kt-drawer-target]', 'click', function (e) {\n    var element = document.querySelector(this.getAttribute('data-kt-drawer-target'));\n    if (element) {\n      KTDrawer.getInstance(element).show();\n    }\n  });\n};\n\n// Dismiss instances\nKTDrawer.handleDismiss = function () {\n  // External drawer toggle handler\n  KTUtil.on(document.body, '[data-kt-drawer-dismiss=\"true\"]', 'click', function (e) {\n    var element = this.closest('[data-kt-drawer=\"true\"]');\n    if (element) {\n      var drawer = KTDrawer.getInstance(element);\n      if (drawer.isShown()) {\n        drawer.hide();\n      }\n    }\n  });\n};\n\n// Window resize Handling\nwindow.addEventListener('resize', function () {\n  var timer;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n  KTUtil.throttle(timer, function () {\n    // Locate and update drawer instances on window resize\n    var elements = body.querySelectorAll('[data-kt-drawer=\"true\"]');\n    if (elements && elements.length > 0) {\n      for (var i = 0, len = elements.length; i < len; i++) {\n        var drawer = KTDrawer.getInstance(elements[i]);\n        if (drawer) {\n          drawer.update();\n        }\n      }\n    }\n  }, 200);\n});\n\n// Global initialization\nKTDrawer.init = function () {\n  KTDrawer.createInstances();\n  KTDrawer.handleShow();\n  KTDrawer.handleDismiss();\n};\n\n// On document ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTDrawer.init);\n} else {\n  KTDrawer.init();\n}\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTDrawer;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/components/drawer.js\n");

/***/ }),

/***/ "./resources/src/js/components/event-handler.js":
/*!******************************************************!*\
  !*** ./resources/src/js/components/event-handler.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTEventHandler = function () {\n  ////////////////////////////\n  // ** Private Variables  ** //\n  ////////////////////////////\n  var _handlers = {};\n\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n  var _triggerEvent = function _triggerEvent(element, name, target, e) {\n    if (KTUtil.data(element).has(name) === true) {\n      var handlerId = KTUtil.data(element).get(name);\n      if (_handlers[name] && _handlers[name][handlerId]) {\n        var handler = _handlers[name][handlerId];\n        if (handler.name === name) {\n          if (handler.one == true) {\n            if (handler.fired == false) {\n              _handlers[name][handlerId].fired = true;\n              return handler.callback.call(this, target, e);\n            }\n          } else {\n            return handler.callback.call(this, target, e);\n          }\n        }\n      }\n    }\n    return null;\n  };\n  var _addEvent = function _addEvent(element, name, callback, one) {\n    var handlerId = KTUtil.getUniqueId('event');\n    KTUtil.data(element).set(name, handlerId);\n    if (!_handlers[name]) {\n      _handlers[name] = {};\n    }\n    _handlers[name][handlerId] = {\n      name: name,\n      callback: callback,\n      one: one,\n      fired: false\n    };\n  };\n  var _removeEvent = function _removeEvent(element, name) {\n    var handlerId = KTUtil.data(element).get(name);\n    if (_handlers[name] && _handlers[name][handlerId]) {\n      delete _handlers[name][handlerId];\n    }\n  };\n\n  ////////////////////////////\n  // ** Public Methods  ** //\n  ////////////////////////////\n  return {\n    trigger: function trigger(element, name, target, e) {\n      return _triggerEvent(element, name, target, e);\n    },\n    on: function on(element, name, handler) {\n      return _addEvent(element, name, handler);\n    },\n    one: function one(element, name, handler) {\n      return _addEvent(element, name, handler, true);\n    },\n    off: function off(element, name) {\n      return _removeEvent(element, name);\n    },\n    debug: function debug() {\n      for (var b in _handlers) {\n        if (_handlers.hasOwnProperty(b)) console.log(b);\n      }\n    }\n  };\n}();\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTEventHandler;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc3JjL2pzL2NvbXBvbmVudHMvZXZlbnQtaGFuZGxlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLElBQUlBLGNBQWMsR0FBRyxZQUFXO0VBQzVCO0VBQ0E7RUFDQTtFQUNBLElBQUlDLFNBQVMsR0FBRyxDQUFDLENBQUM7O0VBRWxCO0VBQ0E7RUFDQTtFQUNBLElBQUlDLGFBQWEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBWUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsQ0FBQyxFQUFFO0lBQ25ELElBQUtDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTCxPQUFPLENBQUMsQ0FBQ00sR0FBRyxDQUFDTCxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUc7TUFDM0MsSUFBSU0sU0FBUyxHQUFHSCxNQUFNLENBQUNDLElBQUksQ0FBQ0wsT0FBTyxDQUFDLENBQUNRLEdBQUcsQ0FBQ1AsSUFBSSxDQUFDO01BRTlDLElBQUtILFNBQVMsQ0FBQ0csSUFBSSxDQUFDLElBQUlILFNBQVMsQ0FBQ0csSUFBSSxDQUFDLENBQUNNLFNBQVMsQ0FBQyxFQUFHO1FBQ2pELElBQUlFLE9BQU8sR0FBR1gsU0FBUyxDQUFDRyxJQUFJLENBQUMsQ0FBQ00sU0FBUyxDQUFDO1FBRXhDLElBQUtFLE9BQU8sQ0FBQ1IsSUFBSSxLQUFLQSxJQUFJLEVBQUc7VUFDekIsSUFBS1EsT0FBTyxDQUFDQyxHQUFHLElBQUksSUFBSSxFQUFHO1lBQ3ZCLElBQUtELE9BQU8sQ0FBQ0UsS0FBSyxJQUFJLEtBQUssRUFBRztjQUMxQmIsU0FBUyxDQUFDRyxJQUFJLENBQUMsQ0FBQ00sU0FBUyxDQUFDLENBQUNJLEtBQUssR0FBRyxJQUFJO2NBRXZDLE9BQU9GLE9BQU8sQ0FBQ0csUUFBUSxDQUFDQyxJQUFJLENBQUMsSUFBSSxFQUFFWCxNQUFNLEVBQUVDLENBQUMsQ0FBQztZQUNqRDtVQUNKLENBQUMsTUFBTTtZQUNILE9BQU9NLE9BQU8sQ0FBQ0csUUFBUSxDQUFDQyxJQUFJLENBQUMsSUFBSSxFQUFFWCxNQUFNLEVBQUVDLENBQUMsQ0FBQztVQUNqRDtRQUNKO01BQ0o7SUFDSjtJQUVBLE9BQU8sSUFBSTtFQUNmLENBQUM7RUFFRCxJQUFJVyxTQUFTLEdBQUcsU0FBWkEsU0FBU0EsQ0FBWWQsT0FBTyxFQUFFQyxJQUFJLEVBQUVXLFFBQVEsRUFBRUYsR0FBRyxFQUFFO0lBQ25ELElBQUlILFNBQVMsR0FBR0gsTUFBTSxDQUFDVyxXQUFXLENBQUMsT0FBTyxDQUFDO0lBRTNDWCxNQUFNLENBQUNDLElBQUksQ0FBQ0wsT0FBTyxDQUFDLENBQUNnQixHQUFHLENBQUNmLElBQUksRUFBRU0sU0FBUyxDQUFDO0lBRXpDLElBQUssQ0FBQ1QsU0FBUyxDQUFDRyxJQUFJLENBQUMsRUFBRztNQUNwQkgsU0FBUyxDQUFDRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEI7SUFFQUgsU0FBUyxDQUFDRyxJQUFJLENBQUMsQ0FBQ00sU0FBUyxDQUFDLEdBQUc7TUFDekJOLElBQUksRUFBRUEsSUFBSTtNQUNWVyxRQUFRLEVBQUVBLFFBQVE7TUFDbEJGLEdBQUcsRUFBRUEsR0FBRztNQUNSQyxLQUFLLEVBQUU7SUFDWCxDQUFDO0VBQ0wsQ0FBQztFQUVELElBQUlNLFlBQVksR0FBRyxTQUFmQSxZQUFZQSxDQUFZakIsT0FBTyxFQUFFQyxJQUFJLEVBQUU7SUFDdkMsSUFBSU0sU0FBUyxHQUFHSCxNQUFNLENBQUNDLElBQUksQ0FBQ0wsT0FBTyxDQUFDLENBQUNRLEdBQUcsQ0FBQ1AsSUFBSSxDQUFDO0lBRTlDLElBQUlILFNBQVMsQ0FBQ0csSUFBSSxDQUFDLElBQUlILFNBQVMsQ0FBQ0csSUFBSSxDQUFDLENBQUNNLFNBQVMsQ0FBQyxFQUFFO01BQy9DLE9BQU9ULFNBQVMsQ0FBQ0csSUFBSSxDQUFDLENBQUNNLFNBQVMsQ0FBQztJQUNyQztFQUNKLENBQUM7O0VBRUQ7RUFDQTtFQUNBO0VBQ0EsT0FBTztJQUNIVyxPQUFPLEVBQUUsU0FBQUEsUUFBU2xCLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLENBQUMsRUFBRTtNQUN4QyxPQUFPSixhQUFhLENBQUNDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRURnQixFQUFFLEVBQUUsU0FBQUEsR0FBU25CLE9BQU8sRUFBRUMsSUFBSSxFQUFFUSxPQUFPLEVBQUU7TUFDakMsT0FBT0ssU0FBUyxDQUFDZCxPQUFPLEVBQUVDLElBQUksRUFBRVEsT0FBTyxDQUFDO0lBQzVDLENBQUM7SUFFREMsR0FBRyxFQUFFLFNBQUFBLElBQVNWLE9BQU8sRUFBRUMsSUFBSSxFQUFFUSxPQUFPLEVBQUU7TUFDbEMsT0FBT0ssU0FBUyxDQUFDZCxPQUFPLEVBQUVDLElBQUksRUFBRVEsT0FBTyxFQUFFLElBQUksQ0FBQztJQUNsRCxDQUFDO0lBRURXLEdBQUcsRUFBRSxTQUFBQSxJQUFTcEIsT0FBTyxFQUFFQyxJQUFJLEVBQUU7TUFDekIsT0FBT2dCLFlBQVksQ0FBQ2pCLE9BQU8sRUFBRUMsSUFBSSxDQUFDO0lBQ3RDLENBQUM7SUFFRG9CLEtBQUssRUFBRSxTQUFBQSxNQUFBLEVBQVc7TUFDZCxLQUFLLElBQUlDLENBQUMsSUFBSXhCLFNBQVMsRUFBRTtRQUNyQixJQUFLQSxTQUFTLENBQUN5QixjQUFjLENBQUNELENBQUMsQ0FBQyxFQUFHRSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0gsQ0FBQyxDQUFDO01BQ3JEO0lBQ0o7RUFDSixDQUFDO0FBQ0wsQ0FBQyxFQUFFOztBQUVIO0FBQ0EsSUFBSSxLQUE2QixJQUFJLE9BQU9JLE1BQU0sQ0FBQ0MsT0FBTyxLQUFLLFdBQVcsRUFBRTtFQUN4RUQsTUFBTSxDQUFDQyxPQUFPLEdBQUc5QixjQUFjO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9qcy9jb21wb25lbnRzL2V2ZW50LWhhbmRsZXIuanM/YzMwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIENsYXNzIGRlZmluaXRpb25cclxudmFyIEtURXZlbnRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyAqKiBQcml2YXRlIFZhcmlhYmxlcyAgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIHZhciBfaGFuZGxlcnMgPSB7fTtcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyAqKiBQcml2YXRlIE1ldGhvZHMgICoqIC8vXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICB2YXIgX3RyaWdnZXJFdmVudCA9IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHRhcmdldCwgZSkge1xyXG4gICAgICAgIGlmICggS1RVdGlsLmRhdGEoZWxlbWVudCkuaGFzKG5hbWUpID09PSB0cnVlICkge1xyXG4gICAgICAgICAgICB2YXIgaGFuZGxlcklkID0gS1RVdGlsLmRhdGEoZWxlbWVudCkuZ2V0KG5hbWUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBfaGFuZGxlcnNbbmFtZV0gJiYgX2hhbmRsZXJzW25hbWVdW2hhbmRsZXJJZF0gKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IF9oYW5kbGVyc1tuYW1lXVtoYW5kbGVySWRdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggaGFuZGxlci5uYW1lID09PSBuYW1lICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICggaGFuZGxlci5vbmUgPT0gdHJ1ZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBoYW5kbGVyLmZpcmVkID09IGZhbHNlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hhbmRsZXJzW25hbWVdW2hhbmRsZXJJZF0uZmlyZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyLmNhbGxiYWNrLmNhbGwodGhpcywgdGFyZ2V0LCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyLmNhbGxiYWNrLmNhbGwodGhpcywgdGFyZ2V0LCBlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfYWRkRXZlbnQgPSBmdW5jdGlvbihlbGVtZW50LCBuYW1lLCBjYWxsYmFjaywgb25lKSB7XHJcbiAgICAgICAgdmFyIGhhbmRsZXJJZCA9IEtUVXRpbC5nZXRVbmlxdWVJZCgnZXZlbnQnKTtcclxuXHJcbiAgICAgICAgS1RVdGlsLmRhdGEoZWxlbWVudCkuc2V0KG5hbWUsIGhhbmRsZXJJZCk7XHJcblxyXG4gICAgICAgIGlmICggIV9oYW5kbGVyc1tuYW1lXSApIHtcclxuICAgICAgICAgICAgX2hhbmRsZXJzW25hbWVdID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfaGFuZGxlcnNbbmFtZV1baGFuZGxlcklkXSA9IHtcclxuICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxyXG4gICAgICAgICAgICBvbmU6IG9uZSxcclxuICAgICAgICAgICAgZmlyZWQ6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX3JlbW92ZUV2ZW50ID0gZnVuY3Rpb24oZWxlbWVudCwgbmFtZSkge1xyXG4gICAgICAgIHZhciBoYW5kbGVySWQgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQobmFtZSk7XHJcblxyXG4gICAgICAgIGlmIChfaGFuZGxlcnNbbmFtZV0gJiYgX2hhbmRsZXJzW25hbWVdW2hhbmRsZXJJZF0pIHtcclxuICAgICAgICAgICAgZGVsZXRlIF9oYW5kbGVyc1tuYW1lXVtoYW5kbGVySWRdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyAqKiBQdWJsaWMgTWV0aG9kcyAgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHJpZ2dlcjogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdGFyZ2V0LCBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdHJpZ2dlckV2ZW50KGVsZW1lbnQsIG5hbWUsIHRhcmdldCwgZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb246IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9hZGRFdmVudChlbGVtZW50LCBuYW1lLCBoYW5kbGVyKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbmU6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9hZGRFdmVudChlbGVtZW50LCBuYW1lLCBoYW5kbGVyLCB0cnVlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvZmY6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9yZW1vdmVFdmVudChlbGVtZW50LCBuYW1lKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBkZWJ1ZzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGIgaW4gX2hhbmRsZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIF9oYW5kbGVycy5oYXNPd25Qcm9wZXJ0eShiKSApIGNvbnNvbGUubG9nKGIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gS1RFdmVudEhhbmRsZXI7XHJcbn1cclxuIl0sIm5hbWVzIjpbIktURXZlbnRIYW5kbGVyIiwiX2hhbmRsZXJzIiwiX3RyaWdnZXJFdmVudCIsImVsZW1lbnQiLCJuYW1lIiwidGFyZ2V0IiwiZSIsIktUVXRpbCIsImRhdGEiLCJoYXMiLCJoYW5kbGVySWQiLCJnZXQiLCJoYW5kbGVyIiwib25lIiwiZmlyZWQiLCJjYWxsYmFjayIsImNhbGwiLCJfYWRkRXZlbnQiLCJnZXRVbmlxdWVJZCIsInNldCIsIl9yZW1vdmVFdmVudCIsInRyaWdnZXIiLCJvbiIsIm9mZiIsImRlYnVnIiwiYiIsImhhc093blByb3BlcnR5IiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/src/js/components/event-handler.js\n");

/***/ }),

/***/ "./resources/src/js/components/feedback.js":
/*!*************************************************!*\
  !*** ./resources/src/js/components/feedback.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTFeedback = function KTFeedback(options) {\n  ////////////////////////////\n  // ** Private Variables  ** //\n  ////////////////////////////\n  var the = this;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n\n  // Default options\n  var defaultOptions = {\n    'width': 100,\n    'placement': 'top-center',\n    'content': '',\n    'type': 'popup'\n  };\n\n  ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    _init();\n  };\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('feedback');\n    the.element;\n    the.shown = false;\n\n    // Event Handlers\n    _handlers();\n\n    // Bind Instance\n    KTUtil.data(the.element).set('feedback', the);\n  };\n  var _handlers = function _handlers() {\n    KTUtil.addEvent(the.element, 'click', function (e) {\n      e.preventDefault();\n      _go();\n    });\n  };\n  var _show = function _show() {\n    if (KTEventHandler.trigger(the.element, 'kt.feedback.show', the) === false) {\n      return;\n    }\n    if (the.options.type === 'popup') {\n      _showPopup();\n    }\n    KTEventHandler.trigger(the.element, 'kt.feedback.shown', the);\n    return the;\n  };\n  var _hide = function _hide() {\n    if (KTEventHandler.trigger(the.element, 'kt.feedback.hide', the) === false) {\n      return;\n    }\n    if (the.options.type === 'popup') {\n      _hidePopup();\n    }\n    the.shown = false;\n    KTEventHandler.trigger(the.element, 'kt.feedback.hidden', the);\n    return the;\n  };\n  var _showPopup = function _showPopup() {\n    the.element = document.createElement(\"DIV\");\n    KTUtil.addClass(the.element, 'feedback feedback-popup');\n    KTUtil.setHTML(the.element, the.options.content);\n    if (the.options.placement == 'top-center') {\n      _setPopupTopCenterPosition();\n    }\n    body.appendChild(the.element);\n    KTUtil.addClass(the.element, 'feedback-shown');\n    the.shown = true;\n  };\n  var _setPopupTopCenterPosition = function _setPopupTopCenterPosition() {\n    var width = KTUtil.getResponsiveValue(the.options.width);\n    var height = KTUtil.css(the.element, 'height');\n    KTUtil.addClass(the.element, 'feedback-top-center');\n    KTUtil.css(the.element, 'width', width);\n    KTUtil.css(the.element, 'left', '50%');\n    KTUtil.css(the.element, 'top', '-' + height);\n  };\n  var _hidePopup = function _hidePopup() {\n    the.element.remove();\n  };\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('feedback');\n  };\n\n  // Construct class\n  _construct();\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Plugin API\n  the.show = function () {\n    return _show();\n  };\n  the.hide = function () {\n    return _hide();\n  };\n  the.isShown = function () {\n    return the.shown;\n  };\n  the.getElement = function () {\n    return the.element;\n  };\n  the.destroy = function () {\n    return _destroy();\n  };\n\n  // Event API\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n};\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTFeedback;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc3JjL2pzL2NvbXBvbmVudHMvZmVlZGJhY2suanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQSxJQUFJQSxVQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FBWUMsT0FBTyxFQUFFO0VBQy9CO0VBQ0E7RUFDQTtFQUNBLElBQUlDLEdBQUcsR0FBRyxJQUFJO0VBQ2QsSUFBSUMsSUFBSSxHQUFHQyxRQUFRLENBQUNDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQzs7RUFFbkQ7RUFDQSxJQUFJQyxjQUFjLEdBQUc7SUFDakIsT0FBTyxFQUFHLEdBQUc7SUFDYixXQUFXLEVBQUcsWUFBWTtJQUMxQixTQUFTLEVBQUcsRUFBRTtJQUNkLE1BQU0sRUFBRTtFQUNaLENBQUM7O0VBRUQ7RUFDQTtFQUNBOztFQUVBLElBQUlDLFVBQVUsR0FBRyxTQUFiQSxVQUFVQSxDQUFBLEVBQWM7SUFDeEJDLEtBQUssRUFBRTtFQUNYLENBQUM7RUFFRCxJQUFJQSxLQUFLLEdBQUcsU0FBUkEsS0FBS0EsQ0FBQSxFQUFjO0lBQ25CO0lBQ0FOLEdBQUcsQ0FBQ0QsT0FBTyxHQUFHUSxNQUFNLENBQUNDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRUosY0FBYyxFQUFFTCxPQUFPLENBQUM7SUFDNURDLEdBQUcsQ0FBQ1MsR0FBRyxHQUFHRixNQUFNLENBQUNHLFdBQVcsQ0FBQyxVQUFVLENBQUM7SUFDeENWLEdBQUcsQ0FBQ1csT0FBTztJQUNYWCxHQUFHLENBQUNZLEtBQUssR0FBRyxLQUFLOztJQUVqQjtJQUNBQyxTQUFTLEVBQUU7O0lBRVg7SUFDQU4sTUFBTSxDQUFDTyxJQUFJLENBQUNkLEdBQUcsQ0FBQ1csT0FBTyxDQUFDLENBQUNJLEdBQUcsQ0FBQyxVQUFVLEVBQUVmLEdBQUcsQ0FBQztFQUNqRCxDQUFDO0VBRUQsSUFBSWEsU0FBUyxHQUFHLFNBQVpBLFNBQVNBLENBQUEsRUFBYztJQUN2Qk4sTUFBTSxDQUFDUyxRQUFRLENBQUNo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TyxFQUFFbUMsSUFBSSxFQUFFQyxPQUFPLENBQUM7RUFDekQsQ0FBQztFQUVEL0MsR0FBRyxDQUFDaUQsR0FBRyxHQUFHLFVBQVNILElBQUksRUFBRTtJQUNyQixPQUFPekIsY0FBYyxDQUFDNEIsR0FBRyxDQUFDakQsR0FBRyxDQUFDVyxPQUFPLEVBQUVtQyxJQUFJLENBQUM7RUFDaEQsQ0FBQztFQUVEOUMsR0FBRyxDQUFDc0IsT0FBTyxHQUFHLFVBQVN3QixJQUFJLEVBQUVJLEtBQUssRUFBRTtJQUNoQyxPQUFPN0IsY0FBYyxDQUFDQyxPQUFPLENBQUN0QixHQUFHLENBQUNXLE9BQU8sRUFBRW1DLElBQUksRUFBRUksS0FBSyxFQUFFbEQsR0FBRyxFQUFFa0QsS0FBSyxDQUFDO0VBQ3ZFLENBQUM7QUFDTCxDQUFDOztBQUVEO0FBQ0EsSUFBSSxLQUE2QixJQUFJLE9BQU9DLE1BQU0sQ0FBQ0MsT0FBTyxLQUFLLFdBQVcsRUFBRTtFQUN4RUQsTUFBTSxDQUFDQyxPQUFPLEdBQUd0RCxVQUFVO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9qcy9jb21wb25lbnRzL2ZlZWRiYWNrLmpzPzE3MDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vLyBDbGFzcyBkZWZpbml0aW9uXHJcbnZhciBLVEZlZWRiYWNrID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gKiogUHJpdmF0ZSBWYXJpYWJsZXMgICoqIC8vXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICB2YXIgdGhlID0gdGhpcztcclxuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJCT0RZXCIpWzBdO1xyXG5cclxuICAgIC8vIERlZmF1bHQgb3B0aW9uc1xyXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgICAgICd3aWR0aCcgOiAxMDAsXHJcbiAgICAgICAgJ3BsYWNlbWVudCcgOiAndG9wLWNlbnRlcicsXHJcbiAgICAgICAgJ2NvbnRlbnQnIDogJycsXHJcbiAgICAgICAgJ3R5cGUnOiAncG9wdXAnXHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFByaXZhdGUgbWV0aG9kcyAgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICB2YXIgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gVmFyaWFibGVzXHJcbiAgICAgICAgdGhlLm9wdGlvbnMgPSBLVFV0aWwuZGVlcEV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoZS51aWQgPSBLVFV0aWwuZ2V0VW5pcXVlSWQoJ2ZlZWRiYWNrJyk7XHJcbiAgICAgICAgdGhlLmVsZW1lbnQ7XHJcbiAgICAgICAgdGhlLnNob3duID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIEV2ZW50IEhhbmRsZXJzXHJcbiAgICAgICAgX2hhbmRsZXJzKCk7XHJcblxyXG4gICAgICAgIC8vIEJpbmQgSW5zdGFuY2VcclxuICAgICAgICBLVFV0aWwuZGF0YSh0aGUuZWxlbWVudCkuc2V0KCdmZWVkYmFjaycsIHRoZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9oYW5kbGVycyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIEtUVXRpbC5hZGRFdmVudCh0aGUuZWxlbWVudCwgJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBfZ28oKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX3Nob3cgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIEtURXZlbnRIYW5kbGVyLnRyaWdnZXIodGhlLmVsZW1lbnQsICdrdC5mZWVkYmFjay5zaG93JywgdGhlKSA9PT0gZmFsc2UgKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggdGhlLm9wdGlvbnMudHlwZSA9PT0gJ3BvcHVwJykge1xyXG4gICAgICAgICAgICBfc2hvd1BvcHVwKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBLVEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoZS5lbGVtZW50LCAna3QuZmVlZGJhY2suc2hvd24nLCB0aGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaGlkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICggS1RFdmVudEhhbmRsZXIudHJpZ2dlcih0aGUuZWxlbWVudCwgJ2t0LmZlZWRiYWNrLmhpZGUnLCB0aGUpID09PSBmYWxzZSApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCB0aGUub3B0aW9ucy50eXBlID09PSAncG9wdXAnKSB7XHJcbiAgICAgICAgICAgIF9oaWRlUG9wdXAoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoZS5zaG93biA9IGZhbHNlO1xyXG5cclxuICAgICAgICBLVEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoZS5lbGVtZW50LCAna3QuZmVlZGJhY2suaGlkZGVuJywgdGhlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoZTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX3Nob3dQb3B1cCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoZS5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKTtcclxuXHJcbiAgICAgICAgS1RVdGlsLmFkZENsYXNzKHRoZS5lbGVtZW50LCAnZmVlZGJhY2sgZmVlZGJhY2stcG9wdXAnKTtcclxuICAgICAgICBLVFV0aWwuc2V0SFRNTCh0aGUuZWxlbWVudCwgdGhlLm9wdGlvbnMuY29udGVudCk7XHJcblxyXG4gICAgICAgIGlmICh0aGUub3B0aW9ucy5wbGFjZW1lbnQgPT0gJ3RvcC1jZW50ZXInKSB7XHJcbiAgICAgICAgICAgIF9zZXRQb3B1cFRvcENlbnRlclBvc2l0aW9uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBib2R5LmFwcGVuZENoaWxkKHRoZS5lbGVtZW50KTtcclxuXHJcbiAgICAgICAgS1RVdGlsLmFkZENsYXNzKHRoZS5lbGVtZW50LCAnZmVlZGJhY2stc2hvd24nKTtcclxuXHJcbiAgICAgICAgdGhlLnNob3duID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX3NldFBvcHVwVG9wQ2VudGVyUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgd2lkdGggPSBLVFV0aWwuZ2V0UmVzcG9uc2l2ZVZhbHVlKHRoZS5vcHRpb25zLndpZHRoKTtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gS1RVdGlsLmNzcyh0aGUuZWxlbWVudCwgJ2hlaWdodCcpO1xyXG5cclxuICAgICAgICBLVFV0aWwuYWRkQ2xhc3ModGhlLmVsZW1lbnQsICdmZWVkYmFjay10b3AtY2VudGVyJyk7XHJcblxyXG4gICAgICAgIEtUVXRpbC5jc3ModGhlLmVsZW1lbnQsICd3aWR0aCcsIHdpZHRoKTtcclxuICAgICAgICBLVFV0aWwuY3NzKHRoZS5lbGVtZW50LCAnbGVmdCcsICc1MCUnKTtcclxuICAgICAgICBLVFV0aWwuY3NzKHRoZS5lbGVtZW50LCAndG9wJywgJy0nICsgaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2hpZGVQb3B1cCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoZS5lbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIEtUVXRpbC5kYXRhKHRoZS5lbGVtZW50KS5yZW1vdmUoJ2ZlZWRiYWNrJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ29uc3RydWN0IGNsYXNzXHJcbiAgICBfY29uc3RydWN0KCk7XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFB1YmxpYyBBUEkgICoqIC8vXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIC8vIFBsdWdpbiBBUElcclxuICAgIHRoZS5zaG93ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zaG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhlLmhpZGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gX2hpZGUoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGUuaXNTaG93biA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGUuc2hvd247XHJcbiAgICB9XHJcblxyXG4gICAgdGhlLmdldEVsZW1lbnQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhlLmVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgdGhlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gX2Rlc3Ryb3koKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFdmVudCBBUElcclxuICAgIHRoZS5vbiA9IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gS1RFdmVudEhhbmRsZXIub24odGhlLmVsZW1lbnQsIG5hbWUsIGhhbmRsZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoZS5vbmUgPSBmdW5jdGlvbihuYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIEtURXZlbnRIYW5kbGVyLm9uZSh0aGUuZWxlbWVudCwgbmFtZSwgaGFuZGxlcik7XHJcbiAgICB9XHJcblxyXG4gICAgdGhlLm9mZiA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gS1RFdmVudEhhbmRsZXIub2ZmKHRoZS5lbGVtZW50LCBuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGUudHJpZ2dlciA9IGZ1bmN0aW9uKG5hbWUsIGV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIEtURXZlbnRIYW5kbGVyLnRyaWdnZXIodGhlLmVsZW1lbnQsIG5hbWUsIGV2ZW50LCB0aGUsIGV2ZW50KTtcclxuICAgIH1cclxufTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBLVEZlZWRiYWNrO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJLVEZlZWRiYWNrIiwib3B0aW9ucyIsInRoZSIsImJvZHkiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZGVmYXVsdE9wdGlvbnMiLCJfY29uc3RydWN0IiwiX2luaXQiLCJLVFV0aWwiLCJkZWVwRXh0ZW5kIiwidWlkIiwiZ2V0VW5pcXVlSWQiLCJlbGVtZW50Iiwic2hvd24iLCJfaGFuZGxlcnMiLCJkYXRhIiwic2V0IiwiYWRkRXZlbnQiLCJlIiwicHJldmVudERlZmF1bHQiLCJfZ28iLCJfc2hvdyIsIktURXZlbnRIYW5kbGVyIiwidHJpZ2dlciIsInR5cGUiLCJfc2hvd1BvcHVwIiwiX2hpZGUiLCJfaGlkZVBvcHVwIiwiY3JlYXRlRWxlbWVudCIsImFkZENsYXNzIiwic2V0SFRNTCIsImNvbnRlbnQiLCJwbGFjZW1lbnQiLCJfc2V0UG9wdXBUb3BDZW50ZXJQb3NpdGlvbiIsImFwcGVuZENoaWxkIiwid2lkdGgiLCJnZXRSZXNwb25zaXZlVmFsdWUiLCJoZWlnaHQiLCJjc3MiLCJyZW1vdmUiLCJfZGVzdHJveSIsInNob3ciLCJoaWRlIiwiaXNTaG93biIsImdldEVsZW1lbnQiLCJkZXN0cm95Iiwib24iLCJuYW1lIiwiaGFuZGxlciIsIm9uZSIsIm9mZiIsImV2ZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/src/js/components/feedback.js\n");

/***/ }),

/***/ "./resources/src/js/components/image-input.js":
/*!****************************************************!*\
  !*** ./resources/src/js/components/image-input.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTImageInput = function KTImageInput(element, options) {\n  ////////////////////////////\n  // ** Private Variables  ** //\n  ////////////////////////////\n  var the = this;\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  }\n\n  // Default Options\n  var defaultOptions = {};\n\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('image-input') === true) {\n      the = KTUtil.data(element).get('image-input');\n    } else {\n      _init();\n    }\n  };\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('image-input');\n\n    // Elements\n    the.element = element;\n    the.inputElement = KTUtil.find(element, 'input[type=\"file\"]');\n    the.wrapperElement = KTUtil.find(element, '.image-input-wrapper');\n    the.cancelElement = KTUtil.find(element, '[data-kt-image-input-action=\"cancel\"]');\n    the.removeElement = KTUtil.find(element, '[data-kt-image-input-action=\"remove\"]');\n    the.hiddenElement = KTUtil.find(element, 'input[type=\"hidden\"]');\n    the.src = KTUtil.css(the.wrapperElement, 'backgroundImage');\n\n    // Set initialized\n    the.element.setAttribute('data-kt-image-input', 'true');\n\n    // Event Handlers\n    _handlers();\n\n    // Bind Instance\n    KTUtil.data(the.element).set('image-input', the);\n  };\n\n  // Init Event Handlers\n  var _handlers = function _handlers() {\n    KTUtil.addEvent(the.inputElement, 'change', _change);\n    KTUtil.addEvent(the.cancelElement, 'click', _cancel);\n    KTUtil.addEvent(the.removeElement, 'click', _remove);\n  };\n\n  // Event Handlers\n  var _change = function _change(e) {\n    e.preventDefault();\n    if (the.inputElement !== null && the.inputElement.files && the.inputElement.files[0]) {\n      // Fire change event\n      if (KTEventHandler.trigger(the.element, 'kt.imageinput.change', the) === false) {\n        return;\n      }\n      var reader = new FileReader();\n      reader.onload = function (e) {\n        KTUtil.css(the.wrapperElement, 'background-image', 'url(' + e.target.result + ')');\n      };\n      reader.readAsDataURL(the.inputElement.files[0]);\n      the.element.classList.add('image-input-changed');\n      the.element.classList.remove('image-input-empty');\n\n      // Fire removed event\n      KTEventHandler.trigger(the.element, 'kt.imageinput.changed', the);\n    }\n  };\n  var _cancel = function _cancel(e) {\n    e.preventDefault();\n\n    // Fire cancel event\n    if (KTEventHandler.trigger(the.element, 'kt.imageinput.cancel', the) === false) {\n      return;\n    }\n    the.element.classList.remove('image-input-changed');\n    the.element.classList.remove('image-input-empty');\n    if (the.src === 'none') {\n      KTUtil.css(the.wrapperElement, 'background-image', '');\n      the.element.classList.add('image-input-empty');\n    } else {\n      KTUtil.css(the.wrapperElement, 'background-image', the.src);\n    }\n    the.inputElement.value = \"\";\n    if (the.hiddenElement !== null) {\n      the.hiddenElement.value = \"0\";\n    }\n\n    // Fire canceled event\n    KTEventHandler.trigger(the.element, 'kt.imageinput.canceled', the);\n  };\n  var _remove = function _remove(e) {\n    e.preventDefault();\n\n    // Fire remove event\n    if (KTEventHandler.trigger(the.element, 'kt.imageinput.remove', the) === false) {\n      return;\n    }\n    the.element.classList.remove('image-input-changed');\n    the.element.classList.add('image-input-empty');\n    KTUtil.css(the.wrapperElement, 'background-image', \"none\");\n    the.inputElement.value = \"\";\n    if (the.hiddenElement !== null) {\n      the.hiddenElement.value = \"1\";\n    }\n\n    // Fire removed event\n    KTEventHandler.trigger(the.element, 'kt.imageinput.removed', the);\n  };\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('image-input');\n  };\n\n  // Construct Class\n  _construct();\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Plugin API\n  the.getInputElement = function () {\n    return the.inputElement;\n  };\n  the.goElement = function () {\n    return the.element;\n  };\n  the.destroy = function () {\n    return _destroy();\n  };\n\n  // Event API\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n};\n\n// Static methods\nKTImageInput.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('image-input')) {\n    return KTUtil.data(element).get('image-input');\n  } else {\n    return null;\n  }\n};\n\n// Create instances\nKTImageInput.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-image-input]';\n  // Initialize Menus\n  var elements = document.querySelectorAll(selector);\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      new KTImageInput(elements[i]);\n    }\n  }\n};\n\n// Global initialization\nKTImageInput.init = function () {\n  KTImageInput.createInstances();\n};\n\n// On document ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTImageInput.init);\n} else {\n  KTImageInput.init();\n}\n\n// Webpack Support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTImageInput;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/components/image-input.js\n");

/***/ }),

/***/ "./resources/src/js/components/menu.js":
/*!*********************************************!*\
  !*** ./resources/src/js/components/menu.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTMenu = function KTMenu(element, options) {\n  ////////////////////////////\n  // ** Private Variables  ** //\n  ////////////////////////////\n  var the = this;\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  }\n\n  // Default Options\n  var defaultOptions = {\n    dropdown: {\n      hoverTimeout: 200,\n      zindex: 105\n    },\n    accordion: {\n      slideSpeed: 250,\n      expand: false\n    }\n  };\n\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('menu') === true) {\n      the = KTUtil.data(element).get('menu');\n    } else {\n      _init();\n    }\n  };\n  var _init = function _init() {\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('menu');\n    the.element = element;\n    the.triggerElement;\n\n    // Set initialized\n    the.element.setAttribute('data-kt-menu', 'true');\n    _setTriggerElement();\n    _update();\n    KTUtil.data(the.element).set('menu', the);\n  };\n  var _destroy = function _destroy() {// todo\n  };\n\n  // Event Handlers\n  // Toggle handler\n  var _click = function _click(element, e) {\n    e.preventDefault();\n    var item = _getItemElement(element);\n    if (_getOptionFromElementAttribute(item, 'trigger') !== 'click') {\n      return;\n    }\n    if (_getOptionFromElementAttribute(item, 'toggle') === false) {\n      _show(item);\n    } else {\n      _toggle(item);\n    }\n  };\n\n  // Link handler\n  var _link = function _link(element, e) {\n    if (KTEventHandler.trigger(the.element, 'kt.menu.link.click', element) === false) {\n      return;\n    }\n\n    // Dismiss all shown dropdowns\n    KTMenu.hideDropdowns();\n    KTEventHandler.trigger(the.element, 'kt.menu.link.clicked', element);\n  };\n\n  // Dismiss handler\n  var _dismiss = function _dismiss(element, e) {\n    var item = _getItemElement(element);\n    var items = _getItemChildElements(item);\n    if (item !== null && _getItemSubType(item) === 'dropdown') {\n      _hide(item); // hide items dropdown\n      // Hide all child elements as well\n\n      if (items.length > 0) {\n        for (var i = 0, len = items.length; i < len; i++) {\n          if (items[i] !== null && _getItemSubType(items[i]) === 'dropdown') {\n            _hide(tems[i]);\n          }\n        }\n      }\n    }\n  };\n\n  // Mouseover handle\n  var _mouseover = function _mouseover(element, e) {\n    var item = _getItemElement(element);\n    if (item === null) {\n      return;\n    }\n    if (_getOptionFromElementAttribute(item, 'trigger') !== 'hover') {\n      return;\n    }\n    if (KTUtil.data(item).get('hover') === '1') {\n      clearTimeout(KTUtil.data(item).get('timeout'));\n      KTUtil.data(item).remove('hover');\n      KTUtil.data(item).remove('timeout');\n    }\n    _show(item);\n  };\n\n  // Mouseout handle\n  var _mouseout = function _mouseout(element, e) {\n    var item = _getItemElement(element);\n    if (item === null) {\n      return;\n    }\n    if (_getOptionFromElementAttribute(item, 'trigger') !== 'hover') {\n      return;\n    }\n    var timeout = setTimeout(function () {\n      if (KTUtil.data(item).get('hover') === '1') {\n        _hide(item);\n      }\n    }, the.options.dropdown.hoverTimeout);\n    KTUtil.data(item).set('hover', '1');\n    KTUtil.data(item).set('timeout', timeout);\n  };\n\n  // Toggle item sub\n  var _toggle = function _toggle(item) {\n    if (!item) {\n      item = the.triggerElement;\n    }\n    if (_isItemSubShown(item) === true) {\n      _hide(item);\n    } else {\n      _show(item);\n    }\n  };\n\n  // Show item sub\n  var _show = function _show(item) {\n    if (!item) {\n      item = the.triggerElement;\n    }\n    if (_isItemSubShown(item) === true) {\n      return;\n    }\n    if (_getItemSubType(item) === 'dropdown') {\n      _showDropdown(item); // // show current dropdown\n    } else if (_getItemSubType(item) === 'accordion') {\n      _showAccordion(item);\n    }\n\n    // Remember last submenu type\n    KTUtil.data(item).set('type', _getItemSubType(item)); // updated\n  };\n\n  // Hide item sub\n  var _hide = function _hide(item) {\n    if (!item) {\n      item = the.triggerElement;\n    }\n    if (_isItemSubShown(item) === false) {\n      return;\n    }\n    if (_getItemSubType(item) === 'dropdown') {\n      _hideDropdown(item);\n    } else if (_getItemSubType(item) === 'accordion') {\n      _hideAccordion(item);\n    }\n  };\n\n  // Reset item state classes if item sub type changed\n  var _reset = function _reset(item) {\n    if (_hasItemSub(item) === false) {\n      return;\n    }\n    var sub = _getItemSubElement(item);\n\n    // Reset sub state if sub type is changed during the window resize\n    if (KTUtil.data(item).has('type') && KTUtil.data(item).get('type') !== _getItemSubType(item)) {\n      // updated\n      KTUtil.removeClass(item, 'hover');\n      KTUtil.removeClass(item, 'show');\n      KTUtil.removeClass(sub, 'show');\n    } // updated\n  };\n\n  // Update all item state classes if item sub type changed\n  var _update = function _update() {\n    var items = the.element.querySelectorAll('.menu-item[data-kt-menu-trigger]');\n    if (items && items.length > 0) {\n      for (var i = 0, len = items.length; i < len; i++) {\n        _reset(items[i]);\n      }\n    }\n  };\n\n  // Set external trigger element\n  var _setTriggerElement = function _setTriggerElement() {\n    var target = document.querySelector('[data-kt-menu-target=\"# ' + the.element.getAttribute('id') + '\"]');\n    if (target !== null) {\n      the.triggerElement = target;\n    } else if (the.element.closest('[data-kt-menu-trigger]')) {\n      the.triggerElement = the.element.closest('[data-kt-menu-trigger]');\n    } else if (the.element.parentNode && KTUtil.child(the.element.parentNode, '[data-kt-menu-trigger]')) {\n      the.triggerElement = KTUtil.child(the.element.parentNode, '[data-kt-menu-trigger]');\n    }\n    if (the.triggerElement) {\n      KTUtil.data(the.triggerElement).set('menu', the);\n    }\n  };\n\n  // Test if menu has external trigger element\n  var _isTriggerElement = function _isTriggerElement(item) {\n    return the.triggerElement === item ? true : false;\n  };\n\n  // Test if item's sub is shown\n  var _isItemSubShown = function _isItemSubShown(item) {\n    var sub = _getItemSubElement(item);\n    if (sub !== null) {\n      if (_getItemSubType(item) === 'dropdown') {\n        if (KTUtil.hasClass(sub, 'show') === true && sub.hasAttribute('data-popper-placement') === true) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return KTUtil.hasClass(item, 'show');\n      }\n    } else {\n      return false;\n    }\n  };\n\n  // Test if item dropdown is permanent\n  var _isItemDropdownPermanent = function _isItemDropdownPermanent(item) {\n    return _getOptionFromElementAttribute(item, 'permanent') === true ? true : false;\n  };\n\n  // Test if item's parent is shown\n  var _isItemParentShown = function _isItemParentShown(item) {\n    return KTUtil.parents(item, '.menu-item.show').length > 0;\n  };\n\n  // Test of it is item sub element\n  var _isItemSubElement = function _isItemSubElement(item) {\n    return KTUtil.hasClass(item, 'menu-sub');\n  };\n\n  // Test if item has sub\n  var _hasItemSub = function _hasItemSub(item) {\n    return KTUtil.hasClass(item, 'menu-item') && item.hasAttribute('data-kt-menu-trigger');\n  };\n\n  // Get link element\n  var _getItemLinkElement = function _getItemLinkElement(item) {\n    return KTUtil.child(item, '.menu-link');\n  };\n\n  // Get toggle element\n  var _getItemToggleElement = function _getItemToggleElement(item) {\n    if (the.triggerElement) {\n      return the.triggerElement;\n    } else {\n      return _getItemLinkElement(item);\n    }\n  };\n\n  // Get item sub element\n  var _getItemSubElement = function _getItemSubElement(item) {\n    if (_isTriggerElement(item) === true) {\n      return the.element;\n    }\n    if (item.classList.contains('menu-sub') === true) {\n      return item;\n    } else if (KTUtil.data(item).has('sub')) {\n      return KTUtil.data(item).get('sub');\n    } else {\n      return KTUtil.child(item, '.menu-sub');\n    }\n  };\n\n  // Get item sub type\n  var _getItemSubType = function _getItemSubType(element) {\n    var sub = _getItemSubElement(element);\n    if (sub && parseInt(KTUtil.css(sub, 'z-index')) > 0) {\n      return \"dropdown\";\n    } else {\n      return \"accordion\";\n    }\n  };\n\n  // Get item element\n  var _getItemElement = function _getItemElement(element) {\n    var item, sub;\n\n    // Element is the external trigger element\n    if (_isTriggerElement(element)) {\n      return element;\n    }\n\n    // Element has item toggler attribute\n    if (element.hasAttribute('data-kt-menu-trigger')) {\n      return element;\n    }\n\n    // Element has item DOM reference in it's data storage\n    if (KTUtil.data(element).has('item')) {\n      return KTUtil.data(element).get('item');\n    }\n\n    // Item is parent of element\n    if (item = element.closest('.menu-item[data-kt-menu-trigger]')) {\n      return item;\n    }\n\n    // Element's parent has item DOM reference in it's data storage\n    if (sub = element.closest('.menu-sub')) {\n      if (KTUtil.data(sub).has('item') === true) {\n        return KTUtil.data(sub).get('item');\n      }\n    }\n  };\n\n  // Get item parent element\n  var _getItemParentElement = function _getItemParentElement(item) {\n    var sub = item.closest('.menu-sub');\n    var parentItem;\n    if (KTUtil.data(sub).has('item')) {\n      return KTUtil.data(sub).get('item');\n    }\n    if (sub && (parentItem = sub.closest('.menu-item[data-kt-menu-trigger]'))) {\n      return parentItem;\n    }\n    return null;\n  };\n\n  // Get item parent elements\n  var _getItemParentElements = function _getItemParentElements(item) {\n    var parents = [];\n    var parent;\n    var i = 0;\n    do {\n      parent = _getItemParentElement(item);\n      if (parent) {\n        parents.push(parent);\n        item = parent;\n      }\n      i++;\n    } while (parent !== null && i < 20);\n    if (the.triggerElement) {\n      parents.unshift(the.triggerElement);\n    }\n    return parents;\n  };\n\n  // Get item child element\n  var _getItemChildElement = function _getItemChildElement(item) {\n    var selector = item;\n    var element;\n    if (KTUtil.data(item).get('sub')) {\n      selector = KTUtil.data(item).get('sub');\n    }\n    if (selector !== null) {\n      //element = selector.querySelector('.show.menu-item[data-kt-menu-trigger]');\n      element = selector.querySelector('.menu-item[data-kt-menu-trigger]');\n      if (element) {\n        return element;\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  };\n\n  // Get item child elements\n  var _getItemChildElements = function _getItemChildElements(item) {\n    var children = [];\n    var child;\n    var i = 0;\n    do {\n      child = _getItemChildElement(item);\n      if (child) {\n        children.push(child);\n        item = child;\n      }\n      i++;\n    } while (child !== null && i < 20);\n    return children;\n  };\n\n  // Show item dropdown\n  var _showDropdown = function _showDropdown(item) {\n    // Handle dropdown show event\n    if (KTEventHandler.trigger(the.element, 'kt.menu.dropdown.show', item) === false) {\n      return;\n    }\n\n    // Hide all currently shown dropdowns except current one\n    KTMenu.hideDropdowns(item);\n    var toggle = _isTriggerElement(item) ? item : _getItemLinkElement(item);\n    var sub = _getItemSubElement(item);\n    var width = _getOptionFromElementAttribute(item, 'width');\n    var height = _getOptionFromElementAttribute(item, 'height');\n    var zindex = the.options.dropdown.zindex; // update\n    var parentZindex = KTUtil.getHighestZindex(item); // update\n\n    // Apply a new z-index if dropdown's toggle element or it's parent has greater z-index // update\n    if (parentZindex !== null && parentZindex >= zindex) {\n      zindex = parentZindex + 1;\n    }\n    if (zindex > 0) {\n      KTUtil.css(sub, 'z-index', zindex);\n    }\n    if (width !== null) {\n      KTUtil.css(sub, 'width', width);\n    }\n    if (height !== null) {\n      KTUtil.css(sub, 'height', height);\n    }\n    KTUtil.css(sub, 'display', '');\n    KTUtil.css(sub, 'overflow', '');\n\n    // Init popper(new)\n    _initDropdownPopper(item, sub);\n    KTUtil.addClass(item, 'show');\n    KTUtil.addClass(item, 'menu-dropdown');\n    KTUtil.addClass(sub, 'show');\n\n    // Append the sub the the root of the menu\n    if (_getOptionFromElementAttribute(item, 'overflow') === true) {\n      document.body.appendChild(sub);\n      KTUtil.data(item).set('sub', sub);\n      KTUtil.data(sub).set('item', item);\n      KTUtil.data(sub).set('menu', the);\n    } else {\n      KTUtil.data(sub).set('item', item);\n    }\n\n    // Handle dropdown shown event\n    KTEventHandler.trigger(the.element, 'kt.menu.dropdown.shown', item);\n  };\n\n  // Hide item dropdown\n  var _hideDropdown = function _hideDropdown(item) {\n    // Handle dropdown hide event\n    if (KTEventHandler.trigger(the.element, 'kt.menu.dropdown.hide', item) === false) {\n      return;\n    }\n    var sub = _getItemSubElement(item);\n    KTUtil.css(sub, 'z-index', '');\n    KTUtil.css(sub, 'width', '');\n    KTUtil.css(sub, 'height', '');\n    KTUtil.removeClass(item, 'show');\n    KTUtil.removeClass(item, 'menu-dropdown');\n    KTUtil.removeClass(sub, 'show');\n\n    // Append the sub back to it's parent\n    if (_getOptionFromElementAttribute(item, 'overflow') === true) {\n      if (item.classList.contains('menu-item')) {\n        item.appendChild(sub);\n      } else {\n        KTUtil.insertAfter(the.element, item);\n      }\n      KTUtil.data(item).remove('sub');\n      KTUtil.data(sub).remove('item');\n      KTUtil.data(sub).remove('menu');\n    }\n\n    // Destroy popper(new)\n    _destroyDropdownPopper(item);\n\n    // Handle dropdown hidden event \n    KTEventHandler.trigger(the.element, 'kt.menu.dropdown.hidden', item);\n  };\n\n  // Init dropdown popper(new)\n  var _initDropdownPopper = function _initDropdownPopper(item, sub) {\n    // Setup popper instance\n    var reference;\n    var attach = _getOptionFromElementAttribute(item, 'attach');\n    if (attach) {\n      if (attach === 'parent') {\n        reference = item.parentNode;\n      } else {\n        reference = document.querySelector(attach);\n      }\n    } else {\n      reference = item;\n    }\n    var popper = Popper.createPopper(reference, sub, _getDropdownPopperConfig(item));\n    KTUtil.data(item).set('popper', popper);\n  };\n\n  // Destroy dropdown popper(new)\n  var _destroyDropdownPopper = function _destroyDropdownPopper(item) {\n    if (KTUtil.data(item).has('popper') === true) {\n      KTUtil.data(item).get('popper').destroy();\n      KTUtil.data(item).remove('popper');\n    }\n  };\n\n  // Prepare popper config for dropdown(see: https://popper.js.org/docs/v2/)\n  var _getDropdownPopperConfig = function _getDropdownPopperConfig(item) {\n    // Placement\n    var placement = _getOptionFromElementAttribute(item, 'placement');\n    if (!placement) {\n      placement = 'right';\n    }\n\n    // Offset\n    var offsetValue = _getOptionFromElementAttribute(item, 'offset');\n    var offset = offsetValue ? offsetValue.split(\",\") : [];\n    if (offset.length === 2) {\n      offset[0] = parseInt(offset[0]);\n      offset[1] = parseInt(offset[1]);\n    }\n\n    // Strategy\n    var strategy = _getOptionFromElementAttribute(item, 'overflow') === true ? 'absolute' : 'fixed';\n    var altAxis = _getOptionFromElementAttribute(item, 'flip') !== false ? true : false;\n    var popperConfig = {\n      placement: placement,\n      strategy: strategy,\n      modifiers: [{\n        name: 'offset',\n        options: {\n          offset: offset\n        }\n      }, {\n        name: 'preventOverflow',\n        options: {\n          altAxis: altAxis\n        }\n      }, {\n        name: 'flip',\n        options: {\n          flipVariations: false\n        }\n      }]\n    };\n    return popperConfig;\n  };\n\n  // Show item accordion\n  var _showAccordion = function _showAccordion(item) {\n    if (KTEventHandler.trigger(the.element, 'kt.menu.accordion.show', item) === false) {\n      return;\n    }\n    var sub = _getItemSubElement(item);\n    var expand = the.options.accordion.expand;\n    if (_getOptionFromElementAttribute(item, 'expand') === true) {\n      expand = true;\n    } else if (_getOptionFromElementAttribute(item, 'expand') === false) {\n      expand = false;\n    } else if (_getOptionFromElementAttribute(the.element, 'expand') === true) {\n      expand = true;\n    }\n    if (expand === false) {\n      _hideAccordions(item);\n    }\n    if (KTUtil.data(item).has('popper') === true) {\n      _hideDropdown(item);\n    }\n    KTUtil.addClass(item, 'hover');\n    KTUtil.addClass(item, 'showing');\n    KTUtil.slideDown(sub, the.options.accordion.slideSpeed, function () {\n      KTUtil.removeClass(item, 'showing');\n      KTUtil.addClass(item, 'show');\n      KTUtil.addClass(sub, 'show');\n      KTEventHandler.trigger(the.element, 'kt.menu.accordion.shown', item);\n    });\n  };\n\n  // Hide item accordion\n  var _hideAccordion = function _hideAccordion(item) {\n    if (KTEventHandler.trigger(the.element, 'kt.menu.accordion.hide', item) === false) {\n      return;\n    }\n    var sub = _getItemSubElement(item);\n    KTUtil.addClass(item, 'hiding');\n    KTUtil.slideUp(sub, the.options.accordion.slideSpeed, function () {\n      KTUtil.removeClass(item, 'hiding');\n      KTUtil.removeClass(item, 'show');\n      KTUtil.removeClass(sub, 'show');\n      KTUtil.removeClass(item, 'hover'); // update\n\n      KTEventHandler.trigger(the.element, 'kt.menu.accordion.hidden', item);\n    });\n  };\n\n  // Hide all shown accordions of item\n  var _hideAccordions = function _hideAccordions(item) {\n    var itemsToHide = KTUtil.findAll(the.element, '.show[data-kt-menu-trigger]');\n    var itemToHide;\n    if (itemsToHide && itemsToHide.length > 0) {\n      for (var i = 0, len = itemsToHide.length; i < len; i++) {\n        itemToHide = itemsToHide[i];\n        if (_getItemSubType(itemToHide) === 'accordion' && itemToHide !== item && item.contains(itemToHide) === false && itemToHide.contains(item) === false) {\n          _hideAccordion(itemToHide);\n        }\n      }\n    }\n  };\n\n  // Get item option(through html attributes)\n  var _getOptionFromElementAttribute = function _getOptionFromElementAttribute(item, name) {\n    var attr;\n    var value = null;\n    if (item && item.hasAttribute('data-kt-menu-' + name)) {\n      attr = item.getAttribute('data-kt-menu-' + name);\n      value = KTUtil.getResponsiveValue(attr);\n      if (value !== null && String(value) === 'true') {\n        value = true;\n      } else if (value !== null && String(value) === 'false') {\n        value = false;\n      }\n    }\n    return value;\n  };\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('menu');\n  };\n\n  // Construct Class\n  _construct();\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Event Handlers\n  the.click = function (element, e) {\n    return _click(element, e);\n  };\n  the.link = function (element, e) {\n    return _link(element, e);\n  };\n  the.dismiss = function (element, e) {\n    return _dismiss(element, e);\n  };\n  the.mouseover = function (element, e) {\n    return _mouseover(element, e);\n  };\n  the.mouseout = function (element, e) {\n    return _mouseout(element, e);\n  };\n\n  // General Methods\n  the.getItemTriggerType = function (item) {\n    return _getOptionFromElementAttribute(item, 'trigger');\n  };\n  the.getItemSubType = function (element) {\n    return _getItemSubType(element);\n  };\n  the.show = function (item) {\n    return _show(item);\n  };\n  the.hide = function (item) {\n    return _hide(item);\n  };\n  the.reset = function (item) {\n    return _reset(item);\n  };\n  the.update = function () {\n    return _update();\n  };\n  the.getElement = function () {\n    return the.element;\n  };\n  the.getItemLinkElement = function (item) {\n    return _getItemLinkElement(item);\n  };\n  the.getItemToggleElement = function (item) {\n    return _getItemToggleElement(item);\n  };\n  the.getItemSubElement = function (item) {\n    return _getItemSubElement(item);\n  };\n  the.getItemParentElements = function (item) {\n    return _getItemParentElements(item);\n  };\n  the.isItemSubShown = function (item) {\n    return _isItemSubShown(item);\n  };\n  the.isItemParentShown = function (item) {\n    return _isItemParentShown(item);\n  };\n  the.getTriggerElement = function () {\n    return the.triggerElement;\n  };\n  the.isItemDropdownPermanent = function (item) {\n    return _isItemDropdownPermanent(item);\n  };\n  the.destroy = function () {\n    return _destroy();\n  };\n\n  // Accordion Mode Methods\n  the.hideAccordions = function (item) {\n    return _hideAccordions(item);\n  };\n\n  // Event API\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n};\n\n// Get KTMenu instance by element\nKTMenu.getInstance = function (element) {\n  var menu;\n  var item;\n\n  // Element has menu DOM reference in it's DATA storage\n  if (KTUtil.data(element).has('menu')) {\n    return KTUtil.data(element).get('menu');\n  }\n\n  // Element has .menu parent \n  if (menu = element.closest('.menu')) {\n    if (KTUtil.data(menu).has('menu')) {\n      return KTUtil.data(menu).get('menu');\n    }\n  }\n\n  // Element has a parent with DOM reference to .menu in it's DATA storage\n  if (KTUtil.hasClass(element, 'menu-link')) {\n    var sub = element.closest('.menu-sub');\n    if (KTUtil.data(sub).has('menu')) {\n      return KTUtil.data(sub).get('menu');\n    }\n  }\n  return null;\n};\n\n// Hide all dropdowns and skip one if provided\nKTMenu.hideDropdowns = function (skip) {\n  var items = document.querySelectorAll('.show.menu-dropdown[data-kt-menu-trigger]');\n  if (items && items.length > 0) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      var item = items[i];\n      var menu = KTMenu.getInstance(item);\n      if (menu && menu.getItemSubType(item) === 'dropdown') {\n        if (skip) {\n          if (menu.getItemSubElement(item).contains(skip) === false && item.contains(skip) === false && item !== skip) {\n            menu.hide(item);\n          }\n        } else {\n          menu.hide(item);\n        }\n      }\n    }\n  }\n};\n\n// Update all dropdowns popover instances\nKTMenu.updateDropdowns = function () {\n  var items = document.querySelectorAll('.show.menu-dropdown[data-kt-menu-trigger]');\n  if (items && items.length > 0) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      var item = items[i];\n      if (KTUtil.data(item).has('popper')) {\n        KTUtil.data(item).get('popper').forceUpdate();\n      }\n    }\n  }\n};\n\n// Global handlers\nKTMenu.initGlobalHandlers = function () {\n  // Dropdown handler\n  document.addEventListener(\"click\", function (e) {\n    var items = document.querySelectorAll('.show.menu-dropdown[data-kt-menu-trigger]');\n    var menu;\n    var item;\n    var sub;\n    var menuObj;\n    if (items && items.length > 0) {\n      for (var i = 0, len = items.length; i < len; i++) {\n        item = items[i];\n        menuObj = KTMenu.getInstance(item);\n        if (menuObj && menuObj.getItemSubType(item) === 'dropdown') {\n          menu = menuObj.getElement();\n          sub = menuObj.getItemSubElement(item);\n          if (item === e.target || item.contains(e.target)) {\n            continue;\n          }\n          if (sub === e.target || sub.contains(e.target)) {\n            continue;\n          }\n          menuObj.hide(item);\n        }\n      }\n    }\n  });\n\n  // Sub toggle handler(updated)\n  KTUtil.on(document.body, '.menu-item[data-kt-menu-trigger] > .menu-link, [data-kt-menu-trigger]:not(.menu-item):not([data-kt-menu-trigger=\"auto\"])', 'click', function (e) {\n    var menu = KTMenu.getInstance(this);\n    if (menu !== null) {\n      return menu.click(this, e);\n    }\n  });\n\n  // Link handler\n  KTUtil.on(document.body, '.menu-item:not([data-kt-menu-trigger]) > .menu-link', 'click', function (e) {\n    var menu = KTMenu.getInstance(this);\n    if (menu !== null) {\n      return menu.link(this, e);\n    }\n  });\n\n  // Dismiss handler\n  KTUtil.on(document.body, '[data-kt-menu-dismiss=\"true\"]', 'click', function (e) {\n    var menu = KTMenu.getInstance(this);\n    if (menu !== null) {\n      return menu.dismiss(this, e);\n    }\n  });\n\n  // Mouseover handler\n  KTUtil.on(document.body, '[data-kt-menu-trigger], .menu-sub', 'mouseover', function (e) {\n    var menu = KTMenu.getInstance(this);\n    if (menu !== null && menu.getItemSubType(this) === 'dropdown') {\n      return menu.mouseover(this, e);\n    }\n  });\n\n  // Mouseout handler\n  KTUtil.on(document.body, '[data-kt-menu-trigger], .menu-sub', 'mouseout', function (e) {\n    var menu = KTMenu.getInstance(this);\n    if (menu !== null && menu.getItemSubType(this) === 'dropdown') {\n      return menu.mouseout(this, e);\n    }\n  });\n\n  // Resize handler\n  window.addEventListener('resize', function () {\n    var menu;\n    var timer;\n    KTUtil.throttle(timer, function () {\n      // Locate and update Offcanvas instances on window resize\n      var elements = document.querySelectorAll('[data-kt-menu=\"true\"]');\n      if (elements && elements.length > 0) {\n        for (var i = 0, len = elements.length; i < len; i++) {\n          menu = KTMenu.getInstance(elements[i]);\n          if (menu) {\n            menu.update();\n          }\n        }\n      }\n    }, 200);\n  });\n};\n\n// Global instances\nKTMenu.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-menu=\"true\"]';\n  // Initialize menus\n  var elements = document.querySelectorAll(selector);\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      new KTMenu(elements[i]);\n    }\n  }\n};\n\n// Global initialization\nKTMenu.init = function () {\n  // Global Event Handlers\n  KTMenu.initGlobalHandlers();\n\n  // Lazy Initialization\n  KTMenu.createInstances();\n};\n\n// On document ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTMenu.init);\n} else {\n  KTMenu.init();\n}\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTMenu;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/components/menu.js\n");

/***/ }),

/***/ "./resources/src/js/components/password-meter.js":
/*!*******************************************************!*\
  !*** ./resources/src/js/components/password-meter.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTPasswordMeter = function KTPasswordMeter(element, options) {\n  ////////////////////////////\n  // ** Private variables  ** //\n  ////////////////////////////\n  var the = this;\n  if (!element) {\n    return;\n  }\n\n  // Default Options\n  var defaultOptions = {\n    minLength: 8,\n    checkUppercase: true,\n    checkLowercase: true,\n    checkDigit: true,\n    checkChar: true,\n    scoreHighlightClass: 'active'\n  };\n\n  ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n\n  // Constructor\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('password-meter') === true) {\n      the = KTUtil.data(element).get('password-meter');\n    } else {\n      _init();\n    }\n  };\n\n  // Initialize\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.score = 0;\n    the.checkSteps = 5;\n\n    // Elements\n    the.element = element;\n    the.inputElement = the.element.querySelector('input[type]');\n    the.visibilityElement = the.element.querySelector('[data-kt-password-meter-control=\"visibility\"]');\n    the.highlightElement = the.element.querySelector('[data-kt-password-meter-control=\"highlight\"]');\n\n    // Set initialized\n    the.element.setAttribute('data-kt-password-meter', 'true');\n\n    // Event Handlers\n    _handlers();\n\n    // Bind Instance\n    KTUtil.data(the.element).set('password-meter', the);\n  };\n\n  // Handlers\n  var _handlers = function _handlers() {\n    the.inputElement.addEventListener('input', function () {\n      _check();\n    });\n    if (the.visibilityElement) {\n      the.visibilityElement.addEventListener('click', function () {\n        _visibility();\n      });\n    }\n  };\n\n  // Event handlers\n  var _check = function _check() {\n    var score = 0;\n    var checkScore = _getCheckScore();\n    if (_checkLength() === true) {\n      score = score + checkScore;\n    }\n    if (the.options.checkUppercase === true && _checkLowercase() === true) {\n      score = score + checkScore;\n    }\n    if (the.options.checkLowercase === true && _checkUppercase() === true) {\n      score = score + checkScore;\n    }\n    if (the.options.checkDigit === true && _checkDigit() === true) {\n      score = score + checkScore;\n    }\n    if (the.options.checkChar === true && _checkChar() === true) {\n      score = score + checkScore;\n    }\n    the.score = score;\n    _highlight();\n  };\n  var _checkLength = function _checkLength() {\n    return the.inputElement.value.length >= the.options.minLength; // 20 score\n  };\n\n  var _checkLowercase = function _checkLowercase() {\n    return /[a-z]/.test(the.inputElement.value); // 20 score\n  };\n\n  var _checkUppercase = function _checkUppercase() {\n    return /[A-Z]/.test(the.inputElement.value); // 20 score\n  };\n\n  var _checkDigit = function _checkDigit() {\n    return /[0-9]/.test(the.inputElement.value); // 20 score\n  };\n\n  var _checkChar = function _checkChar() {\n    return /[~`!#@$%\\^&*+=\\-\\[\\]\\\\';,/{}|\\\\\":<>\\?]/g.test(the.inputElement.value); // 20 score\n  };\n\n  var _getCheckScore = function _getCheckScore() {\n    var count = 1;\n    if (the.options.checkUppercase === true) {\n      count++;\n    }\n    if (the.options.checkLowercase === true) {\n      count++;\n    }\n    if (the.options.checkDigit === true) {\n      count++;\n    }\n    if (the.options.checkChar === true) {\n      count++;\n    }\n    the.checkSteps = count;\n    return 100 / the.checkSteps;\n  };\n  var _highlight = function _highlight() {\n    var items = [].slice.call(the.highlightElement.querySelectorAll('div'));\n    var total = items.length;\n    var index = 0;\n    var checkScore = _getCheckScore();\n    var score = _getScore();\n    items.map(function (item) {\n      index++;\n      if (checkScore * index * (the.checkSteps / total) <= score) {\n        item.classList.add('active');\n      } else {\n        item.classList.remove('active');\n      }\n    });\n  };\n  var _visibility = function _visibility() {\n    var visibleIcon = the.visibilityElement.querySelector('i:not(.d-none), .svg-icon:not(.d-none)');\n    var hiddenIcon = the.visibilityElement.querySelector('i.d-none, .svg-icon.d-none');\n    if (the.inputElement.getAttribute('type').toLowerCase() === 'password') {\n      the.inputElement.setAttribute('type', 'text');\n    } else {\n      the.inputElement.setAttribute('type', 'password');\n    }\n    visibleIcon.classList.add('d-none');\n    hiddenIcon.classList.remove('d-none');\n    the.inputElement.focus();\n  };\n  var _reset = function _reset() {\n    the.score = 0;\n    _highlight();\n  };\n\n  // Gets current password score\n  var _getScore = function _getScore() {\n    return the.score;\n  };\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('password-meter');\n  };\n\n  // Construct class\n  _construct();\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Plugin API\n  the.check = function () {\n    return _check();\n  };\n  the.getScore = function () {\n    return _getScore();\n  };\n  the.reset = function () {\n    return _reset();\n  };\n  the.destroy = function () {\n    return _destroy();\n  };\n};\n\n// Static methods\nKTPasswordMeter.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('password-meter')) {\n    return KTUtil.data(element).get('password-meter');\n  } else {\n    return null;\n  }\n};\n\n// Create instances\nKTPasswordMeter.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-password-meter]';\n  // Get instances\n  var elements = document.body.querySelectorAll(selector);\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      // Initialize instances\n      new KTPasswordMeter(elements[i]);\n    }\n  }\n};\n\n// Global initialization\nKTPasswordMeter.init = function () {\n  KTPasswordMeter.createInstances();\n};\n\n// On document ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTPasswordMeter.init);\n} else {\n  KTPasswordMeter.init();\n}\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTPasswordMeter;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/components/password-meter.js\n");

/***/ }),

/***/ "./resources/src/js/components/scroll.js":
/*!***********************************************!*\
  !*** ./resources/src/js/components/scroll.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nvar KTScroll = function KTScroll(element, options) {\n  ////////////////////////////\n  // ** Private Variables  ** //\n  ////////////////////////////\n  var the = this;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n  if (!element) {\n    return;\n  }\n\n  // Default options\n  var defaultOptions = {\n    saveState: true\n  };\n\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('scroll')) {\n      the = KTUtil.data(element).get('scroll');\n    } else {\n      _init();\n    }\n  };\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n\n    // Elements\n    the.element = element;\n    the.id = the.element.getAttribute('id');\n\n    // Set initialized\n    the.element.setAttribute('data-kt-scroll', 'true');\n\n    // Update\n    _update();\n\n    // Bind Instance\n    KTUtil.data(the.element).set('scroll', the);\n  };\n  var _setupHeight = function _setupHeight() {\n    var heightType = _getHeightType();\n    var height = _getHeight();\n\n    // Set height\n    if (height !== null && height.length > 0) {\n      KTUtil.css(the.element, heightType, height);\n    } else {\n      KTUtil.css(the.element, heightType, '');\n    }\n  };\n  var _setupState = function _setupState() {\n    if (_getOption('save-state') === true && typeof KTCookie !== 'undefined' && the.id) {\n      if (KTCookie.get(the.id + 'st')) {\n        var pos = parseInt(KTCookie.get(the.id + 'st'));\n        if (pos > 0) {\n          the.element.scrollTop = pos;\n        }\n      }\n    }\n  };\n  var _setupScrollHandler = function _setupScrollHandler() {\n    if (_getOption('save-state') === true && typeof KTCookie !== 'undefined' && the.id) {\n      the.element.addEventListener('scroll', _scrollHandler);\n    } else {\n      the.element.removeEventListener('scroll', _scrollHandler);\n    }\n  };\n  var _destroyScrollHandler = function _destroyScrollHandler() {\n    the.element.removeEventListener('scroll', _scrollHandler);\n  };\n  var _resetHeight = function _resetHeight() {\n    KTUtil.css(the.element, _getHeightType(), '');\n  };\n  var _scrollHandler = function _scrollHandler() {\n    KTCookie.set(the.id + 'st', the.element.scrollTop);\n  };\n  var _update = function _update() {\n    // Activate/deactivate\n    if (_getOption('activate') === true || the.element.hasAttribute('data-kt-scroll-activate') === false) {\n      _setupHeight();\n      _setupStretchHeight();\n      _setupScrollHandler();\n      _setupState();\n    } else {\n      _resetHeight();\n      _destroyScrollHandler();\n    }\n  };\n  var _setupStretchHeight = function _setupStretchHeight() {\n    var stretch = _getOption('stretch');\n\n    // Stretch\n    if (stretch !== null) {\n      var elements = document.querySelectorAll(stretch);\n      if (elements && elements.length == 2) {\n        var element1 = elements[0];\n        var element2 = elements[1];\n        var diff = _getElementHeight(element2) - _getElementHeight(element1);\n        if (diff > 0) {\n          var height = parseInt(KTUtil.css(the.element, _getHeightType())) + diff;\n          KTUtil.css(the.element, _getHeightType(), String(height) + 'px');\n        }\n      }\n    }\n  };\n  var _getHeight = function _getHeight() {\n    var height = _getOption(_getHeightType());\n    if (height instanceof Function) {\n      return height.call();\n    } else if (height !== null && typeof height === 'string' && height.toLowerCase() === 'auto') {\n      return _getAutoHeight();\n    } else {\n      return height;\n    }\n  };\n  var _getAutoHeight = function _getAutoHeight() {\n    var height = KTUtil.getViewPort().height;\n    var dependencies = _getOption('dependencies');\n    var wrappers = _getOption('wrappers');\n    var offset = _getOption('offset');\n\n    // Spacings\n    height = height - _getElementSpacing(the.element);\n\n    // Height dependencies\n    if (dependencies !== null) {\n      var elements = document.querySelectorAll(dependencies);\n      if (elements && elements.length > 0) {\n        for (var i = 0, len = elements.length; i < len; i++) {\n          if (KTUtil.visible(elements[i]) === false) {\n            continue;\n          }\n          height = height - _getElementHeight(elements[i]);\n        }\n      }\n    }\n\n    // Wrappers\n    if (wrappers !== null) {\n      var elements = document.querySelectorAll(wrappers);\n      if (elements && elements.length > 0) {\n        for (var i = 0, len = elements.length; i < len; i++) {\n          if (KTUtil.visible(elements[i]) === false) {\n            continue;\n          }\n          height = height - _getElementSpacing(elements[i]);\n        }\n      }\n    }\n\n    // Custom offset\n    if (offset !== null && _typeof(offset) !== 'object') {\n      height = height - parseInt(offset);\n    }\n    return String(height) + 'px';\n  };\n  var _getElementHeight = function _getElementHeight(element) {\n    var height = 0;\n    if (element !== null) {\n      height = height + parseInt(KTUtil.css(element, 'height'));\n      height = height + parseInt(KTUtil.css(element, 'margin-top'));\n      height = height + parseInt(KTUtil.css(element, 'margin-bottom'));\n      if (KTUtil.css(element, 'border-top')) {\n        height = height + parseInt(KTUtil.css(element, 'border-top'));\n      }\n      if (KTUtil.css(element, 'border-bottom')) {\n        height = height + parseInt(KTUtil.css(element, 'border-bottom'));\n      }\n    }\n    return height;\n  };\n  var _getElementSpacing = function _getElementSpacing(element) {\n    var spacing = 0;\n    if (element !== null) {\n      spacing = spacing + parseInt(KTUtil.css(element, 'margin-top'));\n      spacing = spacing + parseInt(KTUtil.css(element, 'margin-bottom'));\n      spacing = spacing + parseInt(KTUtil.css(element, 'padding-top'));\n      spacing = spacing + parseInt(KTUtil.css(element, 'padding-bottom'));\n      if (KTUtil.css(element, 'border-top')) {\n        spacing = spacing + parseInt(KTUtil.css(element, 'border-top'));\n      }\n      if (KTUtil.css(element, 'border-bottom')) {\n        spacing = spacing + parseInt(KTUtil.css(element, 'border-bottom'));\n      }\n    }\n    return spacing;\n  };\n  var _getOption = function _getOption(name) {\n    if (the.element.hasAttribute('data-kt-scroll-' + name) === true) {\n      var attr = the.element.getAttribute('data-kt-scroll-' + name);\n      var value = KTUtil.getResponsiveValue(attr);\n      if (value !== null && String(value) === 'true') {\n        value = true;\n      } else if (value !== null && String(value) === 'false') {\n        value = false;\n      }\n      return value;\n    } else {\n      var optionName = KTUtil.snakeToCamel(name);\n      if (the.options[optionName]) {\n        return KTUtil.getResponsiveValue(the.options[optionName]);\n      } else {\n        return null;\n      }\n    }\n  };\n  var _getHeightType = function _getHeightType() {\n    if (_getOption('height')) {\n      return 'height';\n    }\n    if (_getOption('min-height')) {\n      return 'min-height';\n    }\n    if (_getOption('max-height')) {\n      return 'max-height';\n    }\n  };\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('scroll');\n  };\n\n  // Construct Class\n  _construct();\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  the.update = function () {\n    return _update();\n  };\n  the.getHeight = function () {\n    return _getHeight();\n  };\n  the.getElement = function () {\n    return the.element;\n  };\n  the.destroy = function () {\n    return _destroy();\n  };\n};\n\n// Static methods\nKTScroll.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('scroll')) {\n    return KTUtil.data(element).get('scroll');\n  } else {\n    return null;\n  }\n};\n\n// Create instances\nKTScroll.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-scroll=\"true\"]';\n  var body = document.getElementsByTagName(\"BODY\")[0];\n\n  // Initialize Menus\n  var elements = body.querySelectorAll(selector);\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      new KTScroll(elements[i]);\n    }\n  }\n};\n\n// Window resize handling\nwindow.addEventListener('resize', function () {\n  var timer;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n  KTUtil.throttle(timer, function () {\n    // Locate and update Offcanvas instances on window resize\n    var elements = body.querySelectorAll('[data-kt-scroll=\"true\"]');\n    if (elements && elements.length > 0) {\n      for (var i = 0, len = elements.length; i < len; i++) {\n        var scroll = KTScroll.getInstance(elements[i]);\n        if (scroll) {\n          scroll.update();\n        }\n      }\n    }\n  }, 200);\n});\n\n// Global initialization\nKTScroll.init = function () {\n  KTScroll.createInstances();\n};\n\n// On document ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTScroll.init);\n} else {\n  KTScroll.init();\n}\n\n// Webpack Support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTScroll;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc3JjL2pzL2NvbXBvbmVudHMvc2Nyb2xsLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQUEsU0FBQUEsUUFBQUMsR0FBQSxzQ0FBQUQsT0FBQSx3QkFBQUUsTUFBQSx1QkFBQUEsTUFBQSxDQUFBQyxRQUFBLGFBQUFGLEdBQUEsa0JBQUFBLEdBQUEsZ0JBQUFBLEdBQUEsV0FBQUEsR0FBQSx5QkFBQUMsTUFBQSxJQUFBRCxHQUFBLENBQUFHLFdBQUEsS0FBQUYsTUFBQSxJQUFBRCxHQUFBLEtBQUFDLE1BQUEsQ0FBQUcsU0FBQSxxQkFBQUosR0FBQSxLQUFBRCxPQUFBLENBQUFDLEdBQUE7QUFDQSxJQUFJSyxRQUFRLEdBQUcsU0FBWEEsUUFBUUEsQ0FBWUMsT0FBTyxFQUFFQyxPQUFPLEVBQUU7RUFDdEM7RUFDQTtFQUNBO0VBQ0EsSUFBSUMsR0FBRyxHQUFHLElBQUk7RUFDZCxJQUFJQyxJQUFJLEdBQUdDLFFBQVEsQ0FBQ0Msb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBRW5ELElBQUksQ0FBQ0wsT0FBTyxFQUFFO0lBQ1Y7RUFDSjs7RUFFQTtFQUNBLElBQUlNLGNBQWMsR0FBRztJQUNqQkMsU0FBUyxFQUFFO0VBQ2YsQ0FBQzs7RUFFRDtFQUNBO0VBQ0E7O0VBRUEsSUFBSUMsVUFBVSxHQUFHLFNBQWJBLFVBQVVBLENBQUEsRUFBYztJQUN4QixJQUFLQyxNQUFNLENBQUNDLElBQUksQ0FBQ1YsT0FBTyxDQUFDLENBQUNXLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRztNQUN0Q1QsR0FBRyxHQUFHTyxNQUFNLENBQUNDLElBQUksQ0FBQ1YsT0FBTyxDQUFDLENBQUNZLEdBQUcsQ0FBQyxRQUFRLENBQUM7SUFDNUMsQ0FBQyxNQUFNO01BQ0hDLEtBQUssRUFBRTtJQUNYO0VBQ0osQ0FBQztFQUVELElBQUlBLEtBQUssR0FBRyxTQUFSQSxLQUFLQSxDQUFBLEVBQWM7SUFDbkI7SUFDQVgsR0FBRyxDQUFDRCxPQUFPLEdBQUdRLE1BQU0sQ0FBQ0ssVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFUixjQUFjLEVBQUVMLE9BQU8sQ0FBQzs7SUFFNUQ7SUFDQUMsR0FBRyxDQUFDRixPQUFPLEdBQUdBLE9BQU87SUFDckJFLEdBQUcsQ0FBQ2EsRUFBRSxHQUFHYixHQUFHLENBQUNGLE9BQU8sQ0FBQ2dCLFlBQVksQ0FBQyxJQUFJLENBQUM7O0lBRXZDO0lBQ0FkLEdBQUcsQ0FBQ0YsT0FBTyxDQUFDaUIsWUFBWSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQzs7SUFFbEQ7SUFDQUMsT0FBTyxFQUFFOztJQUVUO0lBQ0FULE1BQU0sQ0FBQ0MsSUFBSSxDQUFDUixHQUFHLENBQUNGLE9BQU8sQ0FBQyxDQUFDbUIsR0FBRyxDQUFDLFFBQVEsRUFBRWpCLEdBQUcsQ0FBQztFQUMvQyxDQUFDO0VBRUQsSUFBSWtCLFlBQVksR0FBRyxTQUFmQSxZQUFZQSxDQUFBLEVBQWM7SUFDMUIsSUFBSUMsVUFBVSxHQUFHQyxjQUFjLEVBQUU7SUFDakMsSUFBSUMsTUFBTSxHQUFHQyxVQUFVLEVBQUU7O0lBRXpCO0lBQ0EsSUFBS0QsTUFBTSxLQUFLLElBQUksSUFBSUEsTUFBTSxDQUFDRSxNQUFNLEdBQUcsQ0FBQyxFQUFHO01BQ3hDaEIsTUFBTSxDQUFDaUIsR0FBRyxDQUFDeEIsR0FBRyxDQUFDRixPQUFPLEVBQUVxQixVQUFVLEVBQUVFLE1BQU0sQ0FBQztJQUMvQyxDQUFDLE1BQU07TUFDSGQsTUFBTSxDQUFDaUIsR0FBRyxDQUFDeEIsR0FBRyxDQUFDRixPQUFPLEVBQUVxQixVQUFVLEVBQUUsRUFBRSxDQUFDO0lBQzNDO0VBQ0osQ0FBQztFQUVELElBQUlNLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFBLEVBQWU7SUFDMUIsSUFBS0MsVUFBVSxDQUFDLFlBQVksQ0FBQyxLQUFLLElBQUksSUFBSSxPQUFPQyxRQUFRLEtBQUssV0FBVyxJQUFJM0IsR0FBRyxDQUFDYSxFQUFFLEVBQUc7TUFDbEYsSUFBS2MsUUFBUSxDQUFDakIsR0FBRyxDQUFDVixHQUFHLENBQUNhLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRztRQUMvQixJQUFJZSxHQUFHLEdBQUdDLFFBQVEsQ0FBQ0YsUUFBUSxDQUFDakIsR0FBRyxDQUFDVixHQUFHLENBQUNhLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUUvQyxJQUFLZSxHQUFHLEdBQUcsQ0FBQyxFQUFHO1VBQ1g1QixHQUFHLENBQUNGLE9BQU8sQ0FBQ2dDLFNBQVMsR0FBR0YsR0FBRztRQUMvQjtNQUNKO0lBQ0o7RUFDSixDQUFDO0VBRUQsSUFBSUcsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFtQkEsQ0FBQSxFQUFjO0lBQ2pDLElBQUtMLFVBQVUsQ0FBQyxZQUFZLENBQUMsS0FBSyxJQUFJLElBQUksT0FBT0MsUUFBUSxLQUFLLFdBQVcsSUFBSTNCLEdBQUcsQ0FBQ2EsRUFBRSxFQUFHO01BQ2xGYixHQUFHLENBQUNGLE9BQU8sQ0FBQ2tDLGdCQUFnQixDQUFDLFFBQVEsRUFBRUMsY0FBYyxDQUFDO0lBQzFELENBQUMsTUFBTTtNQUNIakMsR0FBRyxDQUFDRixPQUFPLENBQUNvQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUVELGNBQWMsQ0FBQztJQUM3RDtFQUNKLENBQUM7RUFFRCxJQUFJRSxxQkFBcUIsR0FBRyxTQUF4QkEscUJBQXFCQSxDQUFBLEVBQWM7SUFDbkNuQyxHQUFHLENBQUNGLE9BQU8sQ0FBQ29DLG1CQUFtQixDQUFDLFFBQVEsRUFBRUQsY0FBYyxDQUFDO0VBQzdELENBQUM7RUFFRCxJQUFJRyxZQUFZLEdBQUcsU0FBZkEsWUFBWUEsQ0FBQSxFQUFjO0lBQzFCN0IsTUFBTSxDQUFDaUIsR0FBRyxDQUFDeEIsR0FBRyxDQUFDRixPQUFPLEVBQUVzQixjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUM7RUFDakQsQ0FBQztFQUVELElBQUlhLGNBQWMsR0FBRyxTQUFqQkEsY0FBY0EsQ0FBQSxFQUFlO0lBQzdCTixRQUFRLENBQUNWLEdBQUcsQ0FBQ2pCLEdBQUcsQ0FBQ2EsRUFBRSxHQUFHLElBQUksRUFBRWIsR0FBRyxDQUFDRixPQUFPLENBQUNnQyxTQUFTLENBQUM7RUFDdEQsQ0FBQztFQUVELElBQUlkLE9BQU8sR0FBRyxTQUFWQSxPQUFPQSxDQUFBLEVBQWM7SUFDckI7SUFDQSxJQUFLVSxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxJQUFJMUIsR0FBRyxDQUFDRixPQUFPLENBQUN1QyxZQUFZLENBQUMseUJBQXlCLENBQUMsS0FBSyxLQUFLLEVBQUc7TUFDcEduQixZQUFZLEVBQUU7TUFDZG9CLG1CQUFtQixFQUFFO01BQ3JCUCxtQkFBbUIsRUFBRTtNQUNyQk4sV0FBVyxFQUFFO0lBQ2pCLENBQUMsTUFBTTtNQUNIVyxZQUFZLEVBQUU7TUFDZEQscUJBQXFCLEVBQUU7SUFDM0I7RUFDSixDQUFDO0VBRUQsSUFBSUcsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFtQkEsQ0FBQSxFQUFjO0lBQ2pDLElBQUlDLE9BQU8sR0FBR2IsVUFBVSxDQUFDLFNBQVMsQ0FBQzs7SUFFbkM7SUFDQSxJQUFLYSxPQUFPLEtBQUssSUFBSSxFQUFHO01BQ3BCLElBQUlDLFFBQVEsR0FBR3RDLFFBQVEsQ0FBQ3VDLGdCQUFnQixDQUFDRixPQUFPLENBQUM7TUFFakQsSUFBS0MsUUFBUSxJQUFJQSxRQUFRLENBQUNqQixNQUFNLElBQUksQ0FBQyxFQUFHO1FBQ3BDLElBQUltQixRQUFRLEdBQUdGLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDMUIsSUFBSUcsUUFBUSxHQUFHSCxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzFCLElBQUlJLElBQUksR0FBR0MsaUJBQWlCLENBQUNGLFFBQVEsQ0FBQyxHQUFHRSxpQkFBaUIsQ0FBQ0gsUUFBUSxDQUFDO1FBRXBFLElBQUlFLElBQUksR0FBRyxDQUFDLEVBQUU7VUFDVixJQUFJdkIsTUFBTSxHQUFHUSxRQUFRLENBQUN0QixNQUFNLENBQUNpQixHQUFHLENBQUN4QixHQUFHLENBQUNGLE9BQU8sRUFBRXNCLGNBQWMsRUFBRSxDQUFDLENBQUMsR0FBR3dCLElBQUk7VUFFdkVyQyxNQUFNLENBQUNpQixHQUFHLENBQUN4QixHQUFHLENBQUNGLE9BQU8sRUFBRXNCLGNBQWMsRUFBRSxFQUFFMEIsTUFBTSxDQUFDekIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3BFO01BQ0o7SUFDSjtFQUNKLENBQUM7RUFFRCxJQUFJQyxVQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FBQSxFQUFjO0lBQ3hCLElBQUlELE1BQU0sR0FBR0ssVUFBVSxDQUFDTixjQUFjLEVBQUUsQ0FBQztJQUV6QyxJQUFLQyxNQUFNLFlBQVkwQixRQUFRLEVBQUc7TUFDOUIsT0FBTzFCLE1BQU0sQ0FBQzJCLElBQUksRUFBRTtJQUN4QixDQUFDLE1BQU0sSUFBSzNCLE1BQU0sS0FBSyxJQUFJLElBQUksT0FBT0EsTUFBTSxLQUFLLFFBQVEsSUFBSUEsTUFBTSxDQUFDNEIsV0FBVyxFQUFFLEtBQUssTUFBTSxFQUFHO01BQzNGLE9BQU9DLGNBQWMsRUFBRTtJQUMzQixDQUFDLE1BQU07TUFDSCxPQUFPN0IsTUFBTTtJQUNqQjtFQUNKLENBQUM7RUFFRCxJQUFJNkIsY0FBYyxHQUFHLFNBQWpCQSxjQUFjQSxDQUFBLEVBQWM7SUFDNUIsSUFBSTdCLE1BQU0sR0FBR2QsTUFBTSxDQUFDNEMsV0FBVyxFQUFFLENBQUM5QixNQUFNO0lBQ3hDLElBQUkrQixZQUFZLEdBQUcxQixVQUFVLENBQUMsY0FBYyxDQUFDO0lBQzdDLElBQUkyQixRQUFRLEdBQUczQixVQUFVLENBQUMsVUFBVSxDQUFDO0lBQ3JDLElBQUk0QixNQUFNLEdBQUc1QixVQUFVLENBQUMsUUFBUSxDQUFDOztJQUVqQztJQUNBTCxNQUFNLEdBQUdBLE1BQU0sR0FBR2tDLGtCQUFrQixDQUFDdkQsR0FBRyxDQUFDRixPQUFPLENBQUM7O0lBRWpEO0lBQ0EsSUFBS3NELFlBQVksS0FBSyxJQUFJLEVBQUc7TUFDekIsSUFBSVosUUFBUSxHQUFHdEMsUUFBUSxDQUFDdUMsZ0JBQWdCLENBQUNXLFlBQVksQ0FBQztNQUV0RCxJQUFLWixRQUFRLElBQUlBLFFBQVEsQ0FBQ2pCLE1BQU0sR0FBRyxDQUFDLEVBQUc7UUFDbkMsS0FBTSxJQUFJaUMsQ0FBQyxHQUFHLENBQUMsRUFBRUMsR0FBRyxHQUFHakIsUUFBUSxDQUFDakIsTUFBTSxFQUFFaUMsQ0FBQyxHQUFHQyxHQUFHLEVBQUVELENBQUMsRUFBRSxFQUFHO1VBQ25ELElBQUtqRCxNQUFNLENBQUNtRCxPQUFPLENBQUNsQixRQUFRLENBQUNnQixDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssRUFBRztZQUN6QztVQUNKO1VBRUFuQyxNQUFNLEdBQUdBLE1BQU0sR0FBR3dCLGlCQUFpQixDQUFDTCxRQUFRLENBQUNnQixDQUFDLENBQUMsQ0FBQztRQUNwRDtNQUNKO0lBQ0o7O0lBRUE7SUFDQSxJQUFLSCxRQUFRLEtBQUssSUFBSSxFQUFHO01BQ3JCLElBQUliLFFBQVEsR0FBR3RDLFFBQVEsQ0FBQ3VDLGdCQUFnQixDQUFDWSxRQUFRLENBQUM7TUFDbEQsSUFBS2IsUUFBUSxJQUFJQSxRQUFRLENBQUNqQixNQUFNLEdBQUcsQ0FBQyxFQUFHO1FBQ25DLEtBQU0sSUFBSWlDLENBQUMsR0FBRyxDQUFDLEVBQUVDLEdBQUcsR0FBR2pCLFFBQVEsQ0FBQ2pCLE1BQU0sRUFBRWlDLENBQUMsR0FBR0MsR0FBRyxFQUFFRCxDQUFDLEVBQUUsRUFBRztVQUNuRCxJQUFLakQsTUFBTSxDQUFDbUQsT0FBTyxDQUFDbEIsUUFBUSxDQUFDZ0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUc7WUFDekM7VUFDSjtVQUVBbkMsTUFBTSxHQUFHQSxNQUFNLEdBQUdrQyxrQkFBa0IsQ0FBQ2YsUUFBUSxDQUFDZ0IsQ0FBQyxDQUFDLENBQUM7UUFDckQ7TUFDSjtJQUNKOztJQUVBO0lBQ0EsSUFBS0YsTUFBTSxLQUFLLElBQUksSUFBSS9ELE9BQUEsQ0FBTytELE1BQU0sTUFBSyxRQUFRLEVBQUU7TUFDaERqQyxNQUFNLEdBQUdBLE1BQU0sR0FBR1EsUUFBUSxDQUFDeUIsTUFBTSxDQUFDO0lBQ3RDO0lBRUEsT0FBT1IsTUFBTSxDQUFDekIsTUFBTSxDQUFDLEdBQUcsSUFBSTtFQUNoQyxDQUFDO0VBRUQsSUFBSXdCLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBaUJBLENBQVkvQyxPQUFPLEVBQUU7SUFDdEMsSUFBSXVCLE1BQU0sR0FBRyxDQUFDO0lBRWQsSUFBSXZCLE9BQU8sS0FBSyxJQUFJLEVBQUU7TUFDbEJ1QixNQUFNLEdBQUdBLE1BQU0sR0FBR1EsUUFBUSxDQUFDdEIsTUFBTSxDQUFDaUIsR0FBRyxDQUFDMUIsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO01BQ3pEdUIsTUFBTSxHQUFHQSxNQUFNLEdBQUdRLFFBQVEsQ0FBQ3RCLE1BQU0sQ0FBQ2lCLEdBQUcsQ0FBQzFCLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztNQUM3RHVCLE1BQU0sR0FBR0EsTUFBTSxHQUFHUSxRQUFRLENBQUN0QixNQUFNLENBQUNpQixHQUFHLENBQUMxQixPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7TUFFaEUsSUFBSVMsTUFBTSxDQUFDaUIsR0FBRyxDQUFDMUIsT0FBTyxFQUFFLFlBQVksQ0FBQyxFQUFFO1FBQ25DdUIsTUFBTSxHQUFHQSxNQUFNLEdBQUdRLFFBQVEsQ0FBQ3RCLE1BQU0sQ0FBQ2lCLEdBQUcsQ0FBQzFCLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztNQUNqRTtNQUVBLElBQUlTLE1BQU0sQ0FBQ2lCLEdBQUcsQ0FBQzFCLE9BQU8sRUFBRSxlQUFlLENBQUMsRUFBRTtRQUN0Q3VCLE1BQU0sR0FBR0EsTUFBTSxHQUFHUSxRQUFRLENBQUN0QixNQUFNLENBQUNpQixHQUFHLENBQUMxQixPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7TUFDcEU7SUFDSjtJQUVBLE9BQU91QixNQUFNO0VBQ2pCLENBQUM7RUFFRCxJQUFJa0Msa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFrQkEsQ0FBWXpELE9BQU8sRUFBRTtJQUN2QyxJQUFJNkQsT0FBTyxHQUFHLENBQUM7SUFFZixJQUFJN0QsT0FBTyxLQUFLLElBQUksRUFBRTtNQUNsQjZELE9BQU8sR0FBR0EsT0FBTyxHQUFHOUIsUUFBUSxDQUFDdEIsTUFBTSxDQUFDaUIsR0FBRyxDQUFDMUIsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO01BQy9ENkQsT0FBTyxHQUFHQSxPQUFPLEdBQUc5QixRQUFRLENBQUN0QixNQUFNLENBQUNpQixHQUFHLENBQUMxQixPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7TUFDbEU2RCxPQUFPLEdBQUdBLE9BQU8sR0FBRzlCLFFBQVEsQ0FBQ3RCLE1BQU0sQ0FBQ2lCLEdBQUcsQ0FBQzFCLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztNQUNoRTZELE9BQU8sR0FBR0EsT0FBTyxHQUFHOUIsUUFBUSxDQUFDdEIsTUFBTSxDQUFDaUIsR0FBRyxDQUFDMUIsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUM7TUFFbkUsSUFBSVMsTUFBTSxDQUFDaUIsR0FBRyxDQUFDMUIsT0FBTyxFQUFFLFlBQVksQ0FBQyxFQUFFO1FBQ25DNkQsT0FBTyxHQUFHQSxPQUFPLEdBQUc5QixRQUFRLENBQUN0QixNQUFNLENBQUNpQixHQUFHLENBQUMxQixPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7TUFDbkU7TUFFQSxJQUFJUyxNQUFNLENBQUNpQixHQUFHLENBQUMxQixPQUFPLEVBQUUsZUFBZSxDQUFDLEVBQUU7UUFDdEM2RCxPQUFPLEdBQUdBLE9BQU8sR0FBRzlCLFFBQVEsQ0FBQ3RCLE1BQU0sQ0FBQ2lCLEdBQUcsQ0FBQzFCLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztNQUN0RTtJQUNKO0lBRUEsT0FBTzZELE9BQU87RUFDbEIsQ0FBQztFQUVELElBQUlqQyxVQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FBWWtDLElBQUksRUFBRTtJQUM1QixJQUFLNUQsR0FBRyxDQUFDRixPQUFPLENBQUN1QyxZQUFZLENBQUMsaUJBQWlCLEdBQUd1QixJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUc7TUFDL0QsSUFBSUMsSUFBSSxHQUFHN0QsR0FBRyxDQUFDRixPQUFPLENBQUNnQixZQUFZLENBQUMsaUJBQWlCLEdBQUc4QyxJQUFJLENBQUM7TUFFN0QsSUFBSUUsS0FBSyxHQUFHdkQsTUFBTSxDQUFDd0Qsa0JBQWtCLENBQUNGLElBQUksQ0FBQztNQUUzQyxJQUFLQyxLQUFLLEtBQUssSUFBSSxJQUFJaEIsTUFBTSxDQUFDZ0IsS0FBSyxDQUFDLEtBQUssTUFBTSxFQUFHO1FBQzlDQSxLQUFLLEdBQUcsSUFBSTtNQUNoQixDQUFDLE1BQU0sSUFBS0EsS0FBSyxLQUFLLElBQUksSUFBSWhCLE1BQU0sQ0FBQ2dCLEtBQUssQ0FBQyxLQUFLLE9BQU8sRUFBRztRQUN0REEsS0FBSyxHQUFHLEtBQUs7TUFDakI7TUFFQSxPQUFPQSxLQUFLO0lBQ2hCLENBQUMsTUFBTTtNQUNILElBQUlFLFVBQVUsR0FBR3pELE1BQU0sQ0FBQzBELFlBQVksQ0FBQ0wsSUFBSSxDQUFDO01BRTFDLElBQUs1RCxHQUFHLENBQUNELE9BQU8sQ0FBQ2lFLFVBQVUsQ0FBQyxFQUFHO1FBQzNCLE9BQU96RCxNQUFNLENBQUN3RCxrQkFBa0IsQ0FBQy9ELEdBQUcsQ0FBQ0QsT0FBTyxDQUFDaUUsVUFBVSxDQUFDLENBQUM7TUFDN0QsQ0FBQyxNQUFNO1FBQ0gsT0FBTyxJQUFJO01BQ2Y7SUFDSjtFQUNKLENBQUM7RUFFRCxJQUFJNUMsY0FBYyxHQUFHLFNBQWpCQSxjQUFjQSxDQUFBLEVBQWM7SUFDNUIsSUFBSU0sVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO01BQ3RCLE9BQU8sUUFBUTtJQUNuQjtJQUFFLElBQUlBLFVBQVUsQ0FBQyxZQUFZLENBQUMsRUFBRTtNQUM1QixPQUFPLFlBQVk7SUFDdkI7SUFBRSxJQUFJQSxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQUU7TUFDNUIsT0FBTyxZQUFZO0lBQ3ZCO0VBQ0osQ0FBQztFQUVELElBQUl3QyxRQUFRLEdBQUcsU0FBWEEsUUFBUUEsQ0FBQSxFQUFjO0lBQ3RCM0QsTUFBTSxDQUFDQyxJQUFJLENBQUNSLEdBQUcsQ0FBQ0YsT0FBTyxDQUFDLENBQUNxRSxNQUFNLENBQUMsUUFBUSxDQUFDO0VBQzdDLENBQUM7O0VBRUQ7RUFDQTdELFVBQVUsRUFBRTs7RUFFWjtFQUNBO0VBQ0E7O0VBRUFOLEdBQUcsQ0FBQ29FLE1BQU0sR0FBRyxZQUFXO0lBQ3BCLE9BQU9wRCxPQUFPLEVBQUU7RUFDcEIsQ0FBQztFQUVEaEIsR0FBRyxDQUFDcUUsU0FBUyxHQUFHLFlBQVc7SUFDdkIsT0FBTy9DLFVBQVUsRUFBRTtFQUN2QixDQUFDO0VBRUR0QixHQUFHLENBQUNzRSxVQUFVLEdBQUcsWUFBVztJQUN4QixPQUFPdEUsR0FBRyxDQUFDRixPQUFPO0VBQ3RCLENBQUM7RUFFREUsR0FBRyxDQUFDdUUsT0FBTyxHQUFHLFlBQVc7SUFDckIsT0FBT0wsUUFBUSxFQUFFO0VBQ3JCLENBQUM7QUFDTCxDQUFDOztBQUVEO0FBQ0FyRSxRQUFRLENBQUMyRSxXQUFXLEdBQUcsVUFBUzFFLE9BQU8sRUFBRTtFQUNyQyxJQUFLQSxPQUFPLEtBQUssSUFBSSxJQUFJUyxNQUFNLENBQUNDLElBQUksQ0FBQ1YsT0FBTyxDQUFDLENBQUNXLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRztJQUMxRCxPQUFPRixNQUFNLENBQUNDLElBQUksQ0FBQ1YsT0FBTyxDQUFDLENBQUNZLEdBQUcsQ0FBQyxRQUFRLENBQUM7RUFDN0MsQ0FBQyxNQUFNO0lBQ0gsT0FBTyxJQUFJO0VBQ2Y7QUFDSixDQUFDOztBQUVEO0FBQ0FiLFFBQVEsQ0FBQzRFLGVBQWUsR0FBRyxZQUErQztFQUFBLElBQXRDQyxRQUFRLEdBQUFDLFNBQUEsQ0FBQXBELE1BQUEsUUFBQW9ELFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcseUJBQXlCO0VBQ3BFLElBQUkxRSxJQUFJLEdBQUdDLFFBQVEsQ0FBQ0Msb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDOztFQUVuRDtFQUNBLElBQUlxQyxRQUFRLEdBQUd2QyxJQUFJLENBQUN3QyxnQkFBZ0IsQ0FBQ2lDLFFBQVEsQ0FBQztFQUU5QyxJQUFLbEMsUUFBUSxJQUFJQSxRQUFRLENBQUNqQixNQUFNLEdBQUcsQ0FBQyxFQUFHO0lBQ25DLEtBQUssSUFBSWlDLENBQUMsR0FBRyxDQUFDLEVBQUVDLEdBQUcsR0FBR2pCLFFBQVEsQ0FBQ2pCLE1BQU0sRUFBRWlDLENBQUMsR0FBR0MsR0FBRyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtNQUNqRCxJQUFJM0QsUUFBUSxDQUFDMkMsUUFBUSxDQUFDZ0IsQ0FBQyxDQUFDLENBQUM7SUFDN0I7RUFDSjtBQUNKLENBQUM7O0FBRUQ7QUFDQXFCLE1BQU0sQ0FBQzdDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxZQUFXO0VBQ3pDLElBQUk4QyxLQUFLO0VBQ1QsSUFBSTdFLElBQUksR0FBR0MsUUFBUSxDQUFDQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFFbkRJLE1BQU0sQ0FBQ3dFLFFBQVEsQ0FBQ0QsS0FBSyxFQUFFLFlBQVc7SUFDOUI7SUFDQSxJQUFJdEMsUUFBUSxHQUFHdkMsSUFBSSxDQUFDd0MsZ0JBQWdCLENBQUMseUJBQXlCLENBQUM7SUFFL0QsSUFBS0QsUUFBUSxJQUFJQSxRQUFRLENBQUNqQixNQUFNLEdBQUcsQ0FBQyxFQUFHO01BQ25DLEtBQUssSUFBSWlDLENBQUMsR0FBRyxDQUFDLEVBQUVDLEdBQUcsR0FBR2pCLFFBQVEsQ0FBQ2pCLE1BQU0sRUFBRWlDLENBQUMsR0FBR0MsR0FBRyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtRQUNqRCxJQUFJd0IsTUFBTSxHQUFHbkYsUUFBUSxDQUFDMkUsV0FBVyxDQUFDaEMsUUFBUSxDQUFDZ0IsQ0FBQyxDQUFDLENBQUM7UUFDOUMsSUFBSXdCLE1BQU0sRUFBRTtVQUNSQSxNQUFNLENBQUNaLE1BQU0sRUFBRTtRQUNuQjtNQUNKO0lBQ0o7RUFDSixDQUFDLEVBQUUsR0FBRyxDQUFDO0FBQ1gsQ0FBQyxDQUFDOztBQUVGO0FBQ0F2RSxRQUFRLENBQUNvRixJQUFJLEdBQUcsWUFBVztFQUN2QnBGLFFBQVEsQ0FBQzRFLGVBQWUsRUFBRTtBQUM5QixDQUFDOztBQUVEO0FBQ0EsSUFBSXZFLFFBQVEsQ0FBQ2dGLFVBQVUsS0FBSyxTQUFTLEVBQUU7RUFDcENoRixRQUFRLENBQUM4QixnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRW5DLFFBQVEsQ0FBQ29GLElBQUksQ0FBQztBQUMvRCxDQUFDLE1BQU07RUFDSHBGLFFBQVEsQ0FBQ29GLElBQUksRUFBRTtBQUNuQjs7QUFFQTtBQUNBLElBQUksS0FBNkIsSUFBSSxPQUFPRSxNQUFNLENBQUNDLE9BQU8sS0FBSyxXQUFXLEVBQUU7RUFDeEVELE1BQU0sQ0FBQ0MsT0FBTyxHQUFHdkYsUUFBUTtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvanMvY29tcG9uZW50cy9zY3JvbGwuanM/Y2VjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIENsYXNzIGRlZmluaXRpb25cclxudmFyIEtUU2Nyb2xsID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gKiogUHJpdmF0ZSBWYXJpYWJsZXMgICoqIC8vXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICB2YXIgdGhlID0gdGhpcztcclxuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJCT0RZXCIpWzBdO1xyXG5cclxuICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEZWZhdWx0IG9wdGlvbnNcclxuICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgICAgICBzYXZlU3RhdGU6IHRydWVcclxuICAgIH07XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gKiogUHJpdmF0ZSBNZXRob2RzICAqKiAvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIHZhciBfY29uc3RydWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCBLVFV0aWwuZGF0YShlbGVtZW50KS5oYXMoJ3Njcm9sbCcpICkge1xyXG4gICAgICAgICAgICB0aGUgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ3Njcm9sbCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIFZhcmlhYmxlc1xyXG4gICAgICAgIHRoZS5vcHRpb25zID0gS1RVdGlsLmRlZXBFeHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgLy8gRWxlbWVudHNcclxuICAgICAgICB0aGUuZWxlbWVudCA9IGVsZW1lbnQ7ICAgICAgICBcclxuICAgICAgICB0aGUuaWQgPSB0aGUuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lkJyk7XHJcblxyXG4gICAgICAgIC8vIFNldCBpbml0aWFsaXplZFxyXG4gICAgICAgIHRoZS5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1rdC1zY3JvbGwnLCAndHJ1ZScpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGVcclxuICAgICAgICBfdXBkYXRlKCk7XHJcblxyXG4gICAgICAgIC8vIEJpbmQgSW5zdGFuY2VcclxuICAgICAgICBLVFV0aWwuZGF0YSh0aGUuZWxlbWVudCkuc2V0KCdzY3JvbGwnLCB0aGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfc2V0dXBIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVpZ2h0VHlwZSA9IF9nZXRIZWlnaHRUeXBlKCk7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IF9nZXRIZWlnaHQoKTtcclxuXHJcbiAgICAgICAgLy8gU2V0IGhlaWdodFxyXG4gICAgICAgIGlmICggaGVpZ2h0ICE9PSBudWxsICYmIGhlaWdodC5sZW5ndGggPiAwICkge1xyXG4gICAgICAgICAgICBLVFV0aWwuY3NzKHRoZS5lbGVtZW50LCBoZWlnaHRUeXBlLCBoZWlnaHQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIEtUVXRpbC5jc3ModGhlLmVsZW1lbnQsIGhlaWdodFR5cGUsICcnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9zZXR1cFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICggX2dldE9wdGlvbignc2F2ZS1zdGF0ZScpID09PSB0cnVlICYmIHR5cGVvZiBLVENvb2tpZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhlLmlkICkge1xyXG4gICAgICAgICAgICBpZiAoIEtUQ29va2llLmdldCh0aGUuaWQgKyAnc3QnKSApIHtcclxuICAgICAgICAgICAgICAgIHZhciBwb3MgPSBwYXJzZUludChLVENvb2tpZS5nZXQodGhlLmlkICsgJ3N0JykpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggcG9zID4gMCApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGUuZWxlbWVudC5zY3JvbGxUb3AgPSBwb3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9zZXR1cFNjcm9sbEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIF9nZXRPcHRpb24oJ3NhdmUtc3RhdGUnKSA9PT0gdHJ1ZSAmJiB0eXBlb2YgS1RDb29raWUgIT09ICd1bmRlZmluZWQnICYmIHRoZS5pZCApIHtcclxuICAgICAgICAgICAgdGhlLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgX3Njcm9sbEhhbmRsZXIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoZS5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIF9zY3JvbGxIYW5kbGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9kZXN0cm95U2Nyb2xsSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoZS5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIF9zY3JvbGxIYW5kbGVyKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX3Jlc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgS1RVdGlsLmNzcyh0aGUuZWxlbWVudCwgX2dldEhlaWdodFR5cGUoKSwgJycpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfc2Nyb2xsSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBLVENvb2tpZS5zZXQodGhlLmlkICsgJ3N0JywgdGhlLmVsZW1lbnQuc2Nyb2xsVG9wKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX3VwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIEFjdGl2YXRlL2RlYWN0aXZhdGVcclxuICAgICAgICBpZiAoIF9nZXRPcHRpb24oJ2FjdGl2YXRlJykgPT09IHRydWUgfHwgdGhlLmVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLWt0LXNjcm9sbC1hY3RpdmF0ZScpID09PSBmYWxzZSApIHtcclxuICAgICAgICAgICAgX3NldHVwSGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIF9zZXR1cFN0cmV0Y2hIZWlnaHQoKTtcclxuICAgICAgICAgICAgX3NldHVwU2Nyb2xsSGFuZGxlcigpO1xyXG4gICAgICAgICAgICBfc2V0dXBTdGF0ZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF9yZXNldEhlaWdodCgpXHJcbiAgICAgICAgICAgIF9kZXN0cm95U2Nyb2xsSGFuZGxlcigpO1xyXG4gICAgICAgIH0gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHZhciBfc2V0dXBTdHJldGNoSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHN0cmV0Y2ggPSBfZ2V0T3B0aW9uKCdzdHJldGNoJyk7XHJcblxyXG4gICAgICAgIC8vIFN0cmV0Y2hcclxuICAgICAgICBpZiAoIHN0cmV0Y2ggIT09IG51bGwgKSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc3RyZXRjaCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGVsZW1lbnRzICYmIGVsZW1lbnRzLmxlbmd0aCA9PSAyICkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQxID0gZWxlbWVudHNbMF07XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudDIgPSBlbGVtZW50c1sxXTtcclxuICAgICAgICAgICAgICAgIHZhciBkaWZmID0gX2dldEVsZW1lbnRIZWlnaHQoZWxlbWVudDIpIC0gX2dldEVsZW1lbnRIZWlnaHQoZWxlbWVudDEpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkaWZmID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKHRoZS5lbGVtZW50LCBfZ2V0SGVpZ2h0VHlwZSgpKSkgKyBkaWZmO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKHRoZS5lbGVtZW50LCBfZ2V0SGVpZ2h0VHlwZSgpLCBTdHJpbmcoaGVpZ2h0KSArICdweCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBfZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IF9nZXRPcHRpb24oX2dldEhlaWdodFR5cGUoKSk7XHJcblxyXG4gICAgICAgIGlmICggaGVpZ2h0IGluc3RhbmNlb2YgRnVuY3Rpb24gKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBoZWlnaHQuY2FsbCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIGhlaWdodCAhPT0gbnVsbCAmJiB0eXBlb2YgaGVpZ2h0ID09PSAnc3RyaW5nJyAmJiBoZWlnaHQudG9Mb3dlckNhc2UoKSA9PT0gJ2F1dG8nICkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2dldEF1dG9IZWlnaHQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2dldEF1dG9IZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gS1RVdGlsLmdldFZpZXdQb3J0KCkuaGVpZ2h0O1xyXG4gICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSBfZ2V0T3B0aW9uKCdkZXBlbmRlbmNpZXMnKTtcclxuICAgICAgICB2YXIgd3JhcHBlcnMgPSBfZ2V0T3B0aW9uKCd3cmFwcGVycycpO1xyXG4gICAgICAgIHZhciBvZmZzZXQgPSBfZ2V0T3B0aW9uKCdvZmZzZXQnKTtcclxuXHJcbiAgICAgICAgLy8gU3BhY2luZ3NcclxuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBfZ2V0RWxlbWVudFNwYWNpbmcodGhlLmVsZW1lbnQpOyBcclxuXHJcbiAgICAgICAgLy8gSGVpZ2h0IGRlcGVuZGVuY2llc1xyXG4gICAgICAgIGlmICggZGVwZW5kZW5jaWVzICE9PSBudWxsICkge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGRlcGVuZGVuY2llcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGVsZW1lbnRzICYmIGVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICggS1RVdGlsLnZpc2libGUoZWxlbWVudHNbaV0pID09PSBmYWxzZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBfZ2V0RWxlbWVudEhlaWdodChlbGVtZW50c1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFdyYXBwZXJzXHJcbiAgICAgICAgaWYgKCB3cmFwcGVycyAhPT0gbnVsbCApIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh3cmFwcGVycyk7XHJcbiAgICAgICAgICAgIGlmICggZWxlbWVudHMgJiYgZWxlbWVudHMubGVuZ3RoID4gMCApIHtcclxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbGVuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKysgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBLVFV0aWwudmlzaWJsZShlbGVtZW50c1tpXSkgPT09IGZhbHNlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIF9nZXRFbGVtZW50U3BhY2luZyhlbGVtZW50c1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEN1c3RvbSBvZmZzZXRcclxuICAgICAgICBpZiAoIG9mZnNldCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2Zmc2V0ICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChvZmZzZXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFN0cmluZyhoZWlnaHQpICsgJ3B4JztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2dldEVsZW1lbnRIZWlnaHQgPSBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIGlmIChlbGVtZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCArIHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0ICsgcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnbWFyZ2luLXRvcCcpKTtcclxuICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0ICsgcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnbWFyZ2luLWJvdHRvbScpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuY3NzKGVsZW1lbnQsICdib3JkZXItdG9wJykpIHtcclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCArIHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2JvcmRlci10b3AnKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuY3NzKGVsZW1lbnQsICdib3JkZXItYm90dG9tJykpIHtcclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCArIHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2JvcmRlci1ib3R0b20nKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IFxyXG5cclxuICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfZ2V0RWxlbWVudFNwYWNpbmcgPSBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIHNwYWNpbmcgPSAwO1xyXG5cclxuICAgICAgICBpZiAoZWxlbWVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzcGFjaW5nID0gc3BhY2luZyArIHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ21hcmdpbi10b3AnKSk7XHJcbiAgICAgICAgICAgIHNwYWNpbmcgPSBzcGFjaW5nICsgcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnbWFyZ2luLWJvdHRvbScpKTtcclxuICAgICAgICAgICAgc3BhY2luZyA9IHNwYWNpbmcgKyBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdwYWRkaW5nLXRvcCcpKTtcclxuICAgICAgICAgICAgc3BhY2luZyA9IHNwYWNpbmcgKyBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdwYWRkaW5nLWJvdHRvbScpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuY3NzKGVsZW1lbnQsICdib3JkZXItdG9wJykpIHtcclxuICAgICAgICAgICAgICAgIHNwYWNpbmcgPSBzcGFjaW5nICsgcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnYm9yZGVyLXRvcCcpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKEtUVXRpbC5jc3MoZWxlbWVudCwgJ2JvcmRlci1ib3R0b20nKSkge1xyXG4gICAgICAgICAgICAgICAgc3BhY2luZyA9IHNwYWNpbmcgKyBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdib3JkZXItYm90dG9tJykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBcclxuXHJcbiAgICAgICAgcmV0dXJuIHNwYWNpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9nZXRPcHRpb24gPSBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgaWYgKCB0aGUuZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEta3Qtc2Nyb2xsLScgKyBuYW1lKSA9PT0gdHJ1ZSApIHtcclxuICAgICAgICAgICAgdmFyIGF0dHIgPSB0aGUuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEta3Qtc2Nyb2xsLScgKyBuYW1lKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IEtUVXRpbC5nZXRSZXNwb25zaXZlVmFsdWUoYXR0cik7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHZhbHVlICE9PSBudWxsICYmIFN0cmluZyh2YWx1ZSkgPT09ICd0cnVlJyApIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICggdmFsdWUgIT09IG51bGwgJiYgU3RyaW5nKHZhbHVlKSA9PT0gJ2ZhbHNlJyApIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgb3B0aW9uTmFtZSA9IEtUVXRpbC5zbmFrZVRvQ2FtZWwobmFtZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHRoZS5vcHRpb25zW29wdGlvbk5hbWVdICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEtUVXRpbC5nZXRSZXNwb25zaXZlVmFsdWUodGhlLm9wdGlvbnNbb3B0aW9uTmFtZV0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9nZXRIZWlnaHRUeXBlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKF9nZXRPcHRpb24oJ2hlaWdodCcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnaGVpZ2h0JztcclxuICAgICAgICB9IGlmIChfZ2V0T3B0aW9uKCdtaW4taGVpZ2h0JykpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdtaW4taGVpZ2h0JztcclxuICAgICAgICB9IGlmIChfZ2V0T3B0aW9uKCdtYXgtaGVpZ2h0JykpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdtYXgtaGVpZ2h0JztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgS1RVdGlsLmRhdGEodGhlLmVsZW1lbnQpLnJlbW92ZSgnc2Nyb2xsJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ29uc3RydWN0IENsYXNzXHJcbiAgICBfY29uc3RydWN0KCk7XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFB1YmxpYyBBUEkgICoqIC8vXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIHRoZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gX3VwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoZS5nZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gX2dldEhlaWdodCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoZS5nZXRFbGVtZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoZS5lbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHRoZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIF9kZXN0cm95KCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG4vLyBTdGF0aWMgbWV0aG9kc1xyXG5LVFNjcm9sbC5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgIGlmICggZWxlbWVudCAhPT0gbnVsbCAmJiBLVFV0aWwuZGF0YShlbGVtZW50KS5oYXMoJ3Njcm9sbCcpICkge1xyXG4gICAgICAgIHJldHVybiBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ3Njcm9sbCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ3JlYXRlIGluc3RhbmNlc1xyXG5LVFNjcm9sbC5jcmVhdGVJbnN0YW5jZXMgPSBmdW5jdGlvbihzZWxlY3RvciA9ICdbZGF0YS1rdC1zY3JvbGw9XCJ0cnVlXCJdJykge1xyXG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIkJPRFlcIilbMF07XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZSBNZW51c1xyXG4gICAgdmFyIGVsZW1lbnRzID0gYm9keS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcclxuXHJcbiAgICBpZiAoIGVsZW1lbnRzICYmIGVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIG5ldyBLVFNjcm9sbChlbGVtZW50c1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBXaW5kb3cgcmVzaXplIGhhbmRsaW5nXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbigpIHtcclxuICAgIHZhciB0aW1lcjtcclxuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJCT0RZXCIpWzBdO1xyXG5cclxuICAgIEtUVXRpbC50aHJvdHRsZSh0aW1lciwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gTG9jYXRlIGFuZCB1cGRhdGUgT2ZmY2FudmFzIGluc3RhbmNlcyBvbiB3aW5kb3cgcmVzaXplXHJcbiAgICAgICAgdmFyIGVsZW1lbnRzID0gYm9keS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1rdC1zY3JvbGw9XCJ0cnVlXCJdJyk7XHJcblxyXG4gICAgICAgIGlmICggZWxlbWVudHMgJiYgZWxlbWVudHMubGVuZ3RoID4gMCApIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsID0gS1RTY3JvbGwuZ2V0SW5zdGFuY2UoZWxlbWVudHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNjcm9sbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbC51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sIDIwMCk7XHJcbn0pO1xyXG5cclxuLy8gR2xvYmFsIGluaXRpYWxpemF0aW9uXHJcbktUU2Nyb2xsLmluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgIEtUU2Nyb2xsLmNyZWF0ZUluc3RhbmNlcygpO1xyXG59O1xyXG5cclxuLy8gT24gZG9jdW1lbnQgcmVhZHlcclxuaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xyXG4gICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgS1RTY3JvbGwuaW5pdCk7XHJcbn0gZWxzZSB7XHJcbiAgICBLVFNjcm9sbC5pbml0KCk7XHJcbn1cclxuXHJcbi8vIFdlYnBhY2sgU3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBLVFNjcm9sbDtcclxufVxyXG4iXSwibmFtZXMiOlsiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJLVFNjcm9sbCIsImVsZW1lbnQiLCJvcHRpb25zIiwidGhlIiwiYm9keSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJkZWZhdWx0T3B0aW9ucyIsInNhdmVTdGF0ZSIsIl9jb25zdHJ1Y3QiLCJLVFV0aWwiLCJkYXRhIiwiaGFzIiwiZ2V0IiwiX2luaXQiLCJkZWVwRXh0ZW5kIiwiaWQiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJfdXBkYXRlIiwic2V0IiwiX3NldHVwSGVpZ2h0IiwiaGVpZ2h0VHlwZSIsIl9nZXRIZWlnaHRUeXBlIiwiaGVpZ2h0IiwiX2dldEhlaWdodCIsImxlbmd0aCIsImNzcyIsIl9zZXR1cFN0YXRlIiwiX2dldE9wdGlvbiIsIktUQ29va2llIiwicG9zIiwicGFyc2VJbnQiLCJzY3JvbGxUb3AiLCJfc2V0dXBTY3JvbGxIYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9zY3JvbGxIYW5kbGVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9kZXN0cm95U2Nyb2xsSGFuZGxlciIsIl9yZXNldEhlaWdodCIsImhhc0F0dHJpYnV0ZSIsIl9zZXR1cFN0cmV0Y2hIZWlnaHQiLCJzdHJldGNoIiwiZWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWxlbWVudDEiLCJlbGVtZW50MiIsImRpZmYiLCJfZ2V0RWxlbWVudEhlaWdodCIsIlN0cmluZyIsIkZ1bmN0aW9uIiwiY2FsbCIsInRvTG93ZXJDYXNlIiwiX2dldEF1dG9IZWlnaHQiLCJnZXRWaWV3UG9ydCIsImRlcGVuZGVuY2llcyIsIndyYXBwZXJzIiwib2Zmc2V0IiwiX2dldEVsZW1lbnRTcGFjaW5nIiwiaSIsImxlbiIsInZpc2libGUiLCJzcGFjaW5nIiwibmFtZSIsImF0dHIiLCJ2YWx1ZSIsImdldFJlc3BvbnNpdmVWYWx1ZSIsIm9wdGlvbk5hbWUiLCJzbmFrZVRvQ2FtZWwiLCJfZGVzdHJveSIsInJlbW92ZSIsInVwZGF0ZSIsImdldEhlaWdodCIsImdldEVsZW1lbnQiLCJkZXN0cm95IiwiZ2V0SW5zdGFuY2UiLCJjcmVhdGVJbnN0YW5jZXMiLCJzZWxlY3RvciIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsIndpbmRvdyIsInRpbWVyIiwidGhyb3R0bGUiLCJzY3JvbGwiLCJpbml0IiwicmVhZHlTdGF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/src/js/components/scroll.js\n");

/***/ }),

/***/ "./resources/src/js/components/scrolltop.js":
/*!**************************************************!*\
  !*** ./resources/src/js/components/scrolltop.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTScrolltop = function KTScrolltop(element, options) {\n  ////////////////////////////\n  // ** Private variables  ** //\n  ////////////////////////////\n  var the = this;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  }\n\n  // Default options\n  var defaultOptions = {\n    offset: 300,\n    speed: 600\n  };\n\n  ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('scrolltop')) {\n      the = KTUtil.data(element).get('scrolltop');\n    } else {\n      _init();\n    }\n  };\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('scrolltop');\n    the.element = element;\n\n    // Set initialized\n    the.element.setAttribute('data-kt-scrolltop', 'true');\n\n    // Event Handlers\n    _handlers();\n\n    // Bind Instance\n    KTUtil.data(the.element).set('scrolltop', the);\n  };\n  var _handlers = function _handlers() {\n    var timer;\n    window.addEventListener('scroll', function () {\n      KTUtil.throttle(timer, function () {\n        _scroll();\n      }, 200);\n    });\n    KTUtil.addEvent(the.element, 'click', function (e) {\n      e.preventDefault();\n      _go();\n    });\n  };\n  var _scroll = function _scroll() {\n    var offset = parseInt(_getOption('offset'));\n    var pos = KTUtil.getScrollTop(); // current vertical position\n\n    if (pos > offset) {\n      if (body.hasAttribute('data-kt-scrolltop') === false) {\n        body.setAttribute('data-kt-scrolltop', 'on');\n      }\n    } else {\n      if (body.hasAttribute('data-kt-scrolltop') === true) {\n        body.removeAttribute('data-kt-scrolltop');\n      }\n    }\n  };\n  var _go = function _go() {\n    var speed = parseInt(_getOption('speed'));\n    KTUtil.scrollTop(0, speed);\n  };\n  var _getOption = function _getOption(name) {\n    if (the.element.hasAttribute('data-kt-scrolltop-' + name) === true) {\n      var attr = the.element.getAttribute('data-kt-scrolltop-' + name);\n      var value = KTUtil.getResponsiveValue(attr);\n      if (value !== null && String(value) === 'true') {\n        value = true;\n      } else if (value !== null && String(value) === 'false') {\n        value = false;\n      }\n      return value;\n    } else {\n      var optionName = KTUtil.snakeToCamel(name);\n      if (the.options[optionName]) {\n        return KTUtil.getResponsiveValue(the.options[optionName]);\n      } else {\n        return null;\n      }\n    }\n  };\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('scrolltop');\n  };\n\n  // Construct class\n  _construct();\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Plugin API\n  the.go = function () {\n    return _go();\n  };\n  the.getElement = function () {\n    return the.element;\n  };\n  the.destroy = function () {\n    return _destroy();\n  };\n};\n\n// Static methods\nKTScrolltop.getInstance = function (element) {\n  if (element && KTUtil.data(element).has('scrolltop')) {\n    return KTUtil.data(element).get('scrolltop');\n  } else {\n    return null;\n  }\n};\n\n// Create instances\nKTScrolltop.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-scrolltop=\"true\"]';\n  var body = document.getElementsByTagName(\"BODY\")[0];\n\n  // Initialize Menus\n  var elements = body.querySelectorAll(selector);\n  var scrolltop;\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      scrolltop = new KTScrolltop(elements[i]);\n    }\n  }\n};\n\n// Global initialization\nKTScrolltop.init = function () {\n  KTScrolltop.createInstances();\n};\n\n// On document ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTScrolltop.init);\n} else {\n  KTScrolltop.init();\n}\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTScrolltop;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/components/scrolltop.js\n");

/***/ }),

/***/ "./resources/src/js/components/search.js":
/*!***********************************************!*\
  !*** ./resources/src/js/components/search.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTSearch = function KTSearch(element, options) {\n  ////////////////////////////\n  // ** Private variables  ** //\n  ////////////////////////////\n  var the = this;\n  if (!element) {\n    return;\n  }\n\n  // Default Options\n  var defaultOptions = {\n    minLength: 2,\n    // Miniam text lenght to query search\n    keypress: true,\n    // Enable search on keypress \n    enter: true,\n    // Enable search on enter key press\n    layout: 'menu',\n    // Use 'menu' or 'inline' layout options to display search results\n    responsive: null,\n    // Pass integer value or bootstrap compatible breakpoint key(sm,md,lg,xl,xxl) to enable reponsive form mode for device width below the breakpoint value\n    showOnFocus: true // Always show menu on input focus\n  };\n\n  ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n\n  // Construct\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('search') === true) {\n      the = KTUtil.data(element).get('search');\n    } else {\n      _init();\n    }\n  };\n\n  // Init\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.processing = false;\n\n    // Elements\n    the.element = element;\n    the.contentElement = _getElement('content');\n    the.formElement = _getElement('form');\n    the.inputElement = _getElement('input');\n    the.spinnerElement = _getElement('spinner');\n    the.clearElement = _getElement('clear');\n    the.toggleElement = _getElement('toggle');\n    the.submitElement = _getElement('submit');\n    the.toolbarElement = _getElement('toolbar');\n    the.resultsElement = _getElement('results');\n    the.suggestionElement = _getElement('suggestion');\n    the.emptyElement = _getElement('empty');\n\n    // Set initialized\n    the.element.setAttribute('data-kt-search', 'true');\n\n    // Layout\n    the.layout = _getOption('layout');\n\n    // Menu\n    if (the.layout === 'menu') {\n      the.menuObject = new KTMenu(the.contentElement);\n    } else {\n      the.menuObject = null;\n    }\n\n    // Update\n    _update();\n\n    // Event Handlers\n    _handlers();\n\n    // Bind Instance\n    KTUtil.data(the.element).set('search', the);\n  };\n\n  // Handlera\n  var _handlers = function _handlers() {\n    // Focus\n    the.inputElement.addEventListener('focus', _focus);\n\n    // Blur\n    the.inputElement.addEventListener('blur', _blur);\n\n    // Keypress\n    if (_getOption('keypress') === true) {\n      the.inputElement.addEventListener('input', _input);\n    }\n\n    // Submit\n    if (the.submitElement) {\n      the.submitElement.addEventListener('click', _search);\n    }\n\n    // Enter\n    if (_getOption('enter') === true) {\n      the.inputElement.addEventListener('keypress', _enter);\n    }\n\n    // Clear \n    if (the.clearElement) {\n      the.clearElement.addEventListener('click', _clear);\n    }\n\n    // Menu\n    if (the.menuObject) {\n      // Toggle menu\n      if (the.toggleElement) {\n        the.toggleElement.addEventListener('click', _show);\n        the.menuObject.on('kt.menu.dropdown.show', function (item) {\n          if (KTUtil.visible(the.toggleElement)) {\n            the.toggleElement.classList.add('active');\n            the.toggleElement.classList.add('show');\n          }\n        });\n        the.menuObject.on('kt.menu.dropdown.hide', function (item) {\n          if (KTUtil.visible(the.toggleElement)) {\n            the.toggleElement.classList.remove('active');\n            the.toggleElement.classList.remove('show');\n          }\n        });\n      }\n      the.menuObject.on('kt.menu.dropdown.shown', function () {\n        the.inputElement.focus();\n      });\n    }\n\n    // Window resize handling\n    window.addEventListener('resize', function () {\n      var timer;\n      KTUtil.throttle(timer, function () {\n        _update();\n      }, 200);\n    });\n  };\n\n  // Focus\n  var _focus = function _focus() {\n    the.element.classList.add('focus');\n    if (_getOption('show-on-focus') === true || the.inputElement.value.length >= minLength) {\n      _show();\n    }\n  };\n\n  // Blur\n  var _blur = function _blur() {\n    the.element.classList.remove('focus');\n  };\n\n  // Enter \n  var _enter = function _enter(e) {\n    var key = e.charCode || e.keyCode || 0;\n    if (key == 13) {\n      e.preventDefault();\n      _search();\n    }\n  };\n\n  // Input\n  var _input = function _input() {\n    if (_getOption('min-length')) {\n      var minLength = parseInt(_getOption('min-length'));\n      if (the.inputElement.value.length >= minLength) {\n        _search();\n      } else if (the.inputElement.value.length === 0) {\n        _clear();\n      }\n    }\n  };\n\n  // Search\n  var _search = function _search() {\n    if (the.processing === false) {\n      // Show search spinner\n      if (the.spinnerElement) {\n        the.spinnerElement.classList.remove(\"d-none\");\n      }\n\n      // Hide search clear button\n      if (the.clearElement) {\n        the.clearElement.classList.add(\"d-none\");\n      }\n\n      // Hide search toolbar\n      if (the.toolbarElement && the.formElement.contains(the.toolbarElement)) {\n        the.toolbarElement.classList.add(\"d-none\");\n      }\n\n      // Focus input\n      the.inputElement.focus();\n      the.processing = true;\n      KTEventHandler.trigger(the.element, 'kt.search.process', the);\n    }\n  };\n\n  // Complete\n  var _complete = function _complete() {\n    if (the.spinnerElement) {\n      the.spinnerElement.classList.add(\"d-none\");\n    }\n\n    // Show search toolbar\n    if (the.clearElement) {\n      the.clearElement.classList.remove(\"d-none\");\n    }\n    if (the.inputElement.value.length === 0) {\n      _clear();\n    }\n\n    // Focus input\n    the.inputElement.focus();\n    _show();\n    the.processing = false;\n  };\n\n  // Clear\n  var _clear = function _clear() {\n    if (KTEventHandler.trigger(the.element, 'kt.search.clear', the) === false) {\n      return;\n    }\n\n    // Clear and focus input\n    the.inputElement.value = \"\";\n    the.inputElement.focus();\n\n    // Hide clear icon\n    if (the.clearElement) {\n      the.clearElement.classList.add(\"d-none\");\n    }\n\n    // Show search toolbar\n    if (the.toolbarElement && the.formElement.contains(the.toolbarElement)) {\n      the.toolbarElement.classList.remove(\"d-none\");\n    }\n\n    // Hide menu\n    if (_getOption('show-on-focus') === false) {\n      _hide();\n    }\n    KTEventHandler.trigger(the.element, 'kt.search.cleared', the);\n  };\n\n  // Update\n  var _update = function _update() {\n    // Handle responsive form\n    if (the.layout === 'menu') {\n      var responsiveFormMode = _getResponsiveFormMode();\n      if (responsiveFormMode === 'on' && the.contentElement.contains(the.formElement) === false) {\n        the.contentElement.prepend(the.formElement);\n        the.formElement.classList.remove('d-none');\n      } else if (responsiveFormMode === 'off' && the.contentElement.contains(the.formElement) === true) {\n        the.element.prepend(the.formElement);\n        the.formElement.classList.add('d-none');\n      }\n    }\n  };\n\n  // Show menu\n  var _show = function _show() {\n    if (the.menuObject) {\n      _update();\n      the.menuObject.show(the.element);\n    }\n  };\n\n  // Hide menu\n  var _hide = function _hide() {\n    if (the.menuObject) {\n      _update();\n      the.menuObject.hide(the.element);\n    }\n  };\n\n  // Get option\n  var _getOption = function _getOption(name) {\n    if (the.element.hasAttribute('data-kt-search-' + name) === true) {\n      var attr = the.element.getAttribute('data-kt-search-' + name);\n      var value = KTUtil.getResponsiveValue(attr);\n      if (value !== null && String(value) === 'true') {\n        value = true;\n      } else if (value !== null && String(value) === 'false') {\n        value = false;\n      }\n      return value;\n    } else {\n      var optionName = KTUtil.snakeToCamel(name);\n      if (the.options[optionName]) {\n        return KTUtil.getResponsiveValue(the.options[optionName]);\n      } else {\n        return null;\n      }\n    }\n  };\n\n  // Get element\n  var _getElement = function _getElement(name) {\n    return the.element.querySelector('[data-kt-search-element=\"' + name + '\"]');\n  };\n\n  // Check if responsive form mode is enabled\n  var _getResponsiveFormMode = function _getResponsiveFormMode() {\n    var responsive = _getOption('responsive');\n    var width = KTUtil.getViewPort().width;\n    if (!responsive) {\n      return null;\n    }\n    var breakpoint = KTUtil.getBreakpoint(responsive);\n    if (!breakpoint) {\n      breakpoint = parseInt(responsive);\n    }\n    if (width < breakpoint) {\n      return \"on\";\n    } else {\n      return \"off\";\n    }\n  };\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('search');\n  };\n\n  // Construct class\n  _construct();\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Plugin API\n  the.show = function () {\n    return _show();\n  };\n  the.hide = function () {\n    return _hide();\n  };\n  the.update = function () {\n    return _update();\n  };\n  the.search = function () {\n    return _search();\n  };\n  the.complete = function () {\n    return _complete();\n  };\n  the.clear = function () {\n    return _clear();\n  };\n  the.isProcessing = function () {\n    return the.processing;\n  };\n  the.getQuery = function () {\n    return the.inputElement.value;\n  };\n  the.getMenu = function () {\n    return the.menuObject;\n  };\n  the.getFormElement = function () {\n    return the.formElement;\n  };\n  the.getInputElement = function () {\n    return the.inputElement;\n  };\n  the.getContentElement = function () {\n    return the.contentElement;\n  };\n  the.getElement = function () {\n    return the.element;\n  };\n  the.destroy = function () {\n    return _destroy();\n  };\n\n  // Event API\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n};\n\n// Static methods\nKTSearch.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('search')) {\n    return KTUtil.data(element).get('search');\n  } else {\n    return null;\n  }\n};\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTSearch;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/components/search.js\n");

/***/ }),

/***/ "./resources/src/js/components/stepper.js":
/*!************************************************!*\
  !*** ./resources/src/js/components/stepper.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTStepper = function KTStepper(element, options) {\n  //////////////////////////////\n  // ** Private variables  ** //\n  //////////////////////////////\n  var the = this;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  }\n\n  // Default Options\n  var defaultOptions = {\n    startIndex: 1,\n    animation: false,\n    animationSpeed: '0.3s',\n    animationNextClass: 'animate__animated animate__slideInRight animate__fast',\n    animationPreviousClass: 'animate__animated animate__slideInLeft animate__fast'\n  };\n\n  ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('stepper') === true) {\n      the = KTUtil.data(element).get('stepper');\n    } else {\n      _init();\n    }\n  };\n  var _init = function _init() {\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('stepper');\n    the.element = element;\n\n    // Set initialized\n    the.element.setAttribute('data-kt-stepper', 'true');\n\n    // Elements\n    the.steps = KTUtil.findAll(the.element, '[data-kt-stepper-element=\"nav\"]');\n    the.btnNext = KTUtil.find(the.element, '[data-kt-stepper-action=\"next\"]');\n    the.btnPrevious = KTUtil.find(the.element, '[data-kt-stepper-action=\"previous\"]');\n    the.btnSubmit = KTUtil.find(the.element, '[data-kt-stepper-action=\"submit\"]');\n\n    // Variables\n    the.totalStepsNumber = the.steps.length;\n    the.passedStepIndex = 0;\n    the.currentStepIndex = 1;\n    the.clickedStepIndex = 0;\n\n    // Set Current Step\n    if (the.options.startIndex > 1) {\n      _goTo(the.options.startIndex);\n    }\n\n    // Event Handlers\n    KTUtil.addEvent(the.btnNext, 'click', function (e) {\n      e.preventDefault();\n      KTEventHandler.trigger(the.element, 'kt.stepper.next', the);\n    });\n    KTUtil.addEvent(the.btnPrevious, 'click', function (e) {\n      e.preventDefault();\n      KTEventHandler.trigger(the.element, 'kt.stepper.previous', the);\n    });\n    KTUtil.on(the.element, '[data-kt-stepper-action=\"step\"]', 'click', function (e) {\n      e.preventDefault();\n      if (the.steps && the.steps.length > 0) {\n        for (var i = 0, len = the.steps.length; i < len; i++) {\n          if (the.steps[i] === this) {\n            the.clickedStepIndex = i + 1;\n            KTEventHandler.trigger(the.element, 'kt.stepper.click', the);\n            return;\n          }\n        }\n      }\n    });\n\n    // Bind Instance\n    KTUtil.data(the.element).set('stepper', the);\n  };\n  var _goTo = function _goTo(index) {\n    // Trigger \"change\" event\n    KTEventHandler.trigger(the.element, 'kt.stepper.change', the);\n\n    // Skip if this step is already shown\n    if (index === the.currentStepIndex || index > the.totalStepsNumber || index < 0) {\n      return;\n    }\n\n    // Validate step number\n    index = parseInt(index);\n\n    // Set current step\n    the.passedStepIndex = the.currentStepIndex;\n    the.currentStepIndex = index;\n\n    // Refresh elements\n    _refreshUI();\n\n    // Trigger \"changed\" event\n    KTEventHandler.trigger(the.element, 'kt.stepper.changed', the);\n    return the;\n  };\n  var _goNext = function _goNext() {\n    return _goTo(_getNextStepIndex());\n  };\n  var _goPrevious = function _goPrevious() {\n    return _goTo(_getPreviousStepIndex());\n  };\n  var _goLast = function _goLast() {\n    return _goTo(_getLastStepIndex());\n  };\n  var _goFirst = function _goFirst() {\n    return _goTo(_getFirstStepIndex());\n  };\n  var _refreshUI = function _refreshUI() {\n    var state = '';\n    if (_isLastStep()) {\n      state = 'last';\n    } else if (_isFirstStep()) {\n      state = 'first';\n    } else {\n      state = 'between';\n    }\n\n    // Set state class\n    KTUtil.removeClass(the.element, 'last');\n    KTUtil.removeClass(the.element, 'first');\n    KTUtil.removeClass(the.element, 'between');\n    KTUtil.addClass(the.element, state);\n\n    // Step Items\n    var elements = KTUtil.findAll(the.element, '[data-kt-stepper-element=\"nav\"], [data-kt-stepper-element=\"content\"], [data-kt-stepper-element=\"info\"]');\n    if (elements && elements.length > 0) {\n      for (var i = 0, len = elements.length; i < len; i++) {\n        var element = elements[i];\n        var index = KTUtil.index(element) + 1;\n        KTUtil.removeClass(element, 'current');\n        KTUtil.removeClass(element, 'completed');\n        KTUtil.removeClass(element, 'pending');\n        if (index == the.currentStepIndex) {\n          KTUtil.addClass(element, 'current');\n          if (the.options.animation !== false && element.getAttribute('data-kt-stepper-element') == 'content') {\n            KTUtil.css(element, 'animationDuration', the.options.animationSpeed);\n            var animation = _getStepDirection(the.passedStepIndex) === 'previous' ? the.options.animationPreviousClass : the.options.animationNextClass;\n            KTUtil.animateClass(element, animation);\n          }\n        } else {\n          if (index < the.currentStepIndex) {\n            KTUtil.addClass(element, 'completed');\n          } else {\n            KTUtil.addClass(element, 'pending');\n          }\n        }\n      }\n    }\n  };\n  var _isLastStep = function _isLastStep() {\n    return the.currentStepIndex === the.totalStepsNumber;\n  };\n  var _isFirstStep = function _isFirstStep() {\n    return the.currentStepIndex === 1;\n  };\n  var _isBetweenStep = function _isBetweenStep() {\n    return _isLastStep() === false && _isFirstStep() === false;\n  };\n  var _getNextStepIndex = function _getNextStepIndex() {\n    if (the.totalStepsNumber >= the.currentStepIndex + 1) {\n      return the.currentStepIndex + 1;\n    } else {\n      return the.totalStepsNumber;\n    }\n  };\n  var _getPreviousStepIndex = function _getPreviousStepIndex() {\n    if (the.currentStepIndex - 1 > 1) {\n      return the.currentStepIndex - 1;\n    } else {\n      return 1;\n    }\n  };\n  var _getFirstStepIndex = function _getFirstStepIndex() {\n    return 1;\n  };\n  var _getLastStepIndex = function _getLastStepIndex() {\n    return the.totalStepsNumber;\n  };\n  var _getTotalStepsNumber = function _getTotalStepsNumber() {\n    return the.totalStepsNumber;\n  };\n  var _getStepDirection = function _getStepDirection(index) {\n    if (index > the.currentStepIndex) {\n      return 'next';\n    } else {\n      return 'previous';\n    }\n  };\n  var _getStepContent = function _getStepContent(index) {\n    var content = KTUtil.findAll(the.element, '[data-kt-stepper-element=\"content\"]');\n    if (content[index - 1]) {\n      return content[index - 1];\n    } else {\n      return false;\n    }\n  };\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('stepper');\n  };\n\n  // Construct Class\n  _construct();\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Plugin API\n  the.getElement = function (index) {\n    return the.element;\n  };\n  the.goTo = function (index) {\n    return _goTo(index);\n  };\n  the.goPrevious = function () {\n    return _goPrevious();\n  };\n  the.goNext = function () {\n    return _goNext();\n  };\n  the.goFirst = function () {\n    return _goFirst();\n  };\n  the.goLast = function () {\n    return _goLast();\n  };\n  the.getCurrentStepIndex = function () {\n    return the.currentStepIndex;\n  };\n  the.getNextStepIndex = function () {\n    return the.nextStepIndex;\n  };\n  the.getPassedStepIndex = function () {\n    return the.passedStepIndex;\n  };\n  the.getClickedStepIndex = function () {\n    return the.clickedStepIndex;\n  };\n  the.getPreviousStepIndex = function () {\n    return the.PreviousStepIndex;\n  };\n  the.destroy = function () {\n    return _destroy();\n  };\n\n  // Event API\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n};\n\n// Static methods\nKTStepper.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('stepper')) {\n    return KTUtil.data(element).get('stepper');\n  } else {\n    return null;\n  }\n};\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTStepper;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/components/stepper.js\n");

/***/ }),

/***/ "./resources/src/js/components/sticky.js":
/*!***********************************************!*\
  !*** ./resources/src/js/components/sticky.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTSticky = function KTSticky(element, options) {\n  ////////////////////////////\n  // ** Private Variables  ** //\n  ////////////////////////////\n  var the = this;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  }\n\n  // Default Options\n  var defaultOptions = {\n    offset: 200,\n    releaseOffset: 0,\n    reverse: false,\n    animation: true,\n    animationSpeed: '0.3s',\n    animationClass: 'animation-slide-in-down'\n  };\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('sticky') === true) {\n      the = KTUtil.data(element).get('sticky');\n    } else {\n      _init();\n    }\n  };\n  var _init = function _init() {\n    the.element = element;\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('sticky');\n    the.name = the.element.getAttribute('data-kt-sticky-name');\n    the.attributeName = 'data-kt-sticky-' + the.name;\n    the.attributeName2 = 'data-kt-' + the.name;\n    the.eventTriggerState = true;\n    the.lastScrollTop = 0;\n    the.scrollHandler;\n\n    // Set initialized\n    the.element.setAttribute('data-kt-sticky', 'true');\n\n    // Event Handlers\n    window.addEventListener('scroll', _scroll);\n\n    // Initial Launch\n    _scroll();\n\n    // Bind Instance\n    KTUtil.data(the.element).set('sticky', the);\n  };\n  var _scroll = function _scroll(e) {\n    var offset = _getOption('offset');\n    var releaseOffset = _getOption('release-offset');\n    var reverse = _getOption('reverse');\n    var st;\n    var attrName;\n    var diff;\n\n    // Exit if false\n    if (offset === false) {\n      return;\n    }\n    offset = parseInt(offset);\n    releaseOffset = releaseOffset ? parseInt(releaseOffset) : 0;\n    st = KTUtil.getScrollTop();\n    diff = document.documentElement.scrollHeight - window.innerHeight - KTUtil.getScrollTop();\n    if (reverse === true) {\n      // Release on reverse scroll mode\n      if (st > offset && (releaseOffset === 0 || releaseOffset < diff)) {\n        if (body.hasAttribute(the.attributeName) === false) {\n          _enable();\n          body.setAttribute(the.attributeName, 'on');\n          body.setAttribute(the.attributeName2, 'on');\n        }\n        if (the.eventTriggerState === true) {\n          KTEventHandler.trigger(the.element, 'kt.sticky.on', the);\n          KTEventHandler.trigger(the.element, 'kt.sticky.change', the);\n          the.eventTriggerState = false;\n        }\n      } else {\n        // Back scroll mode\n        if (body.hasAttribute(the.attributeName) === true) {\n          _disable();\n          body.removeAttribute(the.attributeName);\n          body.removeAttribute(the.attributeName2);\n        }\n        if (the.eventTriggerState === false) {\n          KTEventHandler.trigger(the.element, 'kt.sticky.off', the);\n          KTEventHandler.trigger(the.element, 'kt.sticky.change', the);\n          the.eventTriggerState = true;\n        }\n      }\n      the.lastScrollTop = st;\n    } else {\n      // Classic scroll mode\n      if (st > offset && (releaseOffset === 0 || releaseOffset < diff)) {\n        if (body.hasAttribute(the.attributeName) === false) {\n          _enable();\n          body.setAttribute(the.attributeName, 'on');\n          body.setAttribute(the.attributeName2, 'on');\n        }\n        if (the.eventTriggerState === true) {\n          KTEventHandler.trigger(the.element, 'kt.sticky.on', the);\n          KTEventHandler.trigger(the.element, 'kt.sticky.change', the);\n          the.eventTriggerState = false;\n        }\n      } else {\n        // back scroll mode\n        if (body.hasAttribute(the.attributeName) === true) {\n          _disable();\n          body.removeAttribute(the.attributeName);\n          body.removeAttribute(the.attributeName2);\n        }\n        if (the.eventTriggerState === false) {\n          KTEventHandler.trigger(the.element, 'kt.sticky.off', the);\n          KTEventHandler.trigger(the.element, 'kt.sticky.change', the);\n          the.eventTriggerState = true;\n        }\n      }\n    }\n    if (releaseOffset > 0) {\n      if (diff < releaseOffset) {\n        the.element.setAttribute('data-kt-sticky-released', 'true');\n      } else {\n        the.element.removeAttribute('data-kt-sticky-released');\n      }\n    }\n  };\n  var _enable = function _enable(update) {\n    var top = _getOption('top');\n    var left = _getOption('left');\n    var right = _getOption('right');\n    var width = _getOption('width');\n    var zindex = _getOption('zindex');\n    var dependencies = _getOption('dependencies');\n    var classes = _getOption('class');\n    var height = _calculateHeight();\n    if (update !== true && _getOption('animation') === true) {\n      KTUtil.css(the.element, 'animationDuration', _getOption('animationSpeed'));\n      KTUtil.animateClass(the.element, 'animation ' + _getOption('animationClass'));\n    }\n    if (classes !== null) {\n      KTUtil.addClass(the.element, classes);\n    }\n    if (zindex !== null) {\n      KTUtil.css(the.element, 'z-index', zindex);\n      KTUtil.css(the.element, 'position', 'fixed');\n    }\n    if (top !== null) {\n      KTUtil.css(the.element, 'top', top);\n    }\n    if (width !== null) {\n      if (width['target']) {\n        var targetElement = document.querySelector(width['target']);\n        if (targetElement) {\n          width = KTUtil.css(targetElement, 'width');\n        }\n      }\n      KTUtil.css(the.element, 'width', width);\n    }\n    if (left !== null) {\n      if (String(left).toLowerCase() === 'auto') {\n        var offsetLeft = KTUtil.offset(the.element).left;\n        if (offsetLeft > 0) {\n          KTUtil.css(the.element, 'left', String(offsetLeft) + 'px');\n        }\n      } else {\n        KTUtil.css(the.element, 'left', left);\n      }\n    }\n    if (right !== null) {\n      KTUtil.css(the.element, 'right', right);\n    }\n\n    // Height dependencies\n    if (dependencies !== null) {\n      var dependencyElements = document.querySelectorAll(dependencies);\n      if (dependencyElements && dependencyElements.length > 0) {\n        for (var i = 0, len = dependencyElements.length; i < len; i++) {\n          KTUtil.css(dependencyElements[i], 'padding-top', String(height) + 'px');\n        }\n      }\n    }\n  };\n  var _disable = function _disable() {\n    KTUtil.css(the.element, 'top', '');\n    KTUtil.css(the.element, 'width', '');\n    KTUtil.css(the.element, 'left', '');\n    KTUtil.css(the.element, 'right', '');\n    KTUtil.css(the.element, 'z-index', '');\n    KTUtil.css(the.element, 'position', '');\n    var dependencies = _getOption('dependencies');\n    var classes = _getOption('class');\n    if (classes !== null) {\n      KTUtil.removeClass(the.element, classes);\n    }\n\n    // Height dependencies\n    if (dependencies !== null) {\n      var dependencyElements = document.querySelectorAll(dependencies);\n      if (dependencyElements && dependencyElements.length > 0) {\n        for (var i = 0, len = dependencyElements.length; i < len; i++) {\n          KTUtil.css(dependencyElements[i], 'padding-top', '');\n        }\n      }\n    }\n  };\n  var _calculateHeight = function _calculateHeight() {\n    var height = parseFloat(KTUtil.css(the.element, 'height'));\n    height = height + parseFloat(KTUtil.css(the.element, 'margin-top'));\n    height = height + parseFloat(KTUtil.css(the.element, 'margin-bottom'));\n    if (KTUtil.css(element, 'border-top')) {\n      height = height + parseFloat(KTUtil.css(the.element, 'border-top'));\n    }\n    if (KTUtil.css(element, 'border-bottom')) {\n      height = height + parseFloat(KTUtil.css(the.element, 'border-bottom'));\n    }\n    return height;\n  };\n  var _getOption = function _getOption(name) {\n    if (the.element.hasAttribute('data-kt-sticky-' + name) === true) {\n      var attr = the.element.getAttribute('data-kt-sticky-' + name);\n      var value = KTUtil.getResponsiveValue(attr);\n      if (value !== null && String(value) === 'true') {\n        value = true;\n      } else if (value !== null && String(value) === 'false') {\n        value = false;\n      }\n      return value;\n    } else {\n      var optionName = KTUtil.snakeToCamel(name);\n      if (the.options[optionName]) {\n        return KTUtil.getResponsiveValue(the.options[optionName]);\n      } else {\n        return null;\n      }\n    }\n  };\n  var _destroy = function _destroy() {\n    window.removeEventListener('scroll', _scroll);\n    KTUtil.data(the.element).remove('sticky');\n  };\n\n  // Construct Class\n  _construct();\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Methods\n  the.update = function () {\n    if (body.hasAttribute(the.attributeName) === true) {\n      _disable();\n      body.removeAttribute(the.attributeName);\n      body.removeAttribute(the.attributeName2);\n      _enable(true);\n      body.setAttribute(the.attributeName, 'on');\n      body.setAttribute(the.attributeName2, 'on');\n    }\n  };\n  the.destroy = function () {\n    return _destroy();\n  };\n\n  // Event API\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n};\n\n// Static methods\nKTSticky.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('sticky')) {\n    return KTUtil.data(element).get('sticky');\n  } else {\n    return null;\n  }\n};\n\n// Create instances\nKTSticky.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-sticky=\"true\"]';\n  var body = document.getElementsByTagName(\"BODY\")[0];\n\n  // Initialize Menus\n  var elements = body.querySelectorAll(selector);\n  var sticky;\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      sticky = new KTSticky(elements[i]);\n    }\n  }\n};\n\n// Window resize handler\nwindow.addEventListener('resize', function () {\n  var timer;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n  KTUtil.throttle(timer, function () {\n    // Locate and update Offcanvas instances on window resize\n    var elements = body.querySelectorAll('[data-kt-sticky=\"true\"]');\n    if (elements && elements.length > 0) {\n      for (var i = 0, len = elements.length; i < len; i++) {\n        var sticky = KTSticky.getInstance(elements[i]);\n        if (sticky) {\n          sticky.update();\n        }\n      }\n    }\n  }, 200);\n});\n\n// Global initialization\nKTSticky.init = function () {\n  KTSticky.createInstances();\n};\n\n// On document ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTSticky.init);\n} else {\n  KTSticky.init();\n}\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTSticky;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/components/sticky.js\n");

/***/ }),

/***/ "./resources/src/js/components/swapper.js":
/*!************************************************!*\
  !*** ./resources/src/js/components/swapper.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTSwapper = function KTSwapper(element, options) {\n  ////////////////////////////\n  // ** Private Variables  ** //\n  ////////////////////////////\n  var the = this;\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  }\n\n  // Default Options\n  var defaultOptions = {\n    mode: 'append'\n  };\n\n  ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('swapper') === true) {\n      the = KTUtil.data(element).get('swapper');\n    } else {\n      _init();\n    }\n  };\n  var _init = function _init() {\n    the.element = element;\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n\n    // Set initialized\n    the.element.setAttribute('data-kt-swapper', 'true');\n\n    // Initial update\n    _update();\n\n    // Bind Instance\n    KTUtil.data(the.element).set('swapper', the);\n  };\n  var _update = function _update(e) {\n    var parentSelector = _getOption('parent');\n    var mode = _getOption('mode');\n    var parentElement = parentSelector ? document.querySelector(parentSelector) : null;\n    if (parentElement && element.parentNode !== parentElement) {\n      if (mode === 'prepend') {\n        parentElement.prepend(element);\n      } else if (mode === 'append') {\n        parentElement.append(element);\n      }\n    }\n  };\n  var _getOption = function _getOption(name) {\n    if (the.element.hasAttribute('data-kt-swapper-' + name) === true) {\n      var attr = the.element.getAttribute('data-kt-swapper-' + name);\n      var value = KTUtil.getResponsiveValue(attr);\n      if (value !== null && String(value) === 'true') {\n        value = true;\n      } else if (value !== null && String(value) === 'false') {\n        value = false;\n      }\n      return value;\n    } else {\n      var optionName = KTUtil.snakeToCamel(name);\n      if (the.options[optionName]) {\n        return KTUtil.getResponsiveValue(the.options[optionName]);\n      } else {\n        return null;\n      }\n    }\n  };\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('swapper');\n  };\n\n  // Construct Class\n  _construct();\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Methods\n  the.update = function () {\n    _update();\n  };\n  the.destroy = function () {\n    return _destroy();\n  };\n\n  // Event API\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n};\n\n// Static methods\nKTSwapper.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('swapper')) {\n    return KTUtil.data(element).get('swapper');\n  } else {\n    return null;\n  }\n};\n\n// Create instances\nKTSwapper.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-swapper=\"true\"]';\n  // Initialize Menus\n  var elements = document.querySelectorAll(selector);\n  var swapper;\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      swapper = new KTSwapper(elements[i]);\n    }\n  }\n};\n\n// Window resize handler\nwindow.addEventListener('resize', function () {\n  var timer;\n  KTUtil.throttle(timer, function () {\n    // Locate and update Offcanvas instances on window resize\n    var elements = document.querySelectorAll('[data-kt-swapper=\"true\"]');\n    if (elements && elements.length > 0) {\n      for (var i = 0, len = elements.length; i < len; i++) {\n        var swapper = KTSwapper.getInstance(elements[i]);\n        if (swapper) {\n          swapper.update();\n        }\n      }\n    }\n  }, 200);\n});\n\n// Global initialization\nKTSwapper.init = function () {\n  KTSwapper.createInstances();\n};\n\n// On document ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTSwapper.init);\n} else {\n  KTSwapper.init();\n}\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTSwapper;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/components/swapper.js\n");

/***/ }),

/***/ "./resources/src/js/components/toggle.js":
/*!***********************************************!*\
  !*** ./resources/src/js/components/toggle.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTToggle = function KTToggle(element, options) {\n  ////////////////////////////\n  // ** Private variables  ** //\n  ////////////////////////////\n  var the = this;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n  if (!element) {\n    return;\n  }\n\n  // Default Options\n  var defaultOptions = {\n    saveState: true\n  };\n\n  ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('toggle') === true) {\n      the = KTUtil.data(element).get('toggle');\n    } else {\n      _init();\n    }\n  };\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('toggle');\n\n    // Elements\n    the.element = element;\n    the.target = document.querySelector(the.element.getAttribute('data-kt-toggle-target')) ? document.querySelector(the.element.getAttribute('data-kt-toggle-target')) : the.element;\n    the.state = the.element.hasAttribute('data-kt-toggle-state') ? the.element.getAttribute('data-kt-toggle-state') : '';\n    the.mode = the.element.hasAttribute('data-kt-toggle-mode') ? the.element.getAttribute('data-kt-toggle-mode') : '';\n    the.attribute = 'data-kt-' + the.element.getAttribute('data-kt-toggle-name');\n\n    // Event Handlers\n    _handlers();\n\n    // Bind Instance\n    KTUtil.data(the.element).set('toggle', the);\n  };\n  var _handlers = function _handlers() {\n    KTUtil.addEvent(the.element, 'click', function (e) {\n      e.preventDefault();\n      if (the.mode !== '') {\n        if (the.mode === 'off' && _isEnabled() === false) {\n          _toggle();\n        } else if (the.mode === 'on' && _isEnabled() === true) {\n          _toggle();\n        }\n      } else {\n        _toggle();\n      }\n    });\n  };\n\n  // Event handlers\n  var _toggle = function _toggle() {\n    // Trigger \"after.toggle\" event\n    KTEventHandler.trigger(the.element, 'kt.toggle.change', the);\n    if (_isEnabled()) {\n      _disable();\n    } else {\n      _enable();\n    }\n\n    // Trigger \"before.toggle\" event\n    KTEventHandler.trigger(the.element, 'kt.toggle.changed', the);\n    return the;\n  };\n  var _enable = function _enable() {\n    if (_isEnabled() === true) {\n      return;\n    }\n    KTEventHandler.trigger(the.element, 'kt.toggle.enable', the);\n    the.target.setAttribute(the.attribute, 'on');\n    if (the.state.length > 0) {\n      the.element.classList.add(the.state);\n    }\n    if (typeof KTCookie !== 'undefined' && the.options.saveState === true) {\n      KTCookie.set(the.attribute, 'on');\n    }\n    KTEventHandler.trigger(the.element, 'kt.toggle.enabled', the);\n    return the;\n  };\n  var _disable = function _disable() {\n    if (_isEnabled() === false) {\n      return;\n    }\n    KTEventHandler.trigger(the.element, 'kt.toggle.disable', the);\n    the.target.removeAttribute(the.attribute);\n    if (the.state.length > 0) {\n      the.element.classList.remove(the.state);\n    }\n    if (typeof KTCookie !== 'undefined' && the.options.saveState === true) {\n      KTCookie.remove(the.attribute);\n    }\n    KTEventHandler.trigger(the.element, 'kt.toggle.disabled', the);\n    return the;\n  };\n  var _isEnabled = function _isEnabled() {\n    return String(the.target.getAttribute(the.attribute)).toLowerCase() === 'on';\n  };\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('toggle');\n  };\n\n  // Construct class\n  _construct();\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Plugin API\n  the.toggle = function () {\n    return _toggle();\n  };\n  the.enable = function () {\n    return _enable();\n  };\n  the.disable = function () {\n    return _disable();\n  };\n  the.isEnabled = function () {\n    return _isEnabled();\n  };\n  the.goElement = function () {\n    return the.element;\n  };\n  the.destroy = function () {\n    return _destroy();\n  };\n\n  // Event API\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n};\n\n// Static methods\nKTToggle.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('toggle')) {\n    return KTUtil.data(element).get('toggle');\n  } else {\n    return null;\n  }\n};\n\n// Create instances\nKTToggle.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-toggle]';\n  var body = document.getElementsByTagName(\"BODY\")[0];\n\n  // Get instances\n  var elements = body.querySelectorAll(selector);\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      // Initialize instances\n      new KTToggle(elements[i]);\n    }\n  }\n};\n\n// Global initialization\nKTToggle.init = function () {\n  KTToggle.createInstances();\n};\n\n// On document ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTToggle.init);\n} else {\n  KTToggle.init();\n}\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTToggle;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/components/toggle.js\n");

/***/ }),

/***/ "./resources/src/js/components/util.js":
/*!*********************************************!*\
  !*** ./resources/src/js/components/util.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\r\n * @class KTUtil  base utilize class that privides helper functions\r\n */\n\n// Polyfills\n\n// Element.matches() polyfill\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nif (!Element.prototype.matches) {\n  Element.prototype.matches = function (s) {\n    var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n      i = matches.length;\n    while (--i >= 0 && matches.item(i) !== this) {}\n    return i > -1;\n  };\n}\n\n/**\r\n * Element.closest() polyfill\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\r\n */\nif (!Element.prototype.closest) {\n  Element.prototype.closest = function (s) {\n    var el = this;\n    var ancestor = this;\n    if (!document.documentElement.contains(el)) return null;\n    do {\n      if (ancestor.matches(s)) return ancestor;\n      ancestor = ancestor.parentElement;\n    } while (ancestor !== null);\n    return null;\n  };\n}\n\n/**\r\n * ChildNode.remove() polyfill\r\n * https://gomakethings.com/removing-an-element-from-the-dom-the-es6-way/\r\n * @author Chris Ferdinandi\r\n * @license MIT\r\n */\n(function (elem) {\n  for (var i = 0; i < elem.length; i++) {\n    if (!window[elem[i]] || 'remove' in window[elem[i]].prototype) continue;\n    window[elem[i]].prototype.remove = function () {\n      this.parentNode.removeChild(this);\n    };\n  }\n})(['Element', 'CharacterData', 'DocumentType']);\n\n//\n// requestAnimationFrame polyfill by Erik Möller.\n//  With fixes from Paul Irish and Tino Zijdel\n//\n//  http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n//  http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n//\n//  MIT license\n//\n(function () {\n  var lastTime = 0;\n  var vendors = ['webkit', 'moz'];\n  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n  }\n  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback) {\n    var currTime = new Date().getTime();\n    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n    var id = window.setTimeout(function () {\n      callback(currTime + timeToCall);\n    }, timeToCall);\n    lastTime = currTime + timeToCall;\n    return id;\n  };\n  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n    clearTimeout(id);\n  };\n})();\n\n// Source: https://github.com/jserz/js_piece/blob/master/DOM/ParentNode/prepend()/prepend().md\n(function (arr) {\n  arr.forEach(function (item) {\n    if (item.hasOwnProperty('prepend')) {\n      return;\n    }\n    Object.defineProperty(item, 'prepend', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function prepend() {\n        var argArr = Array.prototype.slice.call(arguments),\n          docFrag = document.createDocumentFragment();\n        argArr.forEach(function (argItem) {\n          var isNode = argItem instanceof Node;\n          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n        });\n        this.insertBefore(docFrag, this.firstChild);\n      }\n    });\n  });\n})([Element.prototype, Document.prototype, DocumentFragment.prototype]);\n\n// getAttributeNames\nif (Element.prototype.getAttributeNames == undefined) {\n  Element.prototype.getAttributeNames = function () {\n    var attributes = this.attributes;\n    var length = attributes.length;\n    var result = new Array(length);\n    for (var i = 0; i < length; i++) {\n      result[i] = attributes[i].name;\n    }\n    return result;\n  };\n}\n\n// Global variables\nwindow.KTUtilElementDataStore = {};\nwindow.KTUtilElementDataStoreID = 0;\nwindow.KTUtilDelegatedEventHandlers = {};\nvar KTUtil = function () {\n  var resizeHandlers = [];\n\n  /**\r\n   * Handle window resize event with some\r\n   * delay to attach event handlers upon resize complete\r\n   */\n  var _windowResizeHandler = function _windowResizeHandler() {\n    var _runResizeHandlers = function _runResizeHandlers() {\n      // reinitialize other subscribed elements\n      for (var i = 0; i < resizeHandlers.length; i++) {\n        var each = resizeHandlers[i];\n        each.call();\n      }\n    };\n    var timer;\n    window.addEventListener('resize', function () {\n      KTUtil.throttle(timer, function () {\n        _runResizeHandlers();\n      }, 200);\n    });\n  };\n  return {\n    /**\r\n     * Class main initializer.\r\n     * @param {object} settings.\r\n     * @returns null\r\n     */\n    //main function to initiate the theme\n    init: function init(settings) {\n      _windowResizeHandler();\n    },\n    /**\r\n     * Adds window resize event handler.\r\n     * @param {function} callback function.\r\n     */\n    addResizeHandler: function addResizeHandler(callback) {\n      resizeHandlers.push(callback);\n    },\n    /**\r\n     * Removes window resize event handler.\r\n     * @param {function} callback function.\r\n     */\n    removeResizeHandler: function removeResizeHandler(callback) {\n      for (var i = 0; i < resizeHandlers.length; i++) {\n        if (callback === resizeHandlers[i]) {\n          delete resizeHandlers[i];\n        }\n      }\n    },\n    /**\r\n     * Trigger window resize handlers.\r\n     */\n    runResizeHandlers: function runResizeHandlers() {\n      _runResizeHandlers();\n    },\n    resize: function resize() {\n      if (typeof Event === 'function') {\n        // modern browsers\n        window.dispatchEvent(new Event('resize'));\n      } else {\n        // for IE and other old browsers\n        // causes deprecation warning on modern browsers\n        var evt = window.document.createEvent('UIEvents');\n        evt.initUIEvent('resize', true, false, window, 0);\n        window.dispatchEvent(evt);\n      }\n    },\n    /**\r\n     * Get GET parameter value from URL.\r\n     * @param {string} paramName Parameter name.\r\n     * @returns {string}\r\n     */\n    getURLParam: function getURLParam(paramName) {\n      var searchString = window.location.search.substring(1),\n        i,\n        val,\n        params = searchString.split(\"&\");\n      for (i = 0; i < params.length; i++) {\n        val = params[i].split(\"=\");\n        if (val[0] == paramName) {\n          return unescape(val[1]);\n        }\n      }\n      return null;\n    },\n    /**\r\n     * Checks whether current device is mobile touch.\r\n     * @returns {boolean}\r\n     */\n    isMobileDevice: function isMobileDevice() {\n      var test = this.getViewPort().width < this.getBreakpoint('lg') ? true : false;\n      if (test === false) {\n        // For use within normal web clients\n        test = navigator.userAgent.match(/iPad/i) != null;\n      }\n      return test;\n    },\n    /**\r\n     * Checks whether current device is desktop.\r\n     * @returns {boolean}\r\n     */\n    isDesktopDevice: function isDesktopDevice() {\n      return KTUtil.isMobileDevice() ? false : true;\n    },\n    /**\r\n     * Gets browser window viewport size. Ref:\r\n     * http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/\r\n     * @returns {object}\r\n     */\n    getViewPort: function getViewPort() {\n      var e = window,\n        a = 'inner';\n      if (!('innerWidth' in window)) {\n        a = 'client';\n        e = document.documentElement || document.body;\n      }\n      return {\n        width: e[a + 'Width'],\n        height: e[a + 'Height']\n      };\n    },\n    /**\r\n           * Checks whether given device mode is currently activated.\r\n           * @param {string} mode Responsive mode name(e.g: desktop,\r\n           *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)\r\n           * @returns {boolean}\r\n           */\n    isBreakpointUp: function isBreakpointUp(mode) {\n      var width = this.getViewPort().width;\n      var breakpoint = this.getBreakpoint(mode);\n      return width >= breakpoint;\n    },\n    isBreakpointDown: function isBreakpointDown(mode) {\n      var width = this.getViewPort().width;\n      var breakpoint = this.getBreakpoint(mode);\n      return width < breakpoint;\n    },\n    getViewportWidth: function getViewportWidth() {\n      return this.getViewPort().width;\n    },\n    /**\r\n     * Generates unique ID for give prefix.\r\n     * @param {string} prefix Prefix for generated ID\r\n     * @returns {boolean}\r\n     */\n    getUniqueId: function getUniqueId(prefix) {\n      return prefix + Math.floor(Math.random() * new Date().getTime());\n    },\n    /**\r\n     * Gets window width for give breakpoint mode.\r\n     * @param {string} mode Responsive mode name(e.g: xl, lg, md, sm)\r\n     * @returns {number}\r\n     */\n    getBreakpoint: function getBreakpoint(breakpoint) {\n      var value = this.getCssVariableValue('--bs-' + breakpoint);\n      if (value) {\n        value = parseInt(value.trim());\n      }\n      return value;\n    },\n    /**\r\n     * Checks whether object has property matchs given key path.\r\n     * @param {object} obj Object contains values paired with given key path\r\n     * @param {string} keys Keys path seperated with dots\r\n     * @returns {object}\r\n     */\n    isset: function isset(obj, keys) {\n      var stone;\n      keys = keys || '';\n      if (keys.indexOf('[') !== -1) {\n        throw new Error('Unsupported object path notation.');\n      }\n      keys = keys.split('.');\n      do {\n        if (obj === undefined) {\n          return false;\n        }\n        stone = keys.shift();\n        if (!obj.hasOwnProperty(stone)) {\n          return false;\n        }\n        obj = obj[stone];\n      } while (keys.length);\n      return true;\n    },\n    /**\r\n     * Gets highest z-index of the given element parents\r\n     * @param {object} el jQuery element object\r\n     * @returns {number}\r\n     */\n    getHighestZindex: function getHighestZindex(el) {\n      var position, value;\n      while (el && el !== document) {\n        // Ignore z-index if position is set to a value where z-index is ignored by the browser\n        // This makes behavior of this function consistent across browsers\n        // WebKit always returns auto if the element is positioned\n        position = KTUtil.css(el, 'position');\n        if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n          // IE returns 0 when zIndex is not specified\n          // other browsers return a string\n          // we ignore the case of nested elements with an explicit value of 0\n          // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n          value = parseInt(KTUtil.css(el, 'z-index'));\n          if (!isNaN(value) && value !== 0) {\n            return value;\n          }\n        }\n        el = el.parentNode;\n      }\n      return 1;\n    },\n    /**\r\n     * Checks whether the element has any parent with fixed positionfreg\r\n     * @param {object} el jQuery element object\r\n     * @returns {boolean}\r\n     */\n    hasFixedPositionedParent: function hasFixedPositionedParent(el) {\n      var position;\n      while (el && el !== document) {\n        position = KTUtil.css(el, 'position');\n        if (position === \"fixed\") {\n          return true;\n        }\n        el = el.parentNode;\n      }\n      return false;\n    },\n    /**\r\n     * Simulates delay\r\n     */\n    sleep: function sleep(milliseconds) {\n      var start = new Date().getTime();\n      for (var i = 0; i < 1e7; i++) {\n        if (new Date().getTime() - start > milliseconds) {\n          break;\n        }\n      }\n    },\n    /**\r\n     * Gets randomly generated integer value within given min and max range\r\n     * @param {number} min Range start value\r\n     * @param {number} max Range end value\r\n     * @returns {number}\r\n     */\n    getRandomInt: function getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n    /**\r\n     * Checks whether Angular library is included\r\n     * @returns {boolean}\r\n     */\n    isAngularVersion: function isAngularVersion() {\n      return window.Zone !== undefined ? true : false;\n    },\n    // Deep extend:  $.extend(true, {}, objA, objB);\n    deepExtend: function deepExtend(out) {\n      out = out || {};\n      for (var i = 1; i < arguments.length; i++) {\n        var obj = arguments[i];\n        if (!obj) continue;\n        for (var key in obj) {\n          if (!obj.hasOwnProperty(key)) {\n            continue;\n          }\n\n          // based on https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\n          if (Object.prototype.toString.call(obj[key]) === '[object Object]') {\n            out[key] = KTUtil.deepExtend(out[key], obj[key]);\n            continue;\n          }\n          out[key] = obj[key];\n        }\n      }\n      return out;\n    },\n    // extend:  $.extend({}, objA, objB);\n    extend: function extend(out) {\n      out = out || {};\n      for (var i = 1; i < arguments.length; i++) {\n        if (!arguments[i]) continue;\n        for (var key in arguments[i]) {\n          if (arguments[i].hasOwnProperty(key)) out[key] = arguments[i][key];\n        }\n      }\n      return out;\n    },\n    getBody: function getBody() {\n      return document.getElementsByTagName('body')[0];\n    },\n    /**\r\n     * Checks whether the element has given classes\r\n     * @param {object} el jQuery element object\r\n     * @param {string} Classes string\r\n     * @returns {boolean}\r\n     */\n    hasClasses: function hasClasses(el, classes) {\n      if (!el) {\n        return;\n      }\n      var classesArr = classes.split(\" \");\n      for (var i = 0; i < classesArr.length; i++) {\n        if (KTUtil.hasClass(el, KTUtil.trim(classesArr[i])) == false) {\n          return false;\n        }\n      }\n      return true;\n    },\n    hasClass: function hasClass(el, className) {\n      if (!el) {\n        return;\n      }\n      return el.classList ? el.classList.contains(className) : new RegExp('\\\\b' + className + '\\\\b').test(el.className);\n    },\n    addClass: function addClass(el, className) {\n      if (!el || typeof className === 'undefined') {\n        return;\n      }\n      var classNames = className.split(' ');\n      if (el.classList) {\n        for (var i = 0; i < classNames.length; i++) {\n          if (classNames[i] && classNames[i].length > 0) {\n            el.classList.add(KTUtil.trim(classNames[i]));\n          }\n        }\n      } else if (!KTUtil.hasClass(el, className)) {\n        for (var x = 0; x < classNames.length; x++) {\n          el.className += ' ' + KTUtil.trim(classNames[x]);\n        }\n      }\n    },\n    removeClass: function removeClass(el, className) {\n      if (!el || typeof className === 'undefined') {\n        return;\n      }\n      var classNames = className.split(' ');\n      if (el.classList) {\n        for (var i = 0; i < classNames.length; i++) {\n          el.classList.remove(KTUtil.trim(classNames[i]));\n        }\n      } else if (KTUtil.hasClass(el, className)) {\n        for (var x = 0; x < classNames.length; x++) {\n          el.className = el.className.replace(new RegExp('\\\\b' + KTUtil.trim(classNames[x]) + '\\\\b', 'g'), '');\n        }\n      }\n    },\n    triggerCustomEvent: function triggerCustomEvent(el, eventName, data) {\n      var event;\n      if (window.CustomEvent) {\n        event = new CustomEvent(eventName, {\n          detail: data\n        });\n      } else {\n        event = document.createEvent('CustomEvent');\n        event.initCustomEvent(eventName, true, true, data);\n      }\n      el.dispatchEvent(event);\n    },\n    triggerEvent: function triggerEvent(node, eventName) {\n      // Make sure we use the ownerDocument from the provided node to avoid cross-window problems\n      var doc;\n      if (node.ownerDocument) {\n        doc = node.ownerDocument;\n      } else if (node.nodeType == 9) {\n        // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n        doc = node;\n      } else {\n        throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n      }\n      if (node.dispatchEvent) {\n        // Gecko-style approach (now the standard) takes more work\n        var eventClass = \"\";\n\n        // Different events have different event classes.\n        // If this switch statement can't map an eventName to an eventClass,\n        // the event firing is going to fail.\n        switch (eventName) {\n          case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n          case \"mouseenter\":\n          case \"mouseleave\":\n          case \"mousedown\":\n          case \"mouseup\":\n            eventClass = \"MouseEvents\";\n            break;\n          case \"focus\":\n          case \"change\":\n          case \"blur\":\n          case \"select\":\n            eventClass = \"HTMLEvents\";\n            break;\n          default:\n            throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n            break;\n        }\n        var event = doc.createEvent(eventClass);\n        var bubbles = eventName == \"change\" ? false : true;\n        event.initEvent(eventName, bubbles, true); // All events created as bubbling and cancelable.\n\n        event.synthetic = true; // allow detection of synthetic events\n        // The second parameter says go ahead with the default action\n        node.dispatchEvent(event, true);\n      } else if (node.fireEvent) {\n        // IE-old school style\n        var event = doc.createEventObject();\n        event.synthetic = true; // allow detection of synthetic events\n        node.fireEvent(\"on\" + eventName, event);\n      }\n    },\n    index: function index(el) {\n      var c = el.parentNode.children,\n        i = 0;\n      for (; i < c.length; i++) if (c[i] == el) return i;\n    },\n    trim: function trim(string) {\n      return string.trim();\n    },\n    eventTriggered: function eventTriggered(e) {\n      if (e.currentTarget.dataset.triggered) {\n        return true;\n      } else {\n        e.currentTarget.dataset.triggered = true;\n        return false;\n      }\n    },\n    remove: function remove(el) {\n      if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n      }\n    },\n    find: function find(parent, query) {\n      if (parent !== null) {\n        return parent.querySelector(query);\n      } else {\n        return null;\n      }\n    },\n    findAll: function findAll(parent, query) {\n      if (parent !== null) {\n        return parent.querySelectorAll(query);\n      } else {\n        return null;\n      }\n    },\n    insertAfter: function insertAfter(el, referenceNode) {\n      return referenceNode.parentNode.insertBefore(el, referenceNode.nextSibling);\n    },\n    parents: function parents(elem, selector) {\n      // Set up a parent array\n      var parents = [];\n\n      // Push each parent element to the array\n      for (; elem && elem !== document; elem = elem.parentNode) {\n        if (selector) {\n          if (elem.matches(selector)) {\n            parents.push(elem);\n          }\n          continue;\n        }\n        parents.push(elem);\n      }\n\n      // Return our parent array\n      return parents;\n    },\n    children: function children(el, selector, log) {\n      if (!el || !el.childNodes) {\n        return null;\n      }\n      var result = [],\n        i = 0,\n        l = el.childNodes.length;\n      for (var i; i < l; ++i) {\n        if (el.childNodes[i].nodeType == 1 && KTUtil.matches(el.childNodes[i], selector, log)) {\n          result.push(el.childNodes[i]);\n        }\n      }\n      return result;\n    },\n    child: function child(el, selector, log) {\n      var children = KTUtil.children(el, selector, log);\n      return children ? children[0] : null;\n    },\n    matches: function matches(el, selector, log) {\n      var p = Element.prototype;\n      var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {\n        return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n      };\n      if (el && el.tagName) {\n        return f.call(el, selector);\n      } else {\n        return false;\n      }\n    },\n    data: function data(el) {\n      return {\n        set: function set(name, data) {\n          if (!el) {\n            return;\n          }\n          if (el.customDataTag === undefined) {\n            window.KTUtilElementDataStoreID++;\n            el.customDataTag = window.KTUtilElementDataStoreID;\n          }\n          if (window.KTUtilElementDataStore[el.customDataTag] === undefined) {\n            window.KTUtilElementDataStore[el.customDataTag] = {};\n          }\n          window.KTUtilElementDataStore[el.customDataTag][name] = data;\n        },\n        get: function get(name) {\n          if (!el) {\n            return;\n          }\n          if (el.customDataTag === undefined) {\n            return null;\n          }\n          return this.has(name) ? window.KTUtilElementDataStore[el.customDataTag][name] : null;\n        },\n        has: function has(name) {\n          if (!el) {\n            return false;\n          }\n          if (el.customDataTag === undefined) {\n            return false;\n          }\n          return window.KTUtilElementDataStore[el.customDataTag] && window.KTUtilElementDataStore[el.customDataTag][name] ? true : false;\n        },\n        remove: function remove(name) {\n          if (el && this.has(name)) {\n            delete window.KTUtilElementDataStore[el.customDataTag][name];\n          }\n        }\n      };\n    },\n    outerWidth: function outerWidth(el, margin) {\n      var width;\n      if (margin === true) {\n        width = parseFloat(el.offsetWidth);\n        width += parseFloat(KTUtil.css(el, 'margin-left')) + parseFloat(KTUtil.css(el, 'margin-right'));\n        return parseFloat(width);\n      } else {\n        width = parseFloat(el.offsetWidth);\n        return width;\n      }\n    },\n    offset: function offset(el) {\n      var rect, win;\n      if (!el) {\n        return;\n      }\n\n      // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n\n      if (!el.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n\n      // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n      rect = el.getBoundingClientRect();\n      win = el.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset,\n        right: window.innerWidth - (el.offsetLeft + el.offsetWidth)\n      };\n    },\n    height: function height(el) {\n      return KTUtil.css(el, 'height');\n    },\n    outerHeight: function outerHeight(el, withMargin) {\n      var height = el.offsetHeight;\n      var style;\n      if (typeof withMargin !== 'undefined' && withMargin === true) {\n        style = getComputedStyle(el);\n        height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n        return height;\n      } else {\n        return height;\n      }\n    },\n    visible: function visible(el) {\n      return !(el.offsetWidth === 0 && el.offsetHeight === 0);\n    },\n    attr: function attr(el, name, value) {\n      if (el == undefined) {\n        return;\n      }\n      if (value !== undefined) {\n        el.setAttribute(name, value);\n      } else {\n        return el.getAttribute(name);\n      }\n    },\n    hasAttr: function hasAttr(el, name) {\n      if (el == undefined) {\n        return;\n      }\n      return el.getAttribute(name) ? true : false;\n    },\n    removeAttr: function removeAttr(el, name) {\n      if (el == undefined) {\n        return;\n      }\n      el.removeAttribute(name);\n    },\n    animate: function animate(from, to, duration, update, easing, done) {\n      /**\r\n       * TinyAnimate.easings\r\n       *  Adapted from jQuery Easing\r\n       */\n      var easings = {};\n      var easing;\n      easings.linear = function (t, b, c, d) {\n        return c * t / d + b;\n      };\n      easing = easings.linear;\n\n      // Early bail out if called incorrectly\n      if (typeof from !== 'number' || typeof to !== 'number' || typeof duration !== 'number' || typeof update !== 'function') {\n        return;\n      }\n\n      // Create mock done() function if necessary\n      if (typeof done !== 'function') {\n        done = function done() {};\n      }\n\n      // Pick implementation (requestAnimationFrame | setTimeout)\n      var rAF = window.requestAnimationFrame || function (callback) {\n        window.setTimeout(callback, 1000 / 50);\n      };\n\n      // Animation loop\n      var canceled = false;\n      var change = to - from;\n      function loop(timestamp) {\n        var time = (timestamp || +new Date()) - start;\n        if (time >= 0) {\n          update(easing(time, from, change, duration));\n        }\n        if (time >= 0 && time >= duration) {\n          update(to);\n          done();\n        } else {\n          rAF(loop);\n        }\n      }\n      update(from);\n\n      // Start animation loop\n      var start = window.performance && window.performance.now ? window.performance.now() : +new Date();\n      rAF(loop);\n    },\n    actualCss: function actualCss(el, prop, cache) {\n      var css = '';\n      if (el instanceof HTMLElement === false) {\n        return;\n      }\n      if (!el.getAttribute('kt-hidden-' + prop) || cache === false) {\n        var value;\n\n        // the element is hidden so:\n        // making the el block so we can meassure its height but still be hidden\n        css = el.style.cssText;\n        el.style.cssText = 'position: absolute; visibility: hidden; display: block;';\n        if (prop == 'width') {\n          value = el.offsetWidth;\n        } else if (prop == 'height') {\n          value = el.offsetHeight;\n        }\n        el.style.cssText = css;\n\n        // store it in cache\n        el.setAttribute('kt-hidden-' + prop, value);\n        return parseFloat(value);\n      } else {\n        // store it in cache\n        return parseFloat(el.getAttribute('kt-hidden-' + prop));\n      }\n    },\n    actualHeight: function actualHeight(el, cache) {\n      return KTUtil.actualCss(el, 'height', cache);\n    },\n    actualWidth: function actualWidth(el, cache) {\n      return KTUtil.actualCss(el, 'width', cache);\n    },\n    getScroll: function getScroll(element, method) {\n      // The passed in `method` value should be 'Top' or 'Left'\n      method = 'scroll' + method;\n      return element == window || element == document ? self[method == 'scrollTop' ? 'pageYOffset' : 'pageXOffset'] || browserSupportsBoxModel && document.documentElement[method] || document.body[method] : element[method];\n    },\n    css: function css(el, styleProp, value, important) {\n      if (!el) {\n        return;\n      }\n      if (value !== undefined) {\n        if (important === true) {\n          el.style.setProperty(styleProp, value, 'important');\n        } else {\n          el.style[styleProp] = value;\n        }\n      } else {\n        var defaultView = (el.ownerDocument || document).defaultView;\n\n        // W3C standard way:\n        if (defaultView && defaultView.getComputedStyle) {\n          // sanitize property name to css notation\n          // (hyphen separated words eg. font-Size)\n          styleProp = styleProp.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n          return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n        } else if (el.currentStyle) {\n          // IE\n          // sanitize property name to camelCase\n          styleProp = styleProp.replace(/\\-(\\w)/g, function (str, letter) {\n            return letter.toUpperCase();\n          });\n          value = el.currentStyle[styleProp];\n\n          // convert other units to pixels on IE\n          if (/^\\d+(em|pt|%|ex)?$/i.test(value)) {\n            return function (value) {\n              var oldLeft = el.style.left,\n                oldRsLeft = el.runtimeStyle.left;\n              el.runtimeStyle.left = el.currentStyle.left;\n              el.style.left = value || 0;\n              value = el.style.pixelLeft + \"px\";\n              el.style.left = oldLeft;\n              el.runtimeStyle.left = oldRsLeft;\n              return value;\n            }(value);\n          }\n          return value;\n        }\n      }\n    },\n    slide: function slide(el, dir, speed, callback, recalcMaxHeight) {\n      if (!el || dir == 'up' && KTUtil.visible(el) === false || dir == 'down' && KTUtil.visible(el) === true) {\n        return;\n      }\n      speed = speed ? speed : 600;\n      var calcHeight = KTUtil.actualHeight(el);\n      var calcPaddingTop = false;\n      var calcPaddingBottom = false;\n      if (KTUtil.css(el, 'padding-top') && KTUtil.data(el).has('slide-padding-top') !== true) {\n        KTUtil.data(el).set('slide-padding-top', KTUtil.css(el, 'padding-top'));\n      }\n      if (KTUtil.css(el, 'padding-bottom') && KTUtil.data(el).has('slide-padding-bottom') !== true) {\n        KTUtil.data(el).set('slide-padding-bottom', KTUtil.css(el, 'padding-bottom'));\n      }\n      if (KTUtil.data(el).has('slide-padding-top')) {\n        calcPaddingTop = parseInt(KTUtil.data(el).get('slide-padding-top'));\n      }\n      if (KTUtil.data(el).has('slide-padding-bottom')) {\n        calcPaddingBottom = parseInt(KTUtil.data(el).get('slide-padding-bottom'));\n      }\n      if (dir == 'up') {\n        // up\n        el.style.cssText = 'display: block; overflow: hidden;';\n        if (calcPaddingTop) {\n          KTUtil.animate(0, calcPaddingTop, speed, function (value) {\n            el.style.paddingTop = calcPaddingTop - value + 'px';\n          }, 'linear');\n        }\n        if (calcPaddingBottom) {\n          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {\n            el.style.paddingBottom = calcPaddingBottom - value + 'px';\n          }, 'linear');\n        }\n        KTUtil.animate(0, calcHeight, speed, function (value) {\n          el.style.height = calcHeight - value + 'px';\n        }, 'linear', function () {\n          el.style.height = '';\n          el.style.display = 'none';\n          if (typeof callback === 'function') {\n            callback();\n          }\n        });\n      } else if (dir == 'down') {\n        // down\n        el.style.cssText = 'display: block; overflow: hidden;';\n        if (calcPaddingTop) {\n          KTUtil.animate(0, calcPaddingTop, speed, function (value) {\n            //\n            el.style.paddingTop = value + 'px';\n          }, 'linear', function () {\n            el.style.paddingTop = '';\n          });\n        }\n        if (calcPaddingBottom) {\n          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {\n            el.style.paddingBottom = value + 'px';\n          }, 'linear', function () {\n            el.style.paddingBottom = '';\n          });\n        }\n        KTUtil.animate(0, calcHeight, speed, function (value) {\n          el.style.height = value + 'px';\n        }, 'linear', function () {\n          el.style.height = '';\n          el.style.display = '';\n          el.style.overflow = '';\n          if (typeof callback === 'function') {\n            callback();\n          }\n        });\n      }\n    },\n    slideUp: function slideUp(el, speed, callback) {\n      KTUtil.slide(el, 'up', speed, callback);\n    },\n    slideDown: function slideDown(el, speed, callback) {\n      KTUtil.slide(el, 'down', speed, callback);\n    },\n    show: function show(el, display) {\n      if (typeof el !== 'undefined') {\n        el.style.display = display ? display : 'block';\n      }\n    },\n    hide: function hide(el) {\n      if (typeof el !== 'undefined') {\n        el.style.display = 'none';\n      }\n    },\n    addEvent: function addEvent(el, type, handler, one) {\n      if (typeof el !== 'undefined' && el !== null) {\n        el.addEventListener(type, handler);\n      }\n    },\n    removeEvent: function removeEvent(el, type, handler) {\n      if (el !== null) {\n        el.removeEventListener(type, handler);\n      }\n    },\n    on: function on(element, selector, event, handler) {\n      if (element === null) {\n        return;\n      }\n      var eventId = KTUtil.getUniqueId('event');\n      window.KTUtilDelegatedEventHandlers[eventId] = function (e) {\n        var targets = element.querySelectorAll(selector);\n        var target = e.target;\n        while (target && target !== element) {\n          for (var i = 0, j = targets.length; i < j; i++) {\n            if (target === targets[i]) {\n              handler.call(target, e);\n            }\n          }\n          target = target.parentNode;\n        }\n      };\n      KTUtil.addEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n      return eventId;\n    },\n    off: function off(element, event, eventId) {\n      if (!element || !window.KTUtilDelegatedEventHandlers[eventId]) {\n        return;\n      }\n      KTUtil.removeEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n      delete window.KTUtilDelegatedEventHandlers[eventId];\n    },\n    one: function onetime(el, type, callback) {\n      el.addEventListener(type, function callee(e) {\n        // remove event\n        if (e.target && e.target.removeEventListener) {\n          e.target.removeEventListener(e.type, callee);\n        }\n\n        // need to verify from https://themeforest.net/author_dashboard#comment_23615588\n        if (el && el.removeEventListener) {\n          e.currentTarget.removeEventListener(e.type, callee);\n        }\n\n        // call handler\n        return callback(e);\n      });\n    },\n    hash: function hash(str) {\n      var hash = 0,\n        i,\n        chr;\n      if (str.length === 0) return hash;\n      for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n      }\n\n      return hash;\n    },\n    animateClass: function animateClass(el, animationName, callback) {\n      var animation;\n      var animations = {\n        animation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        MozAnimation: 'mozAnimationEnd',\n        WebkitAnimation: 'webkitAnimationEnd',\n        msAnimation: 'msAnimationEnd'\n      };\n      for (var t in animations) {\n        if (el.style[t] !== undefined) {\n          animation = animations[t];\n        }\n      }\n      KTUtil.addClass(el, animationName);\n      KTUtil.one(el, animation, function () {\n        KTUtil.removeClass(el, animationName);\n      });\n      if (callback) {\n        KTUtil.one(el, animation, callback);\n      }\n    },\n    transitionEnd: function transitionEnd(el, callback) {\n      var transition;\n      var transitions = {\n        transition: 'transitionend',\n        OTransition: 'oTransitionEnd',\n        MozTransition: 'mozTransitionEnd',\n        WebkitTransition: 'webkitTransitionEnd',\n        msTransition: 'msTransitionEnd'\n      };\n      for (var t in transitions) {\n        if (el.style[t] !== undefined) {\n          transition = transitions[t];\n        }\n      }\n      KTUtil.one(el, transition, callback);\n    },\n    animationEnd: function animationEnd(el, callback) {\n      var animation;\n      var animations = {\n        animation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        MozAnimation: 'mozAnimationEnd',\n        WebkitAnimation: 'webkitAnimationEnd',\n        msAnimation: 'msAnimationEnd'\n      };\n      for (var t in animations) {\n        if (el.style[t] !== undefined) {\n          animation = animations[t];\n        }\n      }\n      KTUtil.one(el, animation, callback);\n    },\n    animateDelay: function animateDelay(el, value) {\n      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n      for (var i = 0; i < vendors.length; i++) {\n        KTUtil.css(el, vendors[i] + 'animation-delay', value);\n      }\n    },\n    animateDuration: function animateDuration(el, value) {\n      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n      for (var i = 0; i < vendors.length; i++) {\n        KTUtil.css(el, vendors[i] + 'animation-duration', value);\n      }\n    },\n    scrollTo: function scrollTo(target, offset, duration) {\n      var duration = duration ? duration : 500;\n      var targetPos = target ? KTUtil.offset(target).top : 0;\n      var scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n      var from, to;\n      if (offset) {\n        targetPos = targetPos - offset;\n      }\n      from = scrollPos;\n      to = targetPos;\n      KTUtil.animate(from, to, duration, function (value) {\n        document.documentElement.scrollTop = value;\n        document.body.parentNode.scrollTop = value;\n        document.body.scrollTop = value;\n      }); //, easing, done\n    },\n\n    scrollTop: function scrollTop(offset, duration) {\n      KTUtil.scrollTo(null, offset, duration);\n    },\n    isArray: function isArray(obj) {\n      return obj && Array.isArray(obj);\n    },\n    isEmpty: function isEmpty(obj) {\n      for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n          return false;\n        }\n      }\n      return true;\n    },\n    numberString: function numberString(nStr) {\n      nStr += '';\n      var x = nStr.split('.');\n      var x1 = x[0];\n      var x2 = x.length > 1 ? '.' + x[1] : '';\n      var rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n      }\n      return x1 + x2;\n    },\n    isRTL: function isRTL() {\n      return document.querySelector('html').getAttribute(\"direction\") === 'rtl';\n    },\n    snakeToCamel: function snakeToCamel(s) {\n      return s.replace(/(\\-\\w)/g, function (m) {\n        return m[1].toUpperCase();\n      });\n    },\n    filterBoolean: function filterBoolean(val) {\n      // Convert string boolean\n      if (val === true || val === 'true') {\n        return true;\n      }\n      if (val === false || val === 'false') {\n        return false;\n      }\n      return val;\n    },\n    setHTML: function setHTML(el, html) {\n      el.innerHTML = html;\n    },\n    getHTML: function getHTML(el) {\n      if (el) {\n        return el.innerHTML;\n      }\n    },\n    getDocumentHeight: function getDocumentHeight() {\n      var body = document.body;\n      var html = document.documentElement;\n      return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n    },\n    getScrollTop: function getScrollTop() {\n      return (document.scrollingElement || document.documentElement).scrollTop;\n    },\n    colorLighten: function colorLighten(color, amount) {\n      var addLight = function addLight(color, amount) {\n        var cc = parseInt(color, 16) + amount;\n        var c = cc > 255 ? 255 : cc;\n        c = c.toString(16).length > 1 ? c.toString(16) : \"0\".concat(c.toString(16));\n        return c;\n      };\n      color = color.indexOf(\"#\") >= 0 ? color.substring(1, color.length) : color;\n      amount = parseInt(255 * amount / 100);\n      return color = \"#\".concat(addLight(color.substring(0, 2), amount)).concat(addLight(color.substring(2, 4), amount)).concat(addLight(color.substring(4, 6), amount));\n    },\n    colorDarken: function colorDarken(color, amount) {\n      var subtractLight = function subtractLight(color, amount) {\n        var cc = parseInt(color, 16) - amount;\n        var c = cc < 0 ? 0 : cc;\n        c = c.toString(16).length > 1 ? c.toString(16) : \"0\".concat(c.toString(16));\n        return c;\n      };\n      color = color.indexOf(\"#\") >= 0 ? color.substring(1, color.length) : color;\n      amount = parseInt(255 * amount / 100);\n      return color = \"#\".concat(subtractLight(color.substring(0, 2), amount)).concat(subtractLight(color.substring(2, 4), amount)).concat(subtractLight(color.substring(4, 6), amount));\n    },\n    // Throttle function: Input as function which needs to be throttled and delay is the time interval in milliseconds\n    throttle: function throttle(timer, func, delay) {\n      // If setTimeout is already scheduled, no need to do anything\n      if (timer) {\n        return;\n      }\n\n      // Schedule a setTimeout after delay seconds\n      timer = setTimeout(function () {\n        func();\n\n        // Once setTimeout function execution is finished, timerId = undefined so that in <br>\n        // the next scroll event function execution can be scheduled by the setTimeout\n        timer = undefined;\n      }, delay);\n    },\n    // Debounce function: Input as function which needs to be debounced and delay is the debounced time in milliseconds\n    debounce: function debounce(timer, func, delay) {\n      // Cancels the setTimeout method execution\n      clearTimeout(timer);\n\n      // Executes the func after delay time.\n      timer = setTimeout(func, delay);\n    },\n    parseJson: function parseJson(value) {\n      if (typeof value === 'string') {\n        value = value.replace(/'/g, \"\\\"\");\n        var jsonStr = value.replace(/(\\w+:)|(\\w+ :)/g, function (matched) {\n          return '\"' + matched.substring(0, matched.length - 1) + '\":';\n        });\n        try {\n          value = JSON.parse(jsonStr);\n        } catch (e) {}\n      }\n      return value;\n    },\n    getResponsiveValue: function getResponsiveValue(value, defaultValue) {\n      var width = this.getViewPort().width;\n      var result;\n      value = KTUtil.parseJson(value);\n      if (_typeof(value) === 'object') {\n        var resultKey;\n        var resultBreakpoint = -1;\n        var breakpoint;\n        for (var key in value) {\n          if (key === 'default') {\n            breakpoint = 0;\n          } else {\n            breakpoint = this.getBreakpoint(key) ? this.getBreakpoint(key) : parseInt(key);\n          }\n          if (breakpoint <= width && breakpoint > resultBreakpoint) {\n            resultKey = key;\n            resultBreakpoint = breakpoint;\n          }\n        }\n        if (resultKey) {\n          result = value[resultKey];\n        } else {\n          result = value;\n        }\n      } else {\n        result = value;\n      }\n      return result;\n    },\n    each: function each(array, callback) {\n      return [].slice.call(array).map(callback);\n    },\n    getSelectorMatchValue: function getSelectorMatchValue(value) {\n      var result = null;\n      value = KTUtil.parseJson(value);\n      if (_typeof(value) === 'object') {\n        // Match condition\n        if (value['match'] !== undefined) {\n          var selector = Object.keys(value['match'])[0];\n          value = Object.values(value['match'])[0];\n          if (document.querySelector(selector) !== null) {\n            result = value;\n          }\n        }\n      } else {\n        result = value;\n      }\n      return result;\n    },\n    getConditionalValue: function getConditionalValue(value) {\n      var value = KTUtil.parseJson(value);\n      var result = KTUtil.getResponsiveValue(value);\n      if (result !== null && result['match'] !== undefined) {\n        result = KTUtil.getSelectorMatchValue(result);\n      }\n      if (result === null && value !== null && value['default'] !== undefined) {\n        result = value['default'];\n      }\n      return result;\n    },\n    getCssVariableValue: function getCssVariableValue(variableName) {\n      var hex = getComputedStyle(document.documentElement).getPropertyValue(variableName);\n      if (hex && hex.length > 0) {\n        hex = hex.trim();\n      }\n      return hex;\n    },\n    isInViewport: function isInViewport(element) {\n      var rect = element.getBoundingClientRect();\n      return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);\n    },\n    onDOMContentLoaded: function onDOMContentLoaded(callback) {\n      if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', callback);\n      } else {\n        callback();\n      }\n    },\n    inIframe: function inIframe() {\n      try {\n        return window.self !== window.top;\n      } catch (e) {\n        return true;\n      }\n    },\n    isHexColor: function isHexColor(code) {\n      return /^#[0-9A-F]{6}$/i.test(code);\n    }\n  };\n}();\n\n// Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTUtil;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/components/util.js\n");

/***/ }),

/***/ "./resources/src/js/layout/app.js":
/*!****************************************!*\
  !*** ./resources/src/js/layout/app.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Class definition\nvar KTApp = function () {\n  var select2FocusFixInitialized = false;\n  var _initPageLoader = function initPageLoader() {\n    // CSS3 Transitions only after page load(.page-loading class added to body tag and remove with JS on page load)\n    KTUtil.removeClass(document.body, 'page-loading');\n  };\n  var _initBootstrapTooltip = function initBootstrapTooltip(el, options) {\n    var delay = {};\n\n    // Handle delay options\n    if (el.hasAttribute('data-bs-delay-hide')) {\n      delay['hide'] = el.getAttribute('data-bs-delay-hide');\n    }\n    if (el.hasAttribute('data-bs-delay-show')) {\n      delay['show'] = el.getAttribute('data-bs-delay-show');\n    }\n    if (delay) {\n      options['delay'] = delay;\n    }\n\n    // Check dismiss options\n    if (el.hasAttribute('data-bs-dismiss') && el.getAttribute('data-bs-dismiss') == 'click') {\n      options['dismiss'] = 'click';\n    }\n\n    // Initialize popover\n    var tp = new bootstrap.Tooltip(el, options);\n\n    // Handle dismiss\n    if (options['dismiss'] && options['dismiss'] === 'click') {\n      // Hide popover on element click\n      el.addEventListener(\"click\", function (e) {\n        tp.hide();\n      });\n    }\n    return tp;\n  };\n  var _initBootstrapTooltips = function initBootstrapTooltips(el, options) {\n    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n      _initBootstrapTooltip(tooltipTriggerEl, {});\n    });\n  };\n  var _initBootstrapPopover = function initBootstrapPopover(el, options) {\n    var delay = {};\n\n    // Handle delay options\n    if (el.hasAttribute('data-bs-delay-hide')) {\n      delay['hide'] = el.getAttribute('data-bs-delay-hide');\n    }\n    if (el.hasAttribute('data-bs-delay-show')) {\n      delay['show'] = el.getAttribute('data-bs-delay-show');\n    }\n    if (delay) {\n      options['delay'] = delay;\n    }\n\n    // Handle dismiss option\n    if (el.getAttribute('data-bs-dismiss') == 'true') {\n      options['dismiss'] = true;\n    }\n    if (options['dismiss'] === true) {\n      options['template'] = '<div class=\"popover\" role=\"tooltip\"><div class=\"popover-arrow\"></div><span class=\"popover-dismiss btn btn-icon\"></span><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>';\n    }\n\n    // Initialize popover\n    var popover = new bootstrap.Popover(el, options);\n\n    // Handle dismiss click\n    if (options['dismiss'] === true) {\n      var dismissHandler = function dismissHandler(e) {\n        popover.hide();\n      };\n      el.addEventListener('shown.bs.popover', function () {\n        var dismissEl = document.getElementById(el.getAttribute('aria-describedby'));\n        dismissEl.addEventListener('click', dismissHandler);\n      });\n      el.addEventListener('hide.bs.popover', function () {\n        var dismissEl = document.getElementById(el.getAttribute('aria-describedby'));\n        dismissEl.removeEventListener('click', dismissHandler);\n      });\n    }\n    return popover;\n  };\n  var _initBootstrapPopovers = function initBootstrapPopovers() {\n    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\n    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {\n      _initBootstrapPopover(popoverTriggerEl, {});\n    });\n  };\n  var _initBootstrapScrollSpy = function initBootstrapScrollSpy() {\n    var elements = [].slice.call(document.querySelectorAll('[data-bs-spy=\"scroll\"]'));\n    elements.map(function (element) {\n      var sel = element.getAttribute('data-bs-target');\n      var scrollContent = document.querySelector(element.getAttribute('data-bs-target'));\n      var scrollSpy = bootstrap.ScrollSpy.getInstance(scrollContent);\n      if (scrollSpy) {\n        scrollSpy.refresh();\n      }\n    });\n  };\n  var _initBootstrapToast = function initBootstrapToast() {\n    var toastElList = [].slice.call(document.querySelectorAll('.toast'));\n    var toastList = toastElList.map(function (toastEl) {\n      return new bootstrap.Toast(toastEl, {});\n    });\n  };\n  var _initBootstrapCollapse = function initBootstrapCollapse() {\n    KTUtil.on(document.body, '.collapsible[data-bs-toggle=\"collapse\"]', 'click', function (e) {\n      if (this.classList.contains('collapsed')) {\n        this.classList.remove('active');\n        this.blur();\n      } else {\n        this.classList.add('active');\n      }\n      if (this.hasAttribute('data-kt-toggle-text')) {\n        var text = this.getAttribute('data-kt-toggle-text');\n        var target = this.querySelector('[data-kt-toggle-text-target=\"true\"]');\n        var target = target ? target : this;\n        this.setAttribute('data-kt-toggle-text', target.innerText);\n        target.innerText = text;\n      }\n    });\n  };\n  var _initBootstrapRotate = function initBootstrapRotate() {\n    KTUtil.on(document.body, '[data-kt-rotate=\"true\"]', 'click', function (e) {\n      if (this.classList.contains('active')) {\n        this.classList.remove('active');\n        this.blur();\n      } else {\n        this.classList.add('active');\n      }\n    });\n  };\n  var _initButtons = function initButtons() {\n    var buttonsGroup = [].slice.call(document.querySelectorAll('[data-kt-buttons=\"true\"]'));\n    buttonsGroup.map(function (group) {\n      var selector = group.hasAttribute('data-kt-buttons-target') ? group.getAttribute('data-kt-buttons-target') : '.btn';\n\n      // Toggle Handler\n      KTUtil.on(group, selector, 'click', function (e) {\n        var buttons = [].slice.call(group.querySelectorAll(selector + '.active'));\n        buttons.map(function (button) {\n          button.classList.remove('active');\n        });\n        this.classList.add('active');\n      });\n    });\n  };\n  var _initDaterangepicker = function initDaterangepicker() {\n    // Check if jQuery included\n    if (typeof jQuery == 'undefined') {\n      return;\n    }\n\n    // Check if daterangepicker included\n    if (typeof $.fn.daterangepicker === 'undefined') {\n      return;\n    }\n    var elements = [].slice.call(document.querySelectorAll('[data-kt-daterangepicker=\"true\"]'));\n    var start = moment().subtract(29, 'days');\n    var end = moment();\n    elements.map(function (element) {\n      var display = element.querySelector('div');\n      var attrOpens = element.hasAttribute('data-kt-daterangepicker-opens') ? element.getAttribute('data-kt-daterangepicker-opens') : 'left';\n      var cb = function cb(start, end) {\n        if (display) {\n          display.innerHTML = start.format('D MMM YYYY') + ' - ' + end.format('D MMM YYYY');\n        }\n      };\n      $(element).daterangepicker({\n        startDate: start,\n        endDate: end,\n        opens: attrOpens,\n        ranges: {\n          'Today': [moment(), moment()],\n          'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n          'Last 7 Days': [moment().subtract(6, 'days'), moment()],\n          'Last 30 Days': [moment().subtract(29, 'days'), moment()],\n          'This Month': [moment().startOf('month'), moment().endOf('month')],\n          'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]\n        }\n      }, cb);\n      cb(start, end);\n    });\n  };\n  var _initCheck = function initCheck() {\n    // Toggle Handler\n    KTUtil.on(document.body, '[data-kt-check=\"true\"]', 'change', function (e) {\n      var check = this;\n      var targets = document.querySelectorAll(check.getAttribute('data-kt-check-target'));\n      KTUtil.each(targets, function (target) {\n        if (target.type == 'checkbox') {\n          target.checked = check.checked;\n        } else {\n          target.classList.toggle('active');\n        }\n      });\n    });\n  };\n  var _initSelect = function initSelect2() {\n    // Check if jQuery included\n    if (typeof jQuery == 'undefined') {\n      return;\n    }\n\n    // Check if select2 included\n    if (typeof $.fn.select2 === 'undefined') {\n      return;\n    }\n    var elements = [].slice.call(document.querySelectorAll('[data-control=\"select2\"], [data-kt-select2=\"true\"]'));\n    elements.map(function (element) {\n      var options = {\n        dir: document.body.getAttribute('direction')\n      };\n      if (element.getAttribute('data-hide-search') == 'true') {\n        options.minimumResultsForSearch = Infinity;\n      }\n      $(element).select2(options);\n    });\n\n    /*\r\n    * Hacky fix for a bug in select2 with jQuery 3.6.0's new nested-focus \"protection\"\r\n    * see: https://github.com/select2/select2/issues/5993\r\n    * see: https://github.com/jquery/jquery/issues/4382\r\n    *\r\n    * TODO: Recheck with the select2 GH issue and remove once this is fixed on their side\r\n    */\n\n    if (select2FocusFixInitialized === false) {\n      select2FocusFixInitialized = true;\n      $(document).on('select2:open', function (e) {\n        var elements = document.querySelectorAll('.select2-container--open .select2-search__field');\n        if (elements.length > 0) {\n          elements[elements.length - 1].focus();\n        }\n      });\n    }\n  };\n  var initModal = function initModal() {\n    // Apply fix for Firefox's known bug with Flatpickr and other inputs focus state\n    if (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\n      var allModals = document.querySelectorAll('.modal:not(.initialized)');\n      allModals.forEach(function (modal) {\n        modal.addEventListener('shown.bs.modal', function () {\n          bootstrap.Modal.getInstance(this).handleUpdate();\n          this.classList.add('initialized');\n          alert(2);\n        });\n      });\n    }\n  };\n  var _initAutosize = function initAutosize() {\n    var inputs = [].slice.call(document.querySelectorAll('[data-kt-autosize=\"true\"]'));\n    inputs.map(function (input) {\n      autosize(input);\n    });\n  };\n  var _initCountUp = function initCountUp() {\n    var elements = [].slice.call(document.querySelectorAll('[data-kt-countup=\"true\"]:not(.counted)'));\n    elements.map(function (element) {\n      if (KTUtil.isInViewport(element) && KTUtil.visible(element)) {\n        var options = {};\n        var value = element.getAttribute('data-kt-countup-value');\n        value = parseFloat(value.replace(/,/g, \"\"));\n        if (element.hasAttribute('data-kt-countup-start-val')) {\n          options.startVal = parseFloat(element.getAttribute('data-kt-countup-start-val'));\n        }\n        if (element.hasAttribute('data-kt-countup-duration')) {\n          options.duration = parseInt(element.getAttribute('data-kt-countup-duration'));\n        }\n        if (element.hasAttribute('data-kt-countup-decimal-places')) {\n          options.decimalPlaces = parseInt(element.getAttribute('data-kt-countup-decimal-places'));\n        }\n        if (element.hasAttribute('data-kt-countup-prefix')) {\n          options.prefix = element.getAttribute('data-kt-countup-prefix');\n        }\n        if (element.hasAttribute('data-kt-countup-separator')) {\n          options.separator = element.getAttribute('data-kt-countup-separator');\n        }\n        if (element.hasAttribute('data-kt-countup-suffix')) {\n          options.suffix = element.getAttribute('data-kt-countup-suffix');\n        }\n        var count = new countUp.CountUp(element, value, options);\n        count.start();\n        element.classList.add('counted');\n      }\n    });\n  };\n  var _initCountUpTabs = function initCountUpTabs() {\n    // Initial call\n    _initCountUp();\n\n    // Window scroll event handler\n    window.addEventListener('scroll', _initCountUp);\n\n    // Tabs shown event handler\n    var tabs = [].slice.call(document.querySelectorAll('[data-kt-countup-tabs=\"true\"][data-bs-toggle=\"tab\"]'));\n    tabs.map(function (tab) {\n      tab.addEventListener('shown.bs.tab', _initCountUp);\n    });\n  };\n  var _initTinySliders = function initTinySliders() {\n    // Init Slider\n    var initSlider = function initSlider(el) {\n      if (!el) {\n        return;\n      }\n      var tnsOptions = {};\n\n      // Convert string boolean\n      var checkBool = function checkBool(val) {\n        if (val === 'true') {\n          return true;\n        }\n        if (val === 'false') {\n          return false;\n        }\n        return val;\n      };\n\n      // get extra options via data attributes\n      el.getAttributeNames().forEach(function (attrName) {\n        // more options; https://github.com/ganlanyuan/tiny-slider#options\n        if (/^data-tns-.*/g.test(attrName)) {\n          var optionName = attrName.replace('data-tns-', '').toLowerCase().replace(/(?:[\\s-])\\w/g, function (match) {\n            return match.replace('-', '').toUpperCase();\n          });\n          if (attrName === 'data-tns-responsive') {\n            // fix string with a valid json\n            var jsonStr = el.getAttribute(attrName).replace(/(\\w+:)|(\\w+ :)/g, function (matched) {\n              return '\"' + matched.substring(0, matched.length - 1) + '\":';\n            });\n            try {\n              // convert json string to object\n              tnsOptions[optionName] = JSON.parse(jsonStr);\n            } catch (e) {}\n          } else {\n            tnsOptions[optionName] = checkBool(el.getAttribute(attrName));\n          }\n        }\n      });\n      var opt = Object.assign({}, {\n        container: el,\n        slideBy: 'page',\n        autoplay: true,\n        autoplayButtonOutput: false\n      }, tnsOptions);\n      if (el.closest('.tns')) {\n        KTUtil.addClass(el.closest('.tns'), 'tns-initiazlied');\n      }\n      return tns(opt);\n    };\n\n    // Sliders\n    var elements = Array.prototype.slice.call(document.querySelectorAll('[data-tns=\"true\"]'), 0);\n    if (!elements && elements.length === 0) {\n      return;\n    }\n    elements.forEach(function (el) {\n      initSlider(el);\n    });\n  };\n  var _initSmoothScroll = function initSmoothScroll() {\n    if (SmoothScroll) {\n      new SmoothScroll('a[data-kt-scroll-toggle][href*=\"#\"]', {\n        speed: 1000,\n        speedAsDuration: true,\n        offset: function offset(anchor, toggle) {\n          // Integer or Function returning an integer. How far to offset the scrolling anchor location in pixels\n          // This example is a function, but you could do something as simple as `offset: 25`\n\n          // An example returning different values based on whether the clicked link was in the header nav or not\n          if (anchor.hasAttribute('data-kt-scroll-offset')) {\n            var val = KTUtil.getResponsiveValue(anchor.getAttribute('data-kt-scroll-offset'));\n            return val;\n          } else {\n            return 0;\n          }\n        }\n      });\n    }\n  };\n  var _setThemeMode = function setThemeMode(mode, cb) {\n    // Load css file\n    var loadCssFile = function loadCssFile(fileName, newFileName) {\n      return new Promise(function (resolve, reject) {\n        var oldLink = document.querySelector(\"link[href*='\" + fileName + \"']\");\n        var link = document.createElement('link');\n        var href = oldLink.href.replace(fileName, newFileName);\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = href;\n        document.head.insertBefore(link, oldLink);\n\n        // Important success and error for the promise\n        link.onload = function () {\n          resolve(href);\n          oldLink.remove();\n        };\n        link.onerror = function () {\n          reject(href);\n        };\n      });\n    };\n\n    // Set page loading state\n    document.body.classList.add('page-loading');\n    if (mode === 'dark') {\n      Promise.all([loadCssFile('plugins.bundle.css', 'plugins.dark.bundle.css'), loadCssFile('style.bundle.css', 'style.dark.bundle.css')]).then(function () {\n        // Set dark mode class\n        document.body.classList.add(\"dark-mode\");\n\n        // Remove page loading srate\n        document.body.classList.remove('page-loading');\n        if (cb instanceof Function) {\n          cb();\n        }\n      })[\"catch\"](function () {\n        // error\n      });\n    } else if (mode === 'light') {\n      Promise.all([loadCssFile('plugins.dark.bundle.css', 'plugins.bundle.css'), loadCssFile('style.dark.bundle.css', 'style.bundle.css')]).then(function () {\n        // Remove dark mode class\n        document.body.classList.remove(\"dark-mode\");\n\n        // Remove page loading srate\n        document.body.classList.remove('page-loading');\n\n        // Callback\n        if (cb instanceof Function) {\n          cb();\n        }\n      })[\"catch\"](function () {\n        // error\n      });\n    }\n  };\n  return {\n    init: function init() {\n      this.initBootstrapTooltips();\n      this.initBootstrapPopovers();\n      this.initBootstrapScrollSpy();\n      this.initDaterangepicker();\n      this.initButtons();\n      this.initCheck();\n      this.initSelect2();\n      this.initCountUp();\n      this.initCountUpTabs();\n      this.initAutosize();\n      this.initTinySliders();\n      this.initSmoothScroll();\n      this.initBootstrapToast();\n      this.initBootstrapCollapse();\n      this.initBootstrapRotate();\n    },\n    initPageLoader: function initPageLoader() {\n      _initPageLoader();\n    },\n    initDaterangepicker: function initDaterangepicker() {\n      _initDaterangepicker();\n    },\n    initBootstrapTooltip: function initBootstrapTooltip(el, options) {\n      return _initBootstrapTooltip(el, options);\n    },\n    initBootstrapTooltips: function initBootstrapTooltips() {\n      _initBootstrapTooltips();\n    },\n    initBootstrapModal: function initBootstrapModal() {\n      initModal();\n    },\n    initBootstrapPopovers: function initBootstrapPopovers() {\n      _initBootstrapPopovers();\n    },\n    initBootstrapPopover: function initBootstrapPopover(el, options) {\n      return _initBootstrapPopover(el, options);\n    },\n    initBootstrapScrollSpy: function initBootstrapScrollSpy() {\n      _initBootstrapScrollSpy();\n    },\n    initBootstrapToast: function initBootstrapToast() {\n      _initBootstrapToast();\n    },\n    initBootstrapCollapse: function initBootstrapCollapse() {\n      _initBootstrapCollapse();\n    },\n    initBootstrapRotate: function initBootstrapRotate() {\n      _initBootstrapRotate();\n    },\n    initButtons: function initButtons() {\n      _initButtons();\n    },\n    initCheck: function initCheck() {\n      _initCheck();\n    },\n    initSelect2: function initSelect2() {\n      _initSelect();\n    },\n    initCountUp: function initCountUp() {\n      _initCountUp();\n    },\n    initCountUpTabs: function initCountUpTabs() {\n      _initCountUpTabs();\n    },\n    initAutosize: function initAutosize() {\n      _initAutosize();\n    },\n    initTinySliders: function initTinySliders() {\n      _initTinySliders();\n    },\n    initSmoothScroll: function initSmoothScroll() {\n      _initSmoothScroll();\n    },\n    isDarkMode: function isDarkMode() {\n      return document.body.classList.contains('dark-mode');\n    },\n    setThemeMode: function setThemeMode(mode, cb) {\n      _setThemeMode(mode, cb);\n    }\n  };\n}();\n\n// Initialize app on document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTApp.init();\n});\n\n// Initialize page loader on window load\nwindow.addEventListener(\"load\", function () {\n  KTApp.initPageLoader();\n});\n\n// Declare KTApp for Webpack support\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTApp;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc3JjL2pzL2xheW91dC9hcHAuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQSxJQUFJQSxLQUFLLEdBQUcsWUFBWTtFQUNwQixJQUFJQywwQkFBMEIsR0FBRyxLQUFLO0VBRXRDLElBQUlDLGVBQWMsR0FBRyxTQUFqQkEsY0FBY0EsQ0FBQSxFQUFlO0lBQzdCO0lBQ0FDLE1BQU0sQ0FBQ0MsV0FBVyxDQUFDQyxRQUFRLENBQUNDLElBQUksRUFBRSxjQUFjLENBQUM7RUFDckQsQ0FBQztFQUVELElBQUlDLHFCQUFvQixHQUFHLFNBQXZCQSxvQkFBb0JBLENBQWFDLEVBQUUsRUFBRUMsT0FBTyxFQUFFO0lBQzlDLElBQUlDLEtBQUssR0FBRyxDQUFDLENBQUM7O0lBRWQ7SUFDQSxJQUFJRixFQUFFLENBQUNHLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO01BQ3ZDRCxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUdGLEVBQUUsQ0FBQ0ksWUFBWSxDQUFDLG9CQUFvQixDQUFDO0lBQ3pEO0lBRUEsSUFBSUosRUFBRSxDQUFDRyxZQUFZLENBQUMsb0JBQW9CLENBQUMsRUFBRTtNQUN2Q0QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHRixFQUFFLENBQUNJLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQztJQUN6RDtJQUVBLElBQUlGLEtBQUssRUFBRTtNQUNQRCxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUdDLEtBQUs7SUFDNUI7O0lBRUE7SUFDQSxJQUFJRixFQUFFLENBQUNHLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJSCxFQUFFLENBQUNJLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLE9BQU8sRUFBRTtNQUNyRkgsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLE9BQU87SUFDaEM7O0lBRUE7SUFDQSxJQUFJSSxFQUFFLEdBQUcsSUFBSUMsU0FBUyxDQUFDQyxPQUFPLENBQUNQLEVBQUUsRUFBRUMsT0FBTyxDQUFDOztJQUUzQztJQUNBLElBQUlBLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLE9BQU8sRUFBRTtNQUN0RDtNQUNBRCxFQUFFLENBQUNRLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFVQyxDQUFDLEVBQUU7UUFDdENKLEVBQUUsQ0FBQ0ssSUFBSSxFQUFFO01BQ2IsQ0FBQyxDQUFDO0lBQ047SUFFQSxPQUFPTCxFQUFFO0VBQ2IsQ0FBQztFQUVELElBQUlNLHNCQUFxQixHQUFHLFNBQXhCQSxxQkFBcUJBLENBQWFYLEVBQUUsRUFBRUMsT0FBTyxFQUFFO0lBQy9DLElBQUlXLGtCQUFrQixHQUFHLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUNqQixRQUFRLENBQUNrQixnQkFBZ0IsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBRS9GLElBQUlDLFdBQVcsR0FBR0osa0JBQWtCLENBQUNLLEdBQUcsQ0FBQyxVQUFVQyxnQkFBZ0IsRUFBRTtNQUNqRW5CLHFCQUFvQixDQUFDbUIsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDO0VBQ04sQ0FBQztFQUVELElBQUlDLHFCQUFvQixHQUFHLFNBQXZCQSxvQkFBb0JBLENBQWFuQixFQUFFLEVBQUVDLE9BQU8sRUFBRTtJQUM5QyxJQUFJQyxLQUFLLEdBQUcsQ0FBQyxDQUFDOztJQUVkO0lBQ0EsSUFBSUYsRUFBRSxDQUFDRyxZQUFZLENBQUMsb0JBQW9CLENBQUMsRUFBRTtNQUN2Q0QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHRixFQUFFLENBQUNJLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQztJQUN6RDtJQUVBLElBQUlKLEVBQUUsQ0FBQ0csWUFBWSxDQUFDLG9CQUFvQixDQUFDLEVBQUU7TUFDdkNELEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBR0YsRUFBRSxDQUFDSSxZQUFZLENBQUMsb0JBQW9CLENBQUM7SUFDekQ7SUFFQSxJQUFJRixLQUFLLEVBQUU7TUFDUEQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHQyxLQUFLO0lBQzVCOztJQUVBO0lBQ0EsSUFBSUYsRUFBRSxDQUFDSSxZQUFZLENBQUMsaUJBQWlCLENBQUMsSUFBSSxNQUFNLEVBQUU7TUFDOUNILE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJO0lBQzdCO0lBRUEsSUFBSUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtNQUM3QkEsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLCtMQUErTDtJQUN6Tjs7SUFFQTtJQUNBLElBQUltQixPQUFPLEdBQUcsSUFBSWQsU0FBUyxDQUFDZSxPQUFPLENBQUNyQixFQUFFLEVBQUVDLE9BQU8sQ0FBQzs7SUFFaEQ7SUFDQSxJQUFJQSxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO01BQzdCLElBQUlxQixjQUFjLEdBQUcsU0FBakJBLGNBQWNBLENBQWFiLENBQUMsRUFBRTtRQUM5QlcsT0FBTyxDQUFDVixJQUFJLEVBQUU7TUFDbEIsQ0FBQztNQUVEVixFQUFFLENBQUNRLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLFlBQVk7UUFDaEQsSUFBSWUsU0FBUyxHQUFHMUIsUUFBUSxDQUFDMkIsY0FBYyxDQUFDeEIsRUFBRSxDQUFDSSxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUM1RW1CLFNBQVMsQ0FBQ2YsZ0JBQWdCLENBQUMsT0FBTyxFQUFFYyxjQUFjLENBQUM7TUFDdkQsQ0FBQyxDQUFDO01BRUZ0QixFQUFFLENBQUNRLGdCQUFnQixDQUFDLGlCQUFpQixFQUFFLFlBQVk7UUFDL0MsSUFBSWUsU0FBUyxHQUFHMUIsUUFBUSxDQUFDMkIsY0FBYyxDQUFDeEIsRUFBRSxDQUFDSSxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUM1RW1CLFNBQVMsQ0FBQ0UsbUJBQW1CLENBQUMsT0FBTyxFQUFFSCxjQUFjLENBQUM7TUFDMUQsQ0FBQyxDQUFDO0lBQ047SUFFQSxPQUFPRixPQUFPO0VBQ2xCLENBQUM7RUFFRCxJQUFJTSxzQkFBcUIsR0FBRyxTQUF4QkEscUJBQXFCQSxDQUFBLEVBQWU7SUFDcEMsSUFBSUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDZCxLQUFLLENBQUNDLElBQUksQ0FBQ2pCLFFBQVEsQ0FBQ2tCLGdCQUFnQixDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFFL0YsSUFBSWEsV0FBVyxHQUFHRCxrQkFBa0IsQ0FBQ1YsR0FBRyxDQUFDLFVBQVVZLGdCQUFnQixFQUFFO01BQ2pFVixxQkFBb0IsQ0FBQ1UsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDO0VBQ04sQ0FBQztFQUVELElBQUlDLHVCQUFzQixHQUFHLFNBQXpCQSxzQkFBc0JBLENBQUEsRUFBZTtJQUNyQyxJQUFJQyxRQUFRLEdBQUcsRUFBRSxDQUFDbEIsS0FBSyxDQUFDQyxJQUFJLENBQUNqQixRQUFRLENBQUNrQixnQkFBZ0IsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBRWpGZ0IsUUFBUSxDQUFDZCxHQUFHLENBQUMsVUFBVWUsT0FBTyxFQUFFO01BQzVCLElBQUlDLEdBQUcsR0FBR0QsT0FBTyxDQUFDNUIsWUFBWSxDQUFDLGdCQUFnQixDQUFDO01BQ2hELElBQUk4QixhQUFhLEdBQUdyQyxRQUFRLENBQUNzQyxhQUFhLENBQUNILE9BQU8sQ0FBQzVCLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO01BQ2xGLElBQUlnQyxTQUFTLEdBQUc5QixTQUFTLENBQUMrQixTQUFTLENBQUNDLFdBQVcsQ0FBQ0osYUFBYSxDQUFDO01BQzlELElBQUlFLFNBQVMsRUFBRTtRQUNYQSxTQUFTLENBQUNHLE9BQU8sRUFBRTtNQUN2QjtJQUNKLENBQUMsQ0FBQztFQUNOLENBQUM7RUFFRCxJQUFJQyxtQkFBa0IsR0FBRyxTQUFyQkEsa0JBQWtCQSxDQUFBLEVBQWU7SUFDakMsSUFBSUMsV0FBVyxHQUFHLEVBQUUsQ0FBQzVCLEtBQUssQ0FBQ0MsSUFBSSxDQUFDakIsUUFBUSxDQUFDa0IsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEUsSUFBSTJCLFNBQVMsR0FBR0QsV0FBVyxDQUFDeEIsR0FBRyxDQUFDLFVBQVUwQixPQUFPLEVBQUU7TUFDL0MsT0FBTyxJQUFJckMsU0FBUyxDQUFDc0MsS0FBSyxDQUFDRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDO0VBQ04sQ0FBQztFQUVELElBQUlFLHNCQUFxQixHQUFHLFNBQXhCQSxxQkFBcUJBLENBQUEsRUFBYztJQUNuQ2xELE1BQU0sQ0FBQ21ELEVBQUUsQ0FBQ2pELFFBQVEsQ0FBQ0MsSUFBSSxFQUFHLHlDQUF5QyxFQUFFLE9BQU8sRUFBRSxVQUFTVyxDQUFDLEVBQUU7TUFDdEYsSUFBSSxJQUFJLENBQUNzQyxTQUFTLENBQUNDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRTtRQUN0QyxJQUFJLENBQUNELFNBQVMsQ0FBQ0UsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUMvQixJQUFJLENBQUNDLElBQUksRUFBRTtNQUNmLENBQUMsTUFBTTtRQUNILElBQUksQ0FBQ0gsU0FBUyxDQUFDSSxHQUFHLENBQUMsUUFBUSxDQUFDO01BQ2hDO01BRUEsSUFBSSxJQUFJLENBQUNoRCxZQUFZLENBQUMscUJBQXFCLENBQUMsRUFBRTtRQUMxQyxJQUFJaUQsSUFBSSxHQUFHLElBQUksQ0FBQ2hELFlBQVksQ0FBQyxxQkFBcUIsQ0FBQztRQUNuRCxJQUFJaUQsTUFBTSxHQUFHLElBQUksQ0FBQ2xCLGFBQWEsQ0FBQyxxQ0FBcUMsQ0FBQztRQUN0RSxJQUFJa0IsTUFBTSxHQUFHQSxNQUFNLEdBQUdBLE1BQU0sR0FBRyxJQUFJO1FBRW5DLElBQUksQ0FBQ0MsWUFBWSxDQUFDLHFCQUFxQixFQUFFRCxNQUFNLENBQUNFLFNBQVMsQ0FBQztRQUMxREYsTUFBTSxDQUFDRSxTQUFTLEdBQUdILElBQUk7TUFDM0I7SUFDSixDQUFDLENBQUM7RUFDTixDQUFDO0VBRUQsSUFBSUksb0JBQW1CLEdBQUcsU0FBdEJBLG1CQUFtQkEsQ0FBQSxFQUFjO0lBQ2pDN0QsTUFBTSxDQUFDbUQsRUFBRSxDQUFDakQsUUFBUSxDQUFDQyxJQUFJLEVBQUcseUJBQXlCLEVBQUUsT0FBTyxFQUFFLFVBQVNXLENBQUMsRUFBRTtNQUN0RSxJQUFJLElBQUksQ0FBQ3NDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ25DLElBQUksQ0FBQ0QsU0FBUyxDQUFDRSxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQ0MsSUFBSSxFQUFFO01BQ2YsQ0FBQyxNQUFNO1FBQ0gsSUFBSSxDQUFDSCxTQUFTLENBQUNJLEdBQUcsQ0FBQyxRQUFRLENBQUM7TUFDaEM7SUFDSixDQUFDLENBQUM7RUFDTixDQUFDO0VBRUQsSUFBSU0sWUFBVyxHQUFHLFNBQWRBLFdBQVdBLENBQUEsRUFBZTtJQUMxQixJQUFJQyxZQUFZLEdBQUcsRUFBRSxDQUFDN0MsS0FBSyxDQUFDQyxJQUFJLENBQUNqQixRQUFRLENBQUNrQixnQkFBZ0IsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBRXZGMkMsWUFBWSxDQUFDekMsR0FBRyxDQUFDLFVBQVUwQyxLQUFLLEVBQUU7TUFDOUIsSUFBSUMsUUFBUSxHQUFHRCxLQUFLLENBQUN4RCxZQUFZLENBQUMsd0JBQXdCLENBQUMsR0FBR3dELEtBQUssQ0FBQ3ZELFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLE1BQU07O01BRW5IO01BQ0FULE1BQU0sQ0FBQ21ELEVBQUUsQ0FBQ2EsS0FBSyxFQUFFQyxRQUFRLEVBQUUsT0FBTyxFQUFFLFVBQVVuRCxDQUFDLEVBQUU7UUFDN0MsSUFBSW9ELE9BQU8sR0FBRyxFQUFFLENBQUNoRCxLQUFLLENBQUNDLElBQUksQ0FBQzZDLEtBQUssQ0FBQzVDLGdCQUFnQixDQUFDNkMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBRXpFQyxPQUFPLENBQUM1QyxHQUFHLENBQUMsVUFBVTZDLE1BQU0sRUFBRTtVQUMxQkEsTUFBTSxDQUFDZixTQUFTLENBQUNFLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDckMsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDRixTQUFTLENBQUNJLEdBQUcsQ0FBQyxRQUFRLENBQUM7TUFDaEMsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDO0VBQ04sQ0FBQztFQUVELElBQUlZLG9CQUFtQixHQUFHLFNBQXRCQSxtQkFBbUJBLENBQUEsRUFBYztJQUNqQztJQUNBLElBQUksT0FBT0MsTUFBTSxJQUFJLFdBQVcsRUFBRTtNQUM5QjtJQUNKOztJQUVBO0lBQ0EsSUFBSSxPQUFPQyxDQUFDLENBQUNDLEVBQUUsQ0FBQ0MsZUFBZSxLQUFLLFdBQVcsRUFBRTtNQUM3QztJQUNKO0lBRUEsSUFBSXBDLFFBQVEsR0FBRyxFQUFFLENBQUNsQixLQUFLLENBQUNDLElBQUksQ0FBQ2pCLFFBQVEsQ0FBQ2tCLGdCQUFnQixDQUFDLGtDQUFrQyxDQUFDLENBQUM7SUFDM0YsSUFBSXFELEtBQUssR0FBR0MsTUFBTSxFQUFFLENBQUNDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDO0lBQ3pDLElBQUlDLEdBQUcsR0FBR0YsTUFBTSxFQUFFO0lBRWxCdEMsUUFBUSxDQUFDZCxHQUFHLENBQUMsVUFBVWUsT0FBTyxFQUFFO01BQzVCLElBQUl3QyxPQUFPLEdBQUd4QyxPQUFPLENBQUNHLGFBQWEsQ0FBQyxLQUFLLENBQUM7TUFDMUMsSUFBSXNDLFNBQVMsR0FBSXpDLE9BQU8sQ0FBQzdCLFlBQVksQ0FBQywrQkFBK0IsQ0FBQyxHQUFHNkIsT0FBTyxDQUFDNUIsWUFBWSxDQUFDLCtCQUErQixDQUFDLEdBQUcsTUFBTTtNQUV2SSxJQUFJc0UsRUFBRSxHQUFHLFNBQUxBLEVBQUVBLENBQVlOLEtBQUssRUFBRUcsR0FBRyxFQUFFO1FBQzFCLElBQUlDLE9BQU8sRUFBRTtVQUNUQSxPQUFPLENBQUNHLFNBQVMsR0FBR1AsS0FBSyxDQUFDUSxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsS0FBSyxHQUFHTCxHQUFHLENBQUNLLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDckY7TUFDSixDQUFDO01BRURYLENBQUMsQ0FBQ2pDLE9BQU8sQ0FBQyxDQUFDbUMsZUFBZSxDQUFDO1FBQ3ZCVSxTQUFTLEVBQUVULEtBQUs7UUFDaEJVLE9BQU8sRUFBRVAsR0FBRztRQUNaUSxLQUFLLEVBQUVOLFNBQVM7UUFDaEJPLE1BQU0sRUFBRTtVQUNSLE9BQU8sRUFBRSxDQUFDWCxNQUFNLEVBQUUsRUFBRUEsTUFBTSxFQUFFLENBQUM7VUFDN0IsV0FBVyxFQUFFLENBQUNBLE1BQU0sRUFBRSxDQUFDQyxRQUFRLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUFFRCxNQUFNLEVBQUUsQ0FBQ0MsUUFBUSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztVQUN6RSxhQUFhLEVBQUUsQ0FBQ0QsTUFBTSxFQUFFLENBQUNDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLEVBQUVELE1BQU0sRUFBRSxDQUFDO1VBQ3ZELGNBQWMsRUFBRSxDQUFDQSxNQUFNLEVBQUUsQ0FBQ0MsUUFBUSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRUQsTUFBTSxFQUFFLENBQUM7VUFDekQsWUFBWSxFQUFFLENBQUNBLE1BQU0sRUFBRSxDQUFDWSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUVaLE1BQU0sRUFBRSxDQUFDYSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7VUFDbEUsWUFBWSxFQUFFLENBQUNiLE1BQU0sRUFBRSxDQUFDQyxRQUFRLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDVyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUVaLE1BQU0sRUFBRSxDQUFDQyxRQUFRLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDWSxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQzNHO01BQ0osQ0FBQyxFQUFFUixFQUFFLENBQUM7TUFFTkEsRUFBRSxDQUFDTixLQUFLLEVBQUVHLEdBQUcsQ0FBQztJQUNsQixDQUFDLENBQUM7RUFDTixDQUFDO0VBRUQsSUFBSVksVUFBUyxHQUFHLFNBQVpBLFNBQVNBLENBQUEsRUFBZTtJQUN4QjtJQUNBeEYsTUFBTSxDQUFDbUQsRUFBRSxDQUFDakQsUUFBUSxDQUFDQyxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsUUFBUSxFQUFFLFVBQVVXLENBQUMsRUFBRTtNQUN0RSxJQUFJMkUsS0FBSyxHQUFHLElBQUk7TUFDaEIsSUFBSUMsT0FBTyxHQUFHeEYsUUFBUSxDQUFDa0IsZ0JBQWdCLENBQUNxRSxLQUFLLENBQUNoRixZQUFZLENBQUMsc0JBQXNCLENBQUMsQ0FBQztNQUVuRlQsTUFBTSxDQUFDMkYsSUFBSSxDQUFDRCxPQUFPLEVBQUUsVUFBVWhDLE1BQU0sRUFBRTtRQUNuQyxJQUFJQSxNQUFNLENBQUNrQyxJQUFJLElBQUksVUFBVSxFQUFFO1VBQzNCbEMsTUFBTSxDQUFDbUMsT0FBTyxHQUFHSixLQUFLLENBQUNJLE9BQU87UUFDbEMsQ0FBQyxNQUFNO1VBQ0huQyxNQUFNLENBQUNOLFNBQVMsQ0FBQzBDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDckM7TUFDSixDQUFDLENBQUM7SUFDTixDQUFDLENBQUM7RUFDTixDQUFDO0VBRUQsSUFBSUMsV0FBVyxHQUFHLFNBQWRBLFdBQVdBLENBQUEsRUFBZTtJQUMxQjtJQUNBLElBQUksT0FBTzFCLE1BQU0sSUFBSSxXQUFXLEVBQUU7TUFDOUI7SUFDSjs7SUFFQTtJQUNBLElBQUksT0FBT0MsQ0FBQyxDQUFDQyxFQUFFLENBQUN5QixPQUFPLEtBQUssV0FBVyxFQUFFO01BQ3JDO0lBQ0o7SUFFQSxJQUFJNUQsUUFBUSxHQUFHLEVBQUUsQ0FBQ2xCLEtBQUssQ0FBQ0MsSUFBSSxDQUFDakIsUUFBUSxDQUFDa0IsZ0JBQWdCLENBQUMsb0RBQW9ELENBQUMsQ0FBQztJQUU3R2dCLFFBQVEsQ0FBQ2QsR0FBRyxDQUFDLFVBQVVlLE9BQU8sRUFBRTtNQUM1QixJQUFJL0IsT0FBTyxHQUFHO1FBQ1YyRixHQUFHLEVBQUUvRixRQUFRLENBQUNDLElBQUksQ0FBQ00sWUFBWSxDQUFDLFdBQVc7TUFDL0MsQ0FBQztNQUVELElBQUk0QixPQUFPLENBQUM1QixZQUFZLENBQUMsa0JBQWtCLENBQUMsSUFBSSxNQUFNLEVBQUU7UUFDcERILE9BQU8sQ0FBQzRGLHVCQUF1QixHQUFHQyxRQUFRO01BQzlDO01BRUE3QixDQUFDLENBQUNqQyxPQUFPLENBQUMsQ0FBQzJELE9BQU8sQ0FBQzFGLE9BQU8sQ0FBQztJQUMvQixDQUFDLENBQUM7O0lBRUY7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBRVEsSUFBSVIsMEJBQTBCLEtBQUssS0FBSyxFQUFFO01BQ3RDQSwwQkFBMEIsR0FBRyxJQUFJO01BRWpDd0UsQ0FBQyxDQUFDcEUsUUFBUSxDQUFDLENBQUNpRCxFQUFFLENBQUMsY0FBYyxFQUFFLFVBQVNyQyxDQUFDLEVBQUU7UUFDdkMsSUFBSXNCLFFBQVEsR0FBR2xDLFFBQVEsQ0FBQ2tCLGdCQUFnQixDQUFDLGlEQUFpRCxDQUFDO1FBQzNGLElBQUlnQixRQUFRLENBQUNnRSxNQUFNLEdBQUcsQ0FBQyxFQUFFO1VBQ3JCaEUsUUFBUSxDQUFDQSxRQUFRLENBQUNnRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUNDLEtBQUssRUFBRTtRQUN6QztNQUNKLENBQUMsQ0FBQztJQUNOO0VBQ0osQ0FBQztFQUVELElBQUlDLFNBQVMsR0FBRyxTQUFaQSxTQUFTQSxDQUFBLEVBQWM7SUFDdkI7SUFDQSxJQUFJQyxTQUFTLENBQUNDLFNBQVMsQ0FBQ0MsV0FBVyxFQUFFLENBQUNDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtNQUM3RCxJQUFNQyxTQUFTLEdBQUd6RyxRQUFRLENBQUNrQixnQkFBZ0IsQ0FBQywwQkFBMEIsQ0FBQztNQUV2RXVGLFNBQVMsQ0FBQ0MsT0FBTyxDQUFDLFVBQUFDLEtBQUssRUFBSTtRQUN2QkEsS0FBSyxDQUFDaEcsZ0JBQWdCLENBQUMsZ0JBQWdCLEVBQUUsWUFBVztVQUNoREYsU0FBUyxDQUFDbUcsS0FBSyxDQUFDbkUsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDb0UsWUFBWSxFQUFFO1VBQ2hELElBQUksQ0FBQzNELFNBQVMsQ0FBQ0ksR0FBRyxDQUFDLGFBQWEsQ0FBQztVQUNqQ3dELEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDWixDQUFDLENBQUM7TUFDTixDQUFDLENBQUM7SUFDTjtFQUNKLENBQUM7RUFFRCxJQUFJQyxhQUFZLEdBQUcsU0FBZkEsWUFBWUEsQ0FBQSxFQUFlO0lBQzNCLElBQUlDLE1BQU0sR0FBRyxFQUFFLENBQUNoRyxLQUFLLENBQUNDLElBQUksQ0FBQ2pCLFFBQVEsQ0FBQ2tCLGdCQUFnQixDQUFDLDJCQUEyQixDQUFDLENBQUM7SUFFbEY4RixNQUFNLENBQUM1RixHQUFHLENBQUMsVUFBVTZGLEtBQUssRUFBRTtNQUN4QkMsUUFBUSxDQUFDRCxLQUFLLENBQUM7SUFDbkIsQ0FBQyxDQUFDO0VBQ04sQ0FBQztFQUVELElBQUlFLFlBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFBLEVBQWU7SUFDMUIsSUFBSWpGLFFBQVEsR0FBRyxFQUFFLENBQUNsQixLQUFLLENBQUNDLElBQUksQ0FBQ2pCLFFBQVEsQ0FBQ2tCLGdCQUFnQixDQUFDLHdDQUF3QyxDQUFDLENBQUM7SUFFakdnQixRQUFRLENBQUNkLEdBQUcsQ0FBQyxVQUFVZSxPQUFPLEVBQUU7TUFDNUIsSUFBSXJDLE1BQU0sQ0FBQ3NILFlBQVksQ0FBQ2pGLE9BQU8sQ0FBQyxJQUFJckMsTUFBTSxDQUFDdUgsT0FBTyxDQUFDbEYsT0FBTyxDQUFDLEVBQUU7UUFDekQsSUFBSS9CLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFFaEIsSUFBSWtILEtBQUssR0FBR25GLE9BQU8sQ0FBQzVCLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQztRQUN6RCtHLEtBQUssR0FBR0MsVUFBVSxDQUFDRCxLQUFLLENBQUNFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFM0MsSUFBSXJGLE9BQU8sQ0FBQzdCLFlBQVksQ0FBQywyQkFBMkIsQ0FBQyxFQUFFO1VBQ25ERixPQUFPLENBQUNxSCxRQUFRLEdBQUdGLFVBQVUsQ0FBQ3BGLE9BQU8sQ0FBQzVCLFlBQVksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3BGO1FBRUEsSUFBSTRCLE9BQU8sQ0FBQzdCLFlBQVksQ0FBQywwQkFBMEIsQ0FBQyxFQUFFO1VBQ2xERixPQUFPLENBQUNzSCxRQUFRLEdBQUdDLFFBQVEsQ0FBQ3hGLE9BQU8sQ0FBQzVCLFlBQVksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQ2pGO1FBRUEsSUFBSTRCLE9BQU8sQ0FBQzdCLFlBQVksQ0FBQyxnQ0FBZ0MsQ0FBQyxFQUFFO1VBQ3hERixPQUFPLENBQUN3SCxhQUFhLEdBQUdELFFBQVEsQ0FBQ3hGLE9BQU8sQ0FBQzVCLFlBQVksQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQzVGO1FBRUEsSUFBSTRCLE9BQU8sQ0FBQzdCLFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFO1VBQ2hERixPQUFPLENBQUN5SCxNQUFNLEdBQUcxRixPQUFPLENBQUM1QixZQUFZLENBQUMsd0JBQXdCLENBQUM7UUFDbkU7UUFFQSxJQUFJNEIsT0FBTyxDQUFDN0IsWUFBWSxDQUFDLDJCQUEyQixDQUFDLEVBQUU7VUFDbkRGLE9BQU8sQ0FBQzBILFNBQVMsR0FBRzNGLE9BQU8sQ0FBQzVCLFlBQVksQ0FBQywyQkFBMkIsQ0FBQztRQUN6RTtRQUVBLElBQUk0QixPQUFPLENBQUM3QixZQUFZLENBQUMsd0JBQXdCLENBQUMsRUFBRTtVQUNoREYsT0FBTyxDQUFDMkgsTUFBTSxHQUFHNUYsT0FBTyxDQUFDNUIsWUFBWSxDQUFDLHdCQUF3QixDQUFDO1FBQ25FO1FBRUEsSUFBSXlILEtBQUssR0FBRyxJQUFJQyxPQUFPLENBQUNDLE9BQU8sQ0FBQy9GLE9BQU8sRUFBRW1GLEtBQUssRUFBRWxILE9BQU8sQ0FBQztRQUV4RDRILEtBQUssQ0FBQ3pELEtBQUssRUFBRTtRQUVicEMsT0FBTyxDQUFDZSxTQUFTLENBQUNJLEdBQUcsQ0FBQyxTQUFTLENBQUM7TUFDcEM7SUFDSixDQUFDLENBQUM7RUFDTixDQUFDO0VBRUQsSUFBSTZFLGdCQUFlLEdBQUcsU0FBbEJBLGVBQWVBLENBQUEsRUFBZTtJQUM5QjtJQUNBaEIsWUFBVyxFQUFFOztJQUViO0lBQ0FpQixNQUFNLENBQUN6SCxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUV3RyxZQUFXLENBQUM7O0lBRTlDO0lBQ0EsSUFBSWtCLElBQUksR0FBRyxFQUFFLENBQUNySCxLQUFLLENBQUNDLElBQUksQ0FBQ2pCLFFBQVEsQ0FBQ2tCLGdCQUFnQixDQUFDLHFEQUFxRCxDQUFDLENBQUM7SUFDMUdtSCxJQUFJLENBQUNqSCxHQUFHLENBQUMsVUFBVWtILEdBQUcsRUFBRTtNQUNwQkEsR0FBRyxDQUFDM0gsZ0JBQWdCLENBQUMsY0FBYyxFQUFFd0csWUFBVyxDQUFDO0lBQ3JELENBQUMsQ0FBQztFQUNOLENBQUM7RUFFRCxJQUFJb0IsZ0JBQWUsR0FBRyxTQUFsQkEsZUFBZUEsQ0FBQSxFQUFlO0lBQzlCO0lBQ0EsSUFBSUMsVUFBVSxHQUFHLFNBQWJBLFVBQVVBLENBQWFySSxFQUFFLEVBQUU7TUFDM0IsSUFBSSxDQUFDQSxFQUFFLEVBQUU7UUFDTDtNQUNKO01BRUEsSUFBTXNJLFVBQVUsR0FBRyxDQUFDLENBQUM7O01BRXJCO01BQ0EsSUFBTUMsU0FBUyxHQUFHLFNBQVpBLFNBQVNBLENBQWFDLEdBQUcsRUFBRTtRQUM3QixJQUFJQSxHQUFHLEtBQUssTUFBTSxFQUFFO1VBQ2hCLE9BQU8sSUFBSTtRQUNmO1FBQ0EsSUFBSUEsR0FBRyxLQUFLLE9BQU8sRUFBRTtVQUNqQixPQUFPLEtBQUs7UUFDaEI7UUFDQSxPQUFPQSxHQUFHO01BQ2QsQ0FBQzs7TUFFRDtNQUNBeEksRUFBRSxDQUFDeUksaUJBQWlCLEVBQUUsQ0FBQ2xDLE9BQU8sQ0FBQyxVQUFVbUMsUUFBUSxFQUFFO1FBQy9DO1FBQ0EsSUFBSyxlQUFlLENBQUVDLElBQUksQ0FBQ0QsUUFBUSxDQUFDLEVBQUU7VUFDbEMsSUFBSUUsVUFBVSxHQUFHRixRQUFRLENBQUNyQixPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDakIsV0FBVyxFQUFFLENBQUNpQixPQUFPLENBQUMsY0FBYyxFQUFFLFVBQVV3QixLQUFLLEVBQUU7WUFDdEcsT0FBT0EsS0FBSyxDQUFDeEIsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQ3lCLFdBQVcsRUFBRTtVQUMvQyxDQUFDLENBQUM7VUFFRixJQUFJSixRQUFRLEtBQUsscUJBQXFCLEVBQUU7WUFDcEM7WUFDQSxJQUFNSyxPQUFPLEdBQUcvSSxFQUFFLENBQUNJLFlBQVksQ0FBQ3NJLFFBQVEsQ0FBQyxDQUFDckIsT0FBTyxDQUFDLGlCQUFpQixFQUFFLFVBQVUyQixPQUFPLEVBQUU7Y0FDcEYsT0FBTyxHQUFHLEdBQUdBLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDLENBQUMsRUFBRUQsT0FBTyxDQUFDakQsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUk7WUFDaEUsQ0FBQyxDQUFDO1lBQ0YsSUFBSTtjQUNBO2NBQ0F1QyxVQUFVLENBQUNNLFVBQVUsQ0FBQyxHQUFHTSxJQUFJLENBQUNDLEtBQUssQ0FBQ0osT0FBTyxDQUFDO1lBQ2hELENBQUMsQ0FDRCxPQUFPdEksQ0FBQyxFQUFFLENBQ1Y7VUFDSixDQUFDLE1BQ0k7WUFDRDZILFVBQVUsQ0FBQ00sVUFBVSxDQUFDLEdBQUdMLFNBQVMsQ0FBQ3ZJLEVBQUUsQ0FBQ0ksWUFBWSxDQUFDc0ksUUFBUSxDQUFDLENBQUM7VUFDakU7UUFDSjtNQUNKLENBQUMsQ0FBQztNQUVGLElBQU1VLEdBQUcsR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDMUJDLFNBQVMsRUFBRXZKLEVBQUU7UUFDYndKLE9BQU8sRUFBRSxNQUFNO1FBQ2ZDLFFBQVEsRUFBRSxJQUFJO1FBQ2RDLG9CQUFvQixFQUFFO01BQzFCLENBQUMsRUFBRXBCLFVBQVUsQ0FBQztNQUVkLElBQUl0SSxFQUFFLENBQUMySixPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDcEJoSyxNQUFNLENBQUNpSyxRQUFRLENBQUM1SixFQUFFLENBQUMySixPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsaUJBQWlCLENBQUM7TUFDMUQ7TUFFQSxPQUFPRSxHQUFHLENBQUNULEdBQUcsQ0FBQztJQUNuQixDQUFDOztJQUVEO0lBQ0EsSUFBTXJILFFBQVEsR0FBRytILEtBQUssQ0FBQ0MsU0FBUyxDQUFDbEosS0FBSyxDQUFDQyxJQUFJLENBQUNqQixRQUFRLENBQUNrQixnQkFBZ0IsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUU5RixJQUFJLENBQUNnQixRQUFRLElBQUlBLFFBQVEsQ0FBQ2dFLE1BQU0sS0FBSyxDQUFDLEVBQUU7TUFDcEM7SUFDSjtJQUVBaEUsUUFBUSxDQUFDd0UsT0FBTyxDQUFDLFVBQVV2RyxFQUFFLEVBQUU7TUFDM0JxSSxVQUFVLENBQUNySSxFQUFFLENBQUM7SUFDbEIsQ0FBQyxDQUFDO0VBQ04sQ0FBQztFQUVELElBQUlnSyxpQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQWdCQSxDQUFBLEVBQWU7SUFDL0IsSUFBSUMsWUFBWSxFQUFFO01BRWQsSUFBSUEsWUFBWSxDQUFDLHFDQUFxQyxFQUFFO1FBQ3BEQyxLQUFLLEVBQUUsSUFBSTtRQUNYQyxlQUFlLEVBQUUsSUFBSTtRQUNyQkMsTUFBTSxFQUFFLFNBQUFBLE9BQVVDLE1BQU0sRUFBRTVFLE1BQU0sRUFBRTtVQUM5QjtVQUNBOztVQUVBO1VBQ0EsSUFBSTRFLE1BQU0sQ0FBQ2xLLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFO1lBQzlDLElBQUlxSSxHQUFHLEdBQUc3SSxNQUFNLENBQUMySyxrQkFBa0IsQ0FBQ0QsTUFBTSxDQUFDakssWUFBWSxDQUFDLHVCQUF1QixDQUFDLENBQUM7WUFFakYsT0FBT29JLEdBQUc7VUFDZCxDQUFDLE1BQU07WUFDSCxPQUFPLENBQUM7VUFDWjtRQUNKO01BQ0osQ0FBQyxDQUFDO0lBQ047RUFDSixDQUFDO0VBRUQsSUFBSStCLGFBQVksR0FBRyxTQUFmQSxZQUFZQSxDQUFZQyxJQUFJLEVBQUU5RixFQUFFLEVBQUU7SUFDbEM7SUFDQSxJQUFJK0YsV0FBVyxHQUFHLFNBQWRBLFdBQVdBLENBQVlDLFFBQVEsRUFBRUMsV0FBVyxFQUFFO01BQzlDLE9BQU8sSUFBSUMsT0FBTyxDQUFDLFVBQVNDLE9BQU8sRUFBRUMsTUFBTSxFQUFFO1FBQ3pDLElBQUlDLE9BQU8sR0FBR2xMLFFBQVEsQ0FBQ3NDLGFBQWEsQ0FBQyxjQUFjLEdBQUd1SSxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3RFLElBQUlNLElBQUksR0FBR25MLFFBQVEsQ0FBQ29MLGFBQWEsQ0FBQyxNQUFNLENBQUM7UUFDekMsSUFBSUMsSUFBSSxHQUFHSCxPQUFPLENBQUNHLElBQUksQ0FBQzdELE9BQU8sQ0FBQ3FELFFBQVEsRUFBRUMsV0FBVyxDQUFDO1FBRXRESyxJQUFJLENBQUNHLEdBQUcsR0FBRyxZQUFZO1FBQ3ZCSCxJQUFJLENBQUN6RixJQUFJLEdBQUcsVUFBVTtRQUN0QnlGLElBQUksQ0FBQ0UsSUFBSSxHQUFHQSxJQUFJO1FBRWhCckwsUUFBUSxDQUFDdUwsSUFBSSxDQUFDQyxZQUFZLENBQUNMLElBQUksRUFBRUQsT0FBTyxDQUFDOztRQUV6QztRQUNBQyxJQUFJLENBQUNNLE1BQU0sR0FBRyxZQUFXO1VBQ3JCVCxPQUFPLENBQUNLLElBQUksQ0FBQztVQUNiSCxPQUFPLENBQUM5SCxNQUFNLEVBQUU7UUFDcEIsQ0FBQztRQUVEK0gsSUFBSSxDQUFDTyxPQUFPLEdBQUcsWUFBVztVQUN0QlQsTUFBTSxDQUFDSSxJQUFJLENBQUM7UUFDaEIsQ0FBQztNQUNMLENBQUMsQ0FBQztJQUNOLENBQUM7O0lBRUQ7SUFDQXJMLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDaUQsU0FBUyxDQUFDSSxHQUFHLENBQUMsY0FBYyxDQUFDO0lBRTNDLElBQUtxSCxJQUFJLEtBQUssTUFBTSxFQUFHO01BQ25CSSxPQUFPLENBQUNZLEdBQUcsQ0FBQyxDQUNSZixXQUFXLENBQUMsb0JBQW9CLEVBQUUseUJBQXlCLENBQUMsRUFDNURBLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSx1QkFBdUIsQ0FBQyxDQUMzRCxDQUFDLENBQUNnQixJQUFJLENBQUMsWUFBVztRQUNmO1FBQ0E1TCxRQUFRLENBQUNDLElBQUksQ0FBQ2lELFNBQVMsQ0FBQ0ksR0FBRyxDQUFDLFdBQVcsQ0FBQzs7UUFFeEM7UUFDQXRELFFBQVEsQ0FBQ0MsSUFBSSxDQUFDaUQsU0FBUyxDQUFDRSxNQUFNLENBQUMsY0FBYyxDQUFDO1FBRTlDLElBQUl5QixFQUFFLFlBQVlnSCxRQUFRLEVBQUU7VUFDeEJoSCxFQUFFLEVBQUU7UUFDUjtNQUNKLENBQUMsQ0FBQyxTQUFNLENBQUMsWUFBVztRQUNoQjtNQUFBLENBQ0gsQ0FBQztJQUNOLENBQUMsTUFBTSxJQUFLOEYsSUFBSSxLQUFLLE9BQU8sRUFBRztNQUMzQkksT0FBTyxDQUFDWSxHQUFHLENBQUMsQ0FDUmYsV0FBVyxDQUFDLHlCQUF5QixFQUFFLG9CQUFvQixDQUFDLEVBQzVEQSxXQUFXLENBQUMsdUJBQXVCLEVBQUUsa0JBQWtCLENBQUMsQ0FDM0QsQ0FBQyxDQUFDZ0IsSUFBSSxDQUFDLFlBQVc7UUFDZjtRQUNBNUwsUUFBUSxDQUFDQyxJQUFJLENBQUNpRCxTQUFTLENBQUNFLE1BQU0sQ0FBQyxXQUFXLENBQUM7O1FBRTNDO1FBQ0FwRCxRQUFRLENBQUNDLElBQUksQ0FBQ2lELFNBQVMsQ0FBQ0UsTUFBTSxDQUFDLGNBQWMsQ0FBQzs7UUFFOUM7UUFDQSxJQUFJeUIsRUFBRSxZQUFZZ0gsUUFBUSxFQUFFO1VBQ3hCaEgsRUFBRSxFQUFFO1FBQ1I7TUFDSixDQUFDLENBQUMsU0FBTSxDQUFDLFlBQVc7UUFDaEI7TUFBQSxDQUNILENBQUM7SUFDTjtFQUNKLENBQUM7RUFFRCxPQUFPO0lBQ0hpSCxJQUFJLEVBQUUsU0FBQUEsS0FBQSxFQUFZO01BQ2QsSUFBSSxDQUFDaEwscUJBQXFCLEVBQUU7TUFFNUIsSUFBSSxDQUFDZSxxQkFBcUIsRUFBRTtNQUU1QixJQUFJLENBQUNJLHNCQUFzQixFQUFFO01BRTdCLElBQUksQ0FBQ2lDLG1CQUFtQixFQUFFO01BRTFCLElBQUksQ0FBQ04sV0FBVyxFQUFFO01BRWxCLElBQUksQ0FBQzBCLFNBQVMsRUFBRTtNQUVoQixJQUFJLENBQUNPLFdBQVcsRUFBRTtNQUVsQixJQUFJLENBQUNzQixXQUFXLEVBQUU7TUFFbEIsSUFBSSxDQUFDZ0IsZUFBZSxFQUFFO01BRXRCLElBQUksQ0FBQ3BCLFlBQVksRUFBRTtNQUVuQixJQUFJLENBQUN3QixlQUFlLEVBQUU7TUFFdEIsSUFBSSxDQUFDNEIsZ0JBQWdCLEVBQUU7TUFFdkIsSUFBSSxDQUFDeEgsa0JBQWtCLEVBQUU7TUFFekIsSUFBSSxDQUFDSyxxQkFBcUIsRUFBRTtNQUU1QixJQUFJLENBQUNXLG1CQUFtQixFQUFFO0lBQzlCLENBQUM7SUFFRDlELGNBQWMsRUFBRSxTQUFBQSxlQUFBLEVBQVk7TUFDeEJBLGVBQWMsRUFBRTtJQUNwQixDQUFDO0lBRURxRSxtQkFBbUIsRUFBRSxTQUFBQSxvQkFBQSxFQUFXO01BQzVCQSxvQkFBbUIsRUFBRTtJQUN6QixDQUFDO0lBRURoRSxvQkFBb0IsRUFBRSxTQUFBQSxxQkFBVUMsRUFBRSxFQUFFQyxPQUFPLEVBQUU7TUFDekMsT0FBT0YscUJBQW9CLENBQUNDLEVBQUUsRUFBRUMsT0FBTyxDQUFDO0lBQzVDLENBQUM7SUFFRFUscUJBQXFCLEVBQUUsU0FBQUEsc0JBQUEsRUFBWTtNQUMvQkEsc0JBQXFCLEVBQUU7SUFDM0IsQ0FBQztJQUVEaUwsa0JBQWtCLEVBQUUsU0FBQUEsbUJBQUEsRUFBVztNQUMzQjNGLFNBQVMsRUFBRTtJQUNmLENBQUM7SUFFRHZFLHFCQUFxQixFQUFFLFNBQUFBLHNCQUFBLEVBQVk7TUFDL0JBLHNCQUFxQixFQUFFO0lBQzNCLENBQUM7SUFFRFAsb0JBQW9CLEVBQUUsU0FBQUEscUJBQVVuQixFQUFFLEVBQUVDLE9BQU8sRUFBRTtNQUN6QyxPQUFPa0IscUJBQW9CLENBQUNuQixFQUFFLEVBQUVDLE9BQU8sQ0FBQztJQUM1QyxDQUFDO0lBRUQ2QixzQkFBc0IsRUFBRSxTQUFBQSx1QkFBQSxFQUFZO01BQ2hDQSx1QkFBc0IsRUFBRTtJQUM1QixDQUFDO0lBRURVLGtCQUFrQixFQUFFLFNBQUFBLG1CQUFBLEVBQVk7TUFDNUJBLG1CQUFrQixFQUFFO0lBQ3hCLENBQUM7SUFFREsscUJBQXFCLEVBQUUsU0FBQUEsc0JBQUEsRUFBVztNQUM5QkEsc0JBQXFCLEVBQUU7SUFDM0IsQ0FBQztJQUVEVyxtQkFBbUIsRUFBRSxTQUFBQSxvQkFBQSxFQUFXO01BQzVCQSxvQkFBbUIsRUFBRTtJQUN6QixDQUFDO0lBRURDLFdBQVcsRUFBRSxTQUFBQSxZQUFBLEVBQVk7TUFDckJBLFlBQVcsRUFBRTtJQUNqQixDQUFDO0lBRUQwQixTQUFTLEVBQUUsU0FBQUEsVUFBQSxFQUFZO01BQ25CQSxVQUFTLEVBQUU7SUFDZixDQUFDO0lBRURPLFdBQVcsRUFBRSxTQUFBQSxZQUFBLEVBQVk7TUFDckJBLFdBQVcsRUFBRTtJQUNqQixDQUFDO0lBRURzQixXQUFXLEVBQUUsU0FBQUEsWUFBQSxFQUFZO01BQ3JCQSxZQUFXLEVBQUU7SUFDakIsQ0FBQztJQUVEZ0IsZUFBZSxFQUFFLFNBQUFBLGdCQUFBLEVBQVk7TUFDekJBLGdCQUFlLEVBQUU7SUFDckIsQ0FBQztJQUVEcEIsWUFBWSxFQUFFLFNBQUFBLGFBQUEsRUFBWTtNQUN0QkEsYUFBWSxFQUFFO0lBQ2xCLENBQUM7SUFFRHdCLGVBQWUsRUFBRSxTQUFBQSxnQkFBQSxFQUFZO01BQ3pCQSxnQkFBZSxFQUFFO0lBQ3JCLENBQUM7SUFFRDRCLGdCQUFnQixFQUFFLFNBQUFBLGlCQUFBLEVBQVk7TUFDMUJBLGlCQUFnQixFQUFFO0lBQ3RCLENBQUM7SUFFRDZCLFVBQVUsRUFBRSxTQUFBQSxXQUFBLEVBQVk7TUFDcEIsT0FBT2hNLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDaUQsU0FBUyxDQUFDQyxRQUFRLENBQUMsV0FBVyxDQUFDO0lBQ3hELENBQUM7SUFFRHVILFlBQVksRUFBRSxTQUFBQSxhQUFTQyxJQUFJLEVBQUU5RixFQUFFLEVBQUU7TUFDN0I2RixhQUFZLENBQUNDLElBQUksRUFBRTlGLEVBQUUsQ0FBQztJQUMxQjtFQUNKLENBQUM7QUFDTCxDQUFDLEVBQUU7O0FBRUg7QUFDQS9FLE1BQU0sQ0FBQ21NLGtCQUFrQixDQUFDLFlBQVk7RUFDbEN0TSxLQUFLLENBQUNtTSxJQUFJLEVBQUU7QUFDaEIsQ0FBQyxDQUFDOztBQUVGO0FBQ0ExRCxNQUFNLENBQUN6SCxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsWUFBVztFQUN2Q2hCLEtBQUssQ0FBQ0UsY0FBYyxFQUFFO0FBQzFCLENBQUMsQ0FBQzs7QUFFRjtBQUNBLElBQUksS0FBNkIsSUFBSSxPQUFPcU0sTUFBTSxDQUFDQyxPQUFPLEtBQUssV0FBVyxFQUFFO0VBQ3hFRCxNQUFNLENBQUNDLE9BQU8sR0FBR3hNLEtBQUs7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL2pzL2xheW91dC9hcHAuanM/NDNmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIENsYXNzIGRlZmluaXRpb25cclxudmFyIEtUQXBwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGVjdDJGb2N1c0ZpeEluaXRpYWxpemVkID0gZmFsc2U7XHJcblxyXG4gICAgdmFyIGluaXRQYWdlTG9hZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIENTUzMgVHJhbnNpdGlvbnMgb25seSBhZnRlciBwYWdlIGxvYWQoLnBhZ2UtbG9hZGluZyBjbGFzcyBhZGRlZCB0byBib2R5IHRhZyBhbmQgcmVtb3ZlIHdpdGggSlMgb24gcGFnZSBsb2FkKVxyXG4gICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhkb2N1bWVudC5ib2R5LCAncGFnZS1sb2FkaW5nJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluaXRCb290c3RyYXBUb29sdGlwID0gZnVuY3Rpb24gKGVsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGRlbGF5ID0ge307XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBkZWxheSBvcHRpb25zXHJcbiAgICAgICAgaWYgKGVsLmhhc0F0dHJpYnV0ZSgnZGF0YS1icy1kZWxheS1oaWRlJykpIHtcclxuICAgICAgICAgICAgZGVsYXlbJ2hpZGUnXSA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1icy1kZWxheS1oaWRlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZWwuaGFzQXR0cmlidXRlKCdkYXRhLWJzLWRlbGF5LXNob3cnKSkge1xyXG4gICAgICAgICAgICBkZWxheVsnc2hvdyddID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLWRlbGF5LXNob3cnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkZWxheSkge1xyXG4gICAgICAgICAgICBvcHRpb25zWydkZWxheSddID0gZGVsYXk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVjayBkaXNtaXNzIG9wdGlvbnNcclxuICAgICAgICBpZiAoZWwuaGFzQXR0cmlidXRlKCdkYXRhLWJzLWRpc21pc3MnKSAmJiBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtZGlzbWlzcycpID09ICdjbGljaycpIHtcclxuICAgICAgICAgICAgb3B0aW9uc1snZGlzbWlzcyddID0gJ2NsaWNrJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgcG9wb3ZlclxyXG4gICAgICAgIHZhciB0cCA9IG5ldyBib290c3RyYXAuVG9vbHRpcChlbCwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBkaXNtaXNzXHJcbiAgICAgICAgaWYgKG9wdGlvbnNbJ2Rpc21pc3MnXSAmJiBvcHRpb25zWydkaXNtaXNzJ10gPT09ICdjbGljaycpIHtcclxuICAgICAgICAgICAgLy8gSGlkZSBwb3BvdmVyIG9uIGVsZW1lbnQgY2xpY2tcclxuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0cC5oaWRlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRwO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpbml0Qm9vdHN0cmFwVG9vbHRpcHMgPSBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgdG9vbHRpcFRyaWdnZXJMaXN0ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1icy10b2dnbGU9XCJ0b29sdGlwXCJdJykpO1xyXG5cclxuICAgICAgICB2YXIgdG9vbHRpcExpc3QgPSB0b29sdGlwVHJpZ2dlckxpc3QubWFwKGZ1bmN0aW9uICh0b29sdGlwVHJpZ2dlckVsKSB7XHJcbiAgICAgICAgICAgIGluaXRCb290c3RyYXBUb29sdGlwKHRvb2x0aXBUcmlnZ2VyRWwsIHt9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5pdEJvb3RzdHJhcFBvcG92ZXIgPSBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgZGVsYXkgPSB7fTtcclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIGRlbGF5IG9wdGlvbnNcclxuICAgICAgICBpZiAoZWwuaGFzQXR0cmlidXRlKCdkYXRhLWJzLWRlbGF5LWhpZGUnKSkge1xyXG4gICAgICAgICAgICBkZWxheVsnaGlkZSddID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLWRlbGF5LWhpZGUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbC5oYXNBdHRyaWJ1dGUoJ2RhdGEtYnMtZGVsYXktc2hvdycpKSB7XHJcbiAgICAgICAgICAgIGRlbGF5WydzaG93J10gPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtZGVsYXktc2hvdycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRlbGF5KSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnNbJ2RlbGF5J10gPSBkZWxheTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBkaXNtaXNzIG9wdGlvblxyXG4gICAgICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtZGlzbWlzcycpID09ICd0cnVlJykge1xyXG4gICAgICAgICAgICBvcHRpb25zWydkaXNtaXNzJ10gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnNbJ2Rpc21pc3MnXSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBvcHRpb25zWyd0ZW1wbGF0ZSddID0gJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwicG9wb3Zlci1hcnJvd1wiPjwvZGl2PjxzcGFuIGNsYXNzPVwicG9wb3Zlci1kaXNtaXNzIGJ0biBidG4taWNvblwiPjwvc3Bhbj48aDMgY2xhc3M9XCJwb3BvdmVyLWhlYWRlclwiPjwvaDM+PGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PjwvZGl2PidcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgcG9wb3ZlclxyXG4gICAgICAgIHZhciBwb3BvdmVyID0gbmV3IGJvb3RzdHJhcC5Qb3BvdmVyKGVsLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIGRpc21pc3MgY2xpY2tcclxuICAgICAgICBpZiAob3B0aW9uc1snZGlzbWlzcyddID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHZhciBkaXNtaXNzSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBwb3BvdmVyLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignc2hvd24uYnMucG9wb3ZlcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkaXNtaXNzRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbC5nZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKSk7XHJcbiAgICAgICAgICAgICAgICBkaXNtaXNzRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkaXNtaXNzSGFuZGxlcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaGlkZS5icy5wb3BvdmVyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRpc21pc3NFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsLmdldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScpKTtcclxuICAgICAgICAgICAgICAgIGRpc21pc3NFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGRpc21pc3NIYW5kbGVyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcG9wb3ZlcjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5pdEJvb3RzdHJhcFBvcG92ZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBwb3BvdmVyVHJpZ2dlckxpc3QgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWJzLXRvZ2dsZT1cInBvcG92ZXJcIl0nKSk7XHJcblxyXG4gICAgICAgIHZhciBwb3BvdmVyTGlzdCA9IHBvcG92ZXJUcmlnZ2VyTGlzdC5tYXAoZnVuY3Rpb24gKHBvcG92ZXJUcmlnZ2VyRWwpIHtcclxuICAgICAgICAgICAgaW5pdEJvb3RzdHJhcFBvcG92ZXIocG9wb3ZlclRyaWdnZXJFbCwge30pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpbml0Qm9vdHN0cmFwU2Nyb2xsU3B5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50cyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtYnMtc3B5PVwic2Nyb2xsXCJdJykpO1xyXG5cclxuICAgICAgICBlbGVtZW50cy5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdmFyIHNlbCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLXRhcmdldCcpO1xyXG4gICAgICAgICAgICB2YXIgc2Nyb2xsQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtdGFyZ2V0JykpO1xyXG4gICAgICAgICAgICB2YXIgc2Nyb2xsU3B5ID0gYm9vdHN0cmFwLlNjcm9sbFNweS5nZXRJbnN0YW5jZShzY3JvbGxDb250ZW50KTtcclxuICAgICAgICAgICAgaWYgKHNjcm9sbFNweSkge1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsU3B5LnJlZnJlc2goKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpbml0Qm9vdHN0cmFwVG9hc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHRvYXN0RWxMaXN0ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudG9hc3QnKSk7XHJcbiAgICAgICAgdmFyIHRvYXN0TGlzdCA9IHRvYXN0RWxMaXN0Lm1hcChmdW5jdGlvbiAodG9hc3RFbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGJvb3RzdHJhcC5Ub2FzdCh0b2FzdEVsLCB7fSlcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5pdEJvb3RzdHJhcENvbGxhcHNlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgS1RVdGlsLm9uKGRvY3VtZW50LmJvZHksICAnLmNvbGxhcHNpYmxlW2RhdGEtYnMtdG9nZ2xlPVwiY29sbGFwc2VcIl0nLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNsYXNzTGlzdC5jb250YWlucygnY29sbGFwc2VkJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJsdXIoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0F0dHJpYnV0ZSgnZGF0YS1rdC10b2dnbGUtdGV4dCcpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLWt0LXRvZ2dsZS10ZXh0Jyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC10b2dnbGUtdGV4dC10YXJnZXQ9XCJ0cnVlXCJdJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGFyZ2V0ID8gdGFyZ2V0IDogdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGF0YS1rdC10b2dnbGUtdGV4dCcsIHRhcmdldC5pbm5lclRleHQpO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LmlubmVyVGV4dCA9IHRleHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5pdEJvb3RzdHJhcFJvdGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIEtUVXRpbC5vbihkb2N1bWVudC5ib2R5LCAgJ1tkYXRhLWt0LXJvdGF0ZT1cInRydWVcIl0nLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJsdXIoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5pdEJ1dHRvbnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGJ1dHRvbnNHcm91cCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEta3QtYnV0dG9ucz1cInRydWVcIl0nKSk7XHJcblxyXG4gICAgICAgIGJ1dHRvbnNHcm91cC5tYXAoZnVuY3Rpb24gKGdyb3VwKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IGdyb3VwLmhhc0F0dHJpYnV0ZSgnZGF0YS1rdC1idXR0b25zLXRhcmdldCcpID8gZ3JvdXAuZ2V0QXR0cmlidXRlKCdkYXRhLWt0LWJ1dHRvbnMtdGFyZ2V0JykgOiAnLmJ0bic7XHJcblxyXG4gICAgICAgICAgICAvLyBUb2dnbGUgSGFuZGxlclxyXG4gICAgICAgICAgICBLVFV0aWwub24oZ3JvdXAsIHNlbGVjdG9yLCAnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJ1dHRvbnMgPSBbXS5zbGljZS5jYWxsKGdyb3VwLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IgKyAnLmFjdGl2ZScpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBidXR0b25zLm1hcChmdW5jdGlvbiAoYnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluaXREYXRlcmFuZ2VwaWNrZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBDaGVjayBpZiBqUXVlcnkgaW5jbHVkZWRcclxuICAgICAgICBpZiAodHlwZW9mIGpRdWVyeSA9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiBkYXRlcmFuZ2VwaWNrZXIgaW5jbHVkZWRcclxuICAgICAgICBpZiAodHlwZW9mICQuZm4uZGF0ZXJhbmdlcGlja2VyID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZWxlbWVudHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWt0LWRhdGVyYW5nZXBpY2tlcj1cInRydWVcIl0nKSk7XHJcbiAgICAgICAgdmFyIHN0YXJ0ID0gbW9tZW50KCkuc3VidHJhY3QoMjksICdkYXlzJyk7XHJcbiAgICAgICAgdmFyIGVuZCA9IG1vbWVudCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGVsZW1lbnRzLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICB2YXIgZGlzcGxheSA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignZGl2Jyk7XHJcbiAgICAgICAgICAgIHZhciBhdHRyT3BlbnMgID0gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEta3QtZGF0ZXJhbmdlcGlja2VyLW9wZW5zJykgPyBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1rdC1kYXRlcmFuZ2VwaWNrZXItb3BlbnMnKSA6ICdsZWZ0JztcclxuXHJcbiAgICAgICAgICAgIHZhciBjYiA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkaXNwbGF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheS5pbm5lckhUTUwgPSBzdGFydC5mb3JtYXQoJ0QgTU1NIFlZWVknKSArICcgLSAnICsgZW5kLmZvcm1hdCgnRCBNTU0gWVlZWScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkKGVsZW1lbnQpLmRhdGVyYW5nZXBpY2tlcih7XHJcbiAgICAgICAgICAgICAgICBzdGFydERhdGU6IHN0YXJ0LFxyXG4gICAgICAgICAgICAgICAgZW5kRGF0ZTogZW5kLFxyXG4gICAgICAgICAgICAgICAgb3BlbnM6IGF0dHJPcGVucyxcclxuICAgICAgICAgICAgICAgIHJhbmdlczoge1xyXG4gICAgICAgICAgICAgICAgJ1RvZGF5JzogW21vbWVudCgpLCBtb21lbnQoKV0sXHJcbiAgICAgICAgICAgICAgICAnWWVzdGVyZGF5JzogW21vbWVudCgpLnN1YnRyYWN0KDEsICdkYXlzJyksIG1vbWVudCgpLnN1YnRyYWN0KDEsICdkYXlzJyldLFxyXG4gICAgICAgICAgICAgICAgJ0xhc3QgNyBEYXlzJzogW21vbWVudCgpLnN1YnRyYWN0KDYsICdkYXlzJyksIG1vbWVudCgpXSxcclxuICAgICAgICAgICAgICAgICdMYXN0IDMwIERheXMnOiBbbW9tZW50KCkuc3VidHJhY3QoMjksICdkYXlzJyksIG1vbWVudCgpXSxcclxuICAgICAgICAgICAgICAgICdUaGlzIE1vbnRoJzogW21vbWVudCgpLnN0YXJ0T2YoJ21vbnRoJyksIG1vbWVudCgpLmVuZE9mKCdtb250aCcpXSxcclxuICAgICAgICAgICAgICAgICdMYXN0IE1vbnRoJzogW21vbWVudCgpLnN1YnRyYWN0KDEsICdtb250aCcpLnN0YXJ0T2YoJ21vbnRoJyksIG1vbWVudCgpLnN1YnRyYWN0KDEsICdtb250aCcpLmVuZE9mKCdtb250aCcpXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBjYik7XHJcblxyXG4gICAgICAgICAgICBjYihzdGFydCwgZW5kKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5pdENoZWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFRvZ2dsZSBIYW5kbGVyXHJcbiAgICAgICAgS1RVdGlsLm9uKGRvY3VtZW50LmJvZHksICdbZGF0YS1rdC1jaGVjaz1cInRydWVcIl0nLCAnY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIGNoZWNrID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIHRhcmdldHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGNoZWNrLmdldEF0dHJpYnV0ZSgnZGF0YS1rdC1jaGVjay10YXJnZXQnKSk7XHJcblxyXG4gICAgICAgICAgICBLVFV0aWwuZWFjaCh0YXJnZXRzLCBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LnR5cGUgPT0gJ2NoZWNrYm94Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5jaGVja2VkID0gY2hlY2suY2hlY2tlZDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5pdFNlbGVjdDIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgalF1ZXJ5IGluY2x1ZGVkXHJcbiAgICAgICAgaWYgKHR5cGVvZiBqUXVlcnkgPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgc2VsZWN0MiBpbmNsdWRlZFxyXG4gICAgICAgIGlmICh0eXBlb2YgJC5mbi5zZWxlY3QyID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZWxlbWVudHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWNvbnRyb2w9XCJzZWxlY3QyXCJdLCBbZGF0YS1rdC1zZWxlY3QyPVwidHJ1ZVwiXScpKTtcclxuXHJcbiAgICAgICAgZWxlbWVudHMubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgZGlyOiBkb2N1bWVudC5ib2R5LmdldEF0dHJpYnV0ZSgnZGlyZWN0aW9uJylcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1oaWRlLXNlYXJjaCcpID09ICd0cnVlJykge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5taW5pbXVtUmVzdWx0c0ZvclNlYXJjaCA9IEluZmluaXR5O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkKGVsZW1lbnQpLnNlbGVjdDIob3B0aW9ucyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgKiBIYWNreSBmaXggZm9yIGEgYnVnIGluIHNlbGVjdDIgd2l0aCBqUXVlcnkgMy42LjAncyBuZXcgbmVzdGVkLWZvY3VzIFwicHJvdGVjdGlvblwiXHJcbiAgICAgICAgKiBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9zZWxlY3QyL3NlbGVjdDIvaXNzdWVzLzU5OTNcclxuICAgICAgICAqIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvaXNzdWVzLzQzODJcclxuICAgICAgICAqXHJcbiAgICAgICAgKiBUT0RPOiBSZWNoZWNrIHdpdGggdGhlIHNlbGVjdDIgR0ggaXNzdWUgYW5kIHJlbW92ZSBvbmNlIHRoaXMgaXMgZml4ZWQgb24gdGhlaXIgc2lkZVxyXG4gICAgICAgICovXHJcblxyXG4gICAgICAgIGlmIChzZWxlY3QyRm9jdXNGaXhJbml0aWFsaXplZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgc2VsZWN0MkZvY3VzRml4SW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgJChkb2N1bWVudCkub24oJ3NlbGVjdDI6b3BlbicsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWxlY3QyLWNvbnRhaW5lci0tb3BlbiAuc2VsZWN0Mi1zZWFyY2hfX2ZpZWxkJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzW2VsZW1lbnRzLmxlbmd0aCAtIDFdLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9ICAgICAgICBcclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFyIGluaXRNb2RhbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIEFwcGx5IGZpeCBmb3IgRmlyZWZveCdzIGtub3duIGJ1ZyB3aXRoIEZsYXRwaWNrciBhbmQgb3RoZXIgaW5wdXRzIGZvY3VzIHN0YXRlXHJcbiAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdmaXJlZm94JykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFsbE1vZGFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbDpub3QoLmluaXRpYWxpemVkKScpO1xyXG5cclxuICAgICAgICAgICAgYWxsTW9kYWxzLmZvckVhY2gobW9kYWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignc2hvd24uYnMubW9kYWwnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBib290c3RyYXAuTW9kYWwuZ2V0SW5zdGFuY2UodGhpcykuaGFuZGxlVXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdpbml0aWFsaXplZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KDIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5pdEF1dG9zaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpbnB1dHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWt0LWF1dG9zaXplPVwidHJ1ZVwiXScpKTtcclxuXHJcbiAgICAgICAgaW5wdXRzLm1hcChmdW5jdGlvbiAoaW5wdXQpIHtcclxuICAgICAgICAgICAgYXV0b3NpemUoaW5wdXQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpbml0Q291bnRVcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWt0LWNvdW50dXA9XCJ0cnVlXCJdOm5vdCguY291bnRlZCknKSk7XHJcblxyXG4gICAgICAgIGVsZW1lbnRzLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAoS1RVdGlsLmlzSW5WaWV3cG9ydChlbGVtZW50KSAmJiBLVFV0aWwudmlzaWJsZShlbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1rdC1jb3VudHVwLXZhbHVlJyk7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUucmVwbGFjZSgvLC9nLCBcIlwiKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLWt0LWNvdW50dXAtc3RhcnQtdmFsJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnN0YXJ0VmFsID0gcGFyc2VGbG9hdChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1rdC1jb3VudHVwLXN0YXJ0LXZhbCcpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEta3QtY291bnR1cC1kdXJhdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5kdXJhdGlvbiA9IHBhcnNlSW50KGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWt0LWNvdW50dXAtZHVyYXRpb24nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLWt0LWNvdW50dXAtZGVjaW1hbC1wbGFjZXMnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZGVjaW1hbFBsYWNlcyA9IHBhcnNlSW50KGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWt0LWNvdW50dXAtZGVjaW1hbC1wbGFjZXMnKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLWt0LWNvdW50dXAtcHJlZml4JykpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnByZWZpeCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWt0LWNvdW50dXAtcHJlZml4Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLWt0LWNvdW50dXAtc2VwYXJhdG9yJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnNlcGFyYXRvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWt0LWNvdW50dXAtc2VwYXJhdG9yJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLWt0LWNvdW50dXAtc3VmZml4JykpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnN1ZmZpeCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWt0LWNvdW50dXAtc3VmZml4Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gbmV3IGNvdW50VXAuQ291bnRVcChlbGVtZW50LCB2YWx1ZSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICAgICAgY291bnQuc3RhcnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NvdW50ZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpbml0Q291bnRVcFRhYnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gSW5pdGlhbCBjYWxsXHJcbiAgICAgICAgaW5pdENvdW50VXAoKTtcclxuXHJcbiAgICAgICAgLy8gV2luZG93IHNjcm9sbCBldmVudCBoYW5kbGVyXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluaXRDb3VudFVwKTtcclxuXHJcbiAgICAgICAgLy8gVGFicyBzaG93biBldmVudCBoYW5kbGVyXHJcbiAgICAgICAgdmFyIHRhYnMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWt0LWNvdW50dXAtdGFicz1cInRydWVcIl1bZGF0YS1icy10b2dnbGU9XCJ0YWJcIl0nKSk7XHJcbiAgICAgICAgdGFicy5tYXAoZnVuY3Rpb24gKHRhYikge1xyXG4gICAgICAgICAgICB0YWIuYWRkRXZlbnRMaXN0ZW5lcignc2hvd24uYnMudGFiJywgaW5pdENvdW50VXApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpbml0VGlueVNsaWRlcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gSW5pdCBTbGlkZXJcclxuICAgICAgICB2YXIgaW5pdFNsaWRlciA9IGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICBpZiAoIWVsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRuc09wdGlvbnMgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIGJvb2xlYW5cclxuICAgICAgICAgICAgY29uc3QgY2hlY2tCb29sID0gZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsID09PSAnZmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIGdldCBleHRyYSBvcHRpb25zIHZpYSBkYXRhIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgZWwuZ2V0QXR0cmlidXRlTmFtZXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gbW9yZSBvcHRpb25zOyBodHRwczovL2dpdGh1Yi5jb20vZ2FubGFueXVhbi90aW55LXNsaWRlciNvcHRpb25zXHJcbiAgICAgICAgICAgICAgICBpZiAoKC9eZGF0YS10bnMtLiovZykudGVzdChhdHRyTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb3B0aW9uTmFtZSA9IGF0dHJOYW1lLnJlcGxhY2UoJ2RhdGEtdG5zLScsICcnKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyg/OltcXHMtXSlcXHcvZywgZnVuY3Rpb24gKG1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaC5yZXBsYWNlKCctJywgJycpLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRyTmFtZSA9PT0gJ2RhdGEtdG5zLXJlc3BvbnNpdmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpeCBzdHJpbmcgd2l0aCBhIHZhbGlkIGpzb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QganNvblN0ciA9IGVsLmdldEF0dHJpYnV0ZShhdHRyTmFtZSkucmVwbGFjZSgvKFxcdys6KXwoXFx3KyA6KS9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdcIicgKyBtYXRjaGVkLnN1YnN0cmluZygwLCBtYXRjaGVkLmxlbmd0aCAtIDEpICsgJ1wiOic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29udmVydCBqc29uIHN0cmluZyB0byBvYmplY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRuc09wdGlvbnNbb3B0aW9uTmFtZV0gPSBKU09OLnBhcnNlKGpzb25TdHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRuc09wdGlvbnNbb3B0aW9uTmFtZV0gPSBjaGVja0Jvb2woZWwuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9wdCA9IE9iamVjdC5hc3NpZ24oe30sIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogZWwsXHJcbiAgICAgICAgICAgICAgICBzbGlkZUJ5OiAncGFnZScsXHJcbiAgICAgICAgICAgICAgICBhdXRvcGxheTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGF1dG9wbGF5QnV0dG9uT3V0cHV0OiBmYWxzZSxcclxuICAgICAgICAgICAgfSwgdG5zT3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZWwuY2xvc2VzdCgnLnRucycpKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoZWwuY2xvc2VzdCgnLnRucycpLCAndG5zLWluaXRpYXpsaWVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0bnMob3B0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNsaWRlcnNcclxuICAgICAgICBjb25zdCBlbGVtZW50cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXRucz1cInRydWVcIl0nKSwgMCk7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudHMgJiYgZWxlbWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgIGluaXRTbGlkZXIoZWwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpbml0U21vb3RoU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChTbW9vdGhTY3JvbGwpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBTbW9vdGhTY3JvbGwoJ2FbZGF0YS1rdC1zY3JvbGwtdG9nZ2xlXVtocmVmKj1cIiNcIl0nLCB7XHJcbiAgICAgICAgICAgICAgICBzcGVlZDogMTAwMCxcclxuICAgICAgICAgICAgICAgIHNwZWVkQXNEdXJhdGlvbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG9mZnNldDogZnVuY3Rpb24gKGFuY2hvciwgdG9nZ2xlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSW50ZWdlciBvciBGdW5jdGlvbiByZXR1cm5pbmcgYW4gaW50ZWdlci4gSG93IGZhciB0byBvZmZzZXQgdGhlIHNjcm9sbGluZyBhbmNob3IgbG9jYXRpb24gaW4gcGl4ZWxzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBleGFtcGxlIGlzIGEgZnVuY3Rpb24sIGJ1dCB5b3UgY291bGQgZG8gc29tZXRoaW5nIGFzIHNpbXBsZSBhcyBgb2Zmc2V0OiAyNWBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQW4gZXhhbXBsZSByZXR1cm5pbmcgZGlmZmVyZW50IHZhbHVlcyBiYXNlZCBvbiB3aGV0aGVyIHRoZSBjbGlja2VkIGxpbmsgd2FzIGluIHRoZSBoZWFkZXIgbmF2IG9yIG5vdFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3IuaGFzQXR0cmlidXRlKCdkYXRhLWt0LXNjcm9sbC1vZmZzZXQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gS1RVdGlsLmdldFJlc3BvbnNpdmVWYWx1ZShhbmNob3IuZ2V0QXR0cmlidXRlKCdkYXRhLWt0LXNjcm9sbC1vZmZzZXQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBzZXRUaGVtZU1vZGUgPSBmdW5jdGlvbihtb2RlLCBjYikge1xyXG4gICAgICAgIC8vIExvYWQgY3NzIGZpbGVcclxuICAgICAgICB2YXIgbG9hZENzc0ZpbGUgPSBmdW5jdGlvbihmaWxlTmFtZSwgbmV3RmlsZU5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9sZExpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibGlua1tocmVmKj0nXCIgKyBmaWxlTmFtZSArIFwiJ11cIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcclxuICAgICAgICAgICAgICAgIHZhciBocmVmID0gb2xkTGluay5ocmVmLnJlcGxhY2UoZmlsZU5hbWUsIG5ld0ZpbGVOYW1lKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbGluay5yZWwgPSAnc3R5bGVzaGVldCc7XHJcbiAgICAgICAgICAgICAgICBsaW5rLnR5cGUgPSAndGV4dC9jc3MnO1xyXG4gICAgICAgICAgICAgICAgbGluay5ocmVmID0gaHJlZjtcclxuXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5oZWFkLmluc2VydEJlZm9yZShsaW5rLCBvbGRMaW5rKTsgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJbXBvcnRhbnQgc3VjY2VzcyBhbmQgZXJyb3IgZm9yIHRoZSBwcm9taXNlXHJcbiAgICAgICAgICAgICAgICBsaW5rLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaHJlZik7XHJcbiAgICAgICAgICAgICAgICAgICAgb2xkTGluay5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgbGluay5vbmVycm9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGhyZWYpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gU2V0IHBhZ2UgbG9hZGluZyBzdGF0ZVxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgncGFnZS1sb2FkaW5nJyk7XHJcblxyXG4gICAgICAgIGlmICggbW9kZSA9PT0gJ2RhcmsnICkge1xyXG4gICAgICAgICAgICBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgICAgICAgICBsb2FkQ3NzRmlsZSgncGx1Z2lucy5idW5kbGUuY3NzJywgJ3BsdWdpbnMuZGFyay5idW5kbGUuY3NzJyksXHJcbiAgICAgICAgICAgICAgICBsb2FkQ3NzRmlsZSgnc3R5bGUuYnVuZGxlLmNzcycsICdzdHlsZS5kYXJrLmJ1bmRsZS5jc3MnKVxyXG4gICAgICAgICAgICBdKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gU2V0IGRhcmsgbW9kZSBjbGFzc1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwiZGFyay1tb2RlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBwYWdlIGxvYWRpbmcgc3JhdGVcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgncGFnZS1sb2FkaW5nJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNiIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIC8vIGVycm9yXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIG1vZGUgPT09ICdsaWdodCcgKSB7XHJcbiAgICAgICAgICAgIFByb21pc2UuYWxsKFtcclxuICAgICAgICAgICAgICAgIGxvYWRDc3NGaWxlKCdwbHVnaW5zLmRhcmsuYnVuZGxlLmNzcycsICdwbHVnaW5zLmJ1bmRsZS5jc3MnKSxcclxuICAgICAgICAgICAgICAgIGxvYWRDc3NGaWxlKCdzdHlsZS5kYXJrLmJ1bmRsZS5jc3MnLCAnc3R5bGUuYnVuZGxlLmNzcycpXHJcbiAgICAgICAgICAgIF0pLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZGFyayBtb2RlIGNsYXNzXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJkYXJrLW1vZGVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHBhZ2UgbG9hZGluZyBzcmF0ZVxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdwYWdlLWxvYWRpbmcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgaWYgKGNiIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIC8vIGVycm9yXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gICAgICAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdEJvb3RzdHJhcFRvb2x0aXBzKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluaXRCb290c3RyYXBQb3BvdmVycygpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbml0Qm9vdHN0cmFwU2Nyb2xsU3B5KCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluaXREYXRlcmFuZ2VwaWNrZXIoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5pdEJ1dHRvbnMoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5pdENoZWNrKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluaXRTZWxlY3QyKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluaXRDb3VudFVwKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluaXRDb3VudFVwVGFicygpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbml0QXV0b3NpemUoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5pdFRpbnlTbGlkZXJzKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluaXRTbW9vdGhTY3JvbGwoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5pdEJvb3RzdHJhcFRvYXN0KCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluaXRCb290c3RyYXBDb2xsYXBzZSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbml0Qm9vdHN0cmFwUm90YXRlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdFBhZ2VMb2FkZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaW5pdFBhZ2VMb2FkZXIoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0RGF0ZXJhbmdlcGlja2VyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaW5pdERhdGVyYW5nZXBpY2tlcigpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXRCb290c3RyYXBUb29sdGlwOiBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluaXRCb290c3RyYXBUb29sdGlwKGVsLCBvcHRpb25zKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0Qm9vdHN0cmFwVG9vbHRpcHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaW5pdEJvb3RzdHJhcFRvb2x0aXBzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdEJvb3RzdHJhcE1vZGFsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaW5pdE1vZGFsKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdEJvb3RzdHJhcFBvcG92ZXJzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGluaXRCb290c3RyYXBQb3BvdmVycygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXRCb290c3RyYXBQb3BvdmVyOiBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluaXRCb290c3RyYXBQb3BvdmVyKGVsLCBvcHRpb25zKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0Qm9vdHN0cmFwU2Nyb2xsU3B5OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGluaXRCb290c3RyYXBTY3JvbGxTcHkoKTtcclxuICAgICAgICB9LCAgICAgICAgXHJcblxyXG4gICAgICAgIGluaXRCb290c3RyYXBUb2FzdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpbml0Qm9vdHN0cmFwVG9hc3QoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0Qm9vdHN0cmFwQ29sbGFwc2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpbml0Qm9vdHN0cmFwQ29sbGFwc2UoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0Qm9vdHN0cmFwUm90YXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaW5pdEJvb3RzdHJhcFJvdGF0ZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXRCdXR0b25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGluaXRCdXR0b25zKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdENoZWNrOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGluaXRDaGVjaygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXRTZWxlY3QyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGluaXRTZWxlY3QyKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdENvdW50VXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaW5pdENvdW50VXAoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0Q291bnRVcFRhYnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaW5pdENvdW50VXBUYWJzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdEF1dG9zaXplOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGluaXRBdXRvc2l6ZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXRUaW55U2xpZGVyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpbml0VGlueVNsaWRlcnMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0U21vb3RoU2Nyb2xsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGluaXRTbW9vdGhTY3JvbGwoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpc0RhcmtNb2RlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucygnZGFyay1tb2RlJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0VGhlbWVNb2RlOiBmdW5jdGlvbihtb2RlLCBjYikge1xyXG4gICAgICAgICAgICBzZXRUaGVtZU1vZGUobW9kZSwgY2IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0oKTtcclxuXHJcbi8vIEluaXRpYWxpemUgYXBwIG9uIGRvY3VtZW50IHJlYWR5XHJcbktUVXRpbC5vbkRPTUNvbnRlbnRMb2FkZWQoZnVuY3Rpb24gKCkge1xyXG4gICAgS1RBcHAuaW5pdCgpO1xyXG59KTtcclxuXHJcbi8vIEluaXRpYWxpemUgcGFnZSBsb2FkZXIgb24gd2luZG93IGxvYWRcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgS1RBcHAuaW5pdFBhZ2VMb2FkZXIoKTtcclxufSk7XHJcblxyXG4vLyBEZWNsYXJlIEtUQXBwIGZvciBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gS1RBcHA7XHJcbn0iXSwibmFtZXMiOlsiS1RBcHAiLCJzZWxlY3QyRm9jdXNGaXhJbml0aWFsaXplZCIsImluaXRQYWdlTG9hZGVyIiwiS1RVdGlsIiwicmVtb3ZlQ2xhc3MiLCJkb2N1bWVudCIsImJvZHkiLCJpbml0Qm9vdHN0cmFwVG9vbHRpcCIsImVsIiwib3B0aW9ucyIsImRlbGF5IiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwidHAiLCJib290c3RyYXAiLCJUb29sdGlwIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJoaWRlIiwiaW5pdEJvb3RzdHJhcFRvb2x0aXBzIiwidG9vbHRpcFRyaWdnZXJMaXN0Iiwic2xpY2UiLCJjYWxsIiwicXVlcnlTZWxlY3RvckFsbCIsInRvb2x0aXBMaXN0IiwibWFwIiwidG9vbHRpcFRyaWdnZXJFbCIsImluaXRCb290c3RyYXBQb3BvdmVyIiwicG9wb3ZlciIsIlBvcG92ZXIiLCJkaXNtaXNzSGFuZGxlciIsImRpc21pc3NFbCIsImdldEVsZW1lbnRCeUlkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImluaXRCb290c3RyYXBQb3BvdmVycyIsInBvcG92ZXJUcmlnZ2VyTGlzdCIsInBvcG92ZXJMaXN0IiwicG9wb3ZlclRyaWdnZXJFbCIsImluaXRCb290c3RyYXBTY3JvbGxTcHkiLCJlbGVtZW50cyIsImVsZW1lbnQiLCJzZWwiLCJzY3JvbGxDb250ZW50IiwicXVlcnlTZWxlY3RvciIsInNjcm9sbFNweSIsIlNjcm9sbFNweSIsImdldEluc3RhbmNlIiwicmVmcmVzaCIsImluaXRCb290c3RyYXBUb2FzdCIsInRvYXN0RWxMaXN0IiwidG9hc3RMaXN0IiwidG9hc3RFbCIsIlRvYXN0IiwiaW5pdEJvb3RzdHJhcENvbGxhcHNlIiwib24iLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInJlbW92ZSIsImJsdXIiLCJhZGQiLCJ0ZXh0IiwidGFyZ2V0Iiwic2V0QXR0cmlidXRlIiwiaW5uZXJUZXh0IiwiaW5pdEJvb3RzdHJhcFJvdGF0ZSIsImluaXRCdXR0b25zIiwiYnV0dG9uc0dyb3VwIiwiZ3JvdXAiLCJzZWxlY3RvciIsImJ1dHRvbnMiLCJidXR0b24iLCJpbml0RGF0ZXJhbmdlcGlja2VyIiwialF1ZXJ5IiwiJCIsImZuIiwiZGF0ZXJhbmdlcGlja2VyIiwic3RhcnQiLCJtb21lbnQiLCJzdWJ0cmFjdCIsImVuZCIsImRpc3BsYXkiLCJhdHRyT3BlbnMiLCJjYiIsImlubmVySFRNTCIsImZvcm1hdCIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJvcGVucyIsInJhbmdlcyIsInN0YXJ0T2YiLCJlbmRPZiIsImluaXRDaGVjayIsImNoZWNrIiwidGFyZ2V0cyIsImVhY2giLCJ0eXBlIiwiY2hlY2tlZCIsInRvZ2dsZSIsImluaXRTZWxlY3QyIiwic2VsZWN0MiIsImRpciIsIm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoIiwiSW5maW5pdHkiLCJsZW5ndGgiLCJmb2N1cyIsImluaXRNb2RhbCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRvTG93ZXJDYXNlIiwiaW5kZXhPZiIsImFsbE1vZGFscyIsImZvckVhY2giLCJtb2RhbCIsIk1vZGFsIiwiaGFuZGxlVXBkYXRlIiwiYWxlcnQiLCJpbml0QXV0b3NpemUiLCJpbnB1dHMiLCJpbnB1dCIsImF1dG9zaXplIiwiaW5pdENvdW50VXAiLCJpc0luVmlld3BvcnQiLCJ2aXNpYmxlIiwidmFsdWUiLCJwYXJzZUZsb2F0IiwicmVwbGFjZSIsInN0YXJ0VmFsIiwiZHVyYXRpb24iLCJwYXJzZUludCIsImRlY2ltYWxQbGFjZXMiLCJwcmVmaXgiLCJzZXBhcmF0b3IiLCJzdWZmaXgiLCJjb3VudCIsImNvdW50VXAiLCJDb3VudFVwIiwiaW5pdENvdW50VXBUYWJzIiwid2luZG93IiwidGFicyIsInRhYiIsImluaXRUaW55U2xpZGVycyIsImluaXRTbGlkZXIiLCJ0bnNPcHRpb25zIiwiY2hlY2tCb29sIiwidmFsIiwiZ2V0QXR0cmlidXRlTmFtZXMiLCJhdHRyTmFtZSIsInRlc3QiLCJvcHRpb25OYW1lIiwibWF0Y2giLCJ0b1VwcGVyQ2FzZSIsImpzb25TdHIiLCJtYXRjaGVkIiwic3Vic3RyaW5nIiwiSlNPTiIsInBhcnNlIiwib3B0IiwiT2JqZWN0IiwiYXNzaWduIiwiY29udGFpbmVyIiwic2xpZGVCeSIsImF1dG9wbGF5IiwiYXV0b3BsYXlCdXR0b25PdXRwdXQiLCJjbG9zZXN0IiwiYWRkQ2xhc3MiLCJ0bnMiLCJBcnJheSIsInByb3RvdHlwZSIsImluaXRTbW9vdGhTY3JvbGwiLCJTbW9vdGhTY3JvbGwiLCJzcGVlZCIsInNwZWVkQXNEdXJhdGlvbiIsIm9mZnNldCIsImFuY2hvciIsImdldFJlc3BvbnNpdmVWYWx1ZSIsInNldFRoZW1lTW9kZSIsIm1vZGUiLCJsb2FkQ3NzRmlsZSIsImZpbGVOYW1lIiwibmV3RmlsZU5hbWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9sZExpbmsiLCJsaW5rIiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJyZWwiLCJoZWFkIiwiaW5zZXJ0QmVmb3JlIiwib25sb2FkIiwib25lcnJvciIsImFsbCIsInRoZW4iLCJGdW5jdGlvbiIsImluaXQiLCJpbml0Qm9vdHN0cmFwTW9kYWwiLCJpc0RhcmtNb2RlIiwib25ET01Db250ZW50TG9hZGVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/src/js/layout/app.js\n");

/***/ }),

/***/ "./resources/src/js/layout/aside.js":
/*!******************************************!*\
  !*** ./resources/src/js/layout/aside.js ***!
  \******************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTLayoutAside = function () {\n  // Private variables\n  var toggle;\n  var aside;\n\n  // Private functions\n  var handleToggle = function handleToggle() {\n    var toggleObj = KTToggle.getInstance(toggle);\n\n    // Add a class to prevent aside hover effect after toggle click\n    toggleObj.on('kt.toggle.change', function () {\n      aside.classList.add('animating');\n      setTimeout(function () {\n        aside.classList.remove('animating');\n      }, 300);\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init() {\n      // Elements\n      aside = document.querySelector('#kt_aside');\n      toggle = document.querySelector('#kt_aside_toggle');\n      if (!aside || !toggle) {\n        return;\n      }\n      handleToggle();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTLayoutAside.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc3JjL2pzL2xheW91dC9hc2lkZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLElBQUlBLGFBQWEsR0FBRyxZQUFZO0VBQzVCO0VBQ0EsSUFBSUMsTUFBTTtFQUNWLElBQUlDLEtBQUs7O0VBRVQ7RUFDQSxJQUFJQyxZQUFZLEdBQUcsU0FBZkEsWUFBWUEsQ0FBQSxFQUFlO0lBQzVCLElBQUlDLFNBQVMsR0FBR0MsUUFBUSxDQUFDQyxXQUFXLENBQUNMLE1BQU0sQ0FBQzs7SUFFNUM7SUFDQUcsU0FBUyxDQUFDRyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsWUFBVztNQUN4Q0wsS0FBSyxDQUFDTSxTQUFTLENBQUNDLEdBQUcsQ0FBQyxXQUFXLENBQUM7TUFFaENDLFVBQVUsQ0FBQyxZQUFXO1FBQ2pCUixLQUFLLENBQUNNLFNBQVMsQ0FBQ0csTUFBTSxDQUFDLFdBQVcsQ0FBQztNQUN4QyxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQ1gsQ0FBQyxDQUFDO0VBQ0wsQ0FBQzs7RUFFRDtFQUNBLE9BQU87SUFDSEMsSUFBSSxFQUFFLFNBQUFBLEtBQUEsRUFBWTtNQUNkO01BQ0FWLEtBQUssR0FBR1csUUFBUSxDQUFDQyxhQUFhLENBQUMsV0FBVyxDQUFDO01BQzNDYixNQUFNLEdBQUdZLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGtCQUFrQixDQUFDO01BRW5ELElBQUksQ0FBQ1osS0FBSyxJQUFJLENBQUNELE1BQU0sRUFBRTtRQUNuQjtNQUNKO01BRUFFLFlBQVksRUFBRTtJQUNsQjtFQUNKLENBQUM7QUFDTCxDQUFDLEVBQUU7O0FBRUg7QUFDQVksTUFBTSxDQUFDQyxrQkFBa0IsQ0FBQyxZQUFZO0VBQ2xDaEIsYUFBYSxDQUFDWSxJQUFJLEVBQUU7QUFDeEIsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9qcy9sYXlvdXQvYXNpZGUuanM/OTg2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIENsYXNzIGRlZmluaXRpb25cclxudmFyIEtUTGF5b3V0QXNpZGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBQcml2YXRlIHZhcmlhYmxlc1xyXG4gICAgdmFyIHRvZ2dsZTtcclxuICAgIHZhciBhc2lkZTtcclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgdmFyIGhhbmRsZVRvZ2dsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgIHZhciB0b2dnbGVPYmogPSBLVFRvZ2dsZS5nZXRJbnN0YW5jZSh0b2dnbGUpO1xyXG5cclxuICAgICAgIC8vIEFkZCBhIGNsYXNzIHRvIHByZXZlbnQgYXNpZGUgaG92ZXIgZWZmZWN0IGFmdGVyIHRvZ2dsZSBjbGlja1xyXG4gICAgICAgdG9nZ2xlT2JqLm9uKCdrdC50b2dnbGUuY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgYXNpZGUuY2xhc3NMaXN0LmFkZCgnYW5pbWF0aW5nJyk7XHJcblxyXG4gICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBhc2lkZS5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRpbmcnKTtcclxuICAgICAgICAgICB9LCAzMDApO1xyXG4gICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEVsZW1lbnRzXHJcbiAgICAgICAgICAgIGFzaWRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2t0X2FzaWRlJyk7XHJcbiAgICAgICAgICAgIHRvZ2dsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9hc2lkZV90b2dnbGUnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghYXNpZGUgfHwgIXRvZ2dsZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBoYW5kbGVUb2dnbGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KCk7XHJcblxyXG4vLyBPbiBkb2N1bWVudCByZWFkeVxyXG5LVFV0aWwub25ET01Db250ZW50TG9hZGVkKGZ1bmN0aW9uICgpIHtcclxuICAgIEtUTGF5b3V0QXNpZGUuaW5pdCgpO1xyXG59KTsiXSwibmFtZXMiOlsiS1RMYXlvdXRBc2lkZSIsInRvZ2dsZSIsImFzaWRlIiwiaGFuZGxlVG9nZ2xlIiwidG9nZ2xlT2JqIiwiS1RUb2dnbGUiLCJnZXRJbnN0YW5jZSIsIm9uIiwiY2xhc3NMaXN0IiwiYWRkIiwic2V0VGltZW91dCIsInJlbW92ZSIsImluaXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJLVFV0aWwiLCJvbkRPTUNvbnRlbnRMb2FkZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/src/js/layout/aside.js\n");

/***/ }),

/***/ "./resources/src/js/layout/search.js":
/*!*******************************************!*\
  !*** ./resources/src/js/layout/search.js ***!
  \*******************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTLayoutSearch = function () {\n  // Private variables\n  var element;\n  var formElement;\n  var mainElement;\n  var resultsElement;\n  var wrapperElement;\n  var emptyElement;\n  var preferencesElement;\n  var preferencesShowElement;\n  var preferencesDismissElement;\n  var advancedOptionsFormElement;\n  var advancedOptionsFormShowElement;\n  var advancedOptionsFormCancelElement;\n  var advancedOptionsFormSearchElement;\n  var searchObject;\n\n  // Private functions\n  var processs = function processs(search) {\n    var timeout = setTimeout(function () {\n      var number = KTUtil.getRandomInt(1, 3);\n\n      // Hide recently viewed\n      mainElement.classList.add('d-none');\n      if (number === 3) {\n        // Hide results\n        resultsElement.classList.add('d-none');\n        // Show empty message \n        emptyElement.classList.remove('d-none');\n      } else {\n        // Show results\n        resultsElement.classList.remove('d-none');\n        // Hide empty message \n        emptyElement.classList.add('d-none');\n      }\n\n      // Complete search\n      search.complete();\n    }, 1500);\n  };\n  var clear = function clear(search) {\n    // Show recently viewed\n    mainElement.classList.remove('d-none');\n    // Hide results\n    resultsElement.classList.add('d-none');\n    // Hide empty message \n    emptyElement.classList.add('d-none');\n  };\n  var handlePreferences = function handlePreferences() {\n    // Preference show handler\n    preferencesShowElement.addEventListener('click', function () {\n      wrapperElement.classList.add('d-none');\n      preferencesElement.classList.remove('d-none');\n    });\n\n    // Preference dismiss handler\n    preferencesDismissElement.addEventListener('click', function () {\n      wrapperElement.classList.remove('d-none');\n      preferencesElement.classList.add('d-none');\n    });\n  };\n  var handleAdvancedOptionsForm = function handleAdvancedOptionsForm() {\n    // Show\n    advancedOptionsFormShowElement.addEventListener('click', function () {\n      wrapperElement.classList.add('d-none');\n      advancedOptionsFormElement.classList.remove('d-none');\n    });\n\n    // Cancel\n    advancedOptionsFormCancelElement.addEventListener('click', function () {\n      wrapperElement.classList.remove('d-none');\n      advancedOptionsFormElement.classList.add('d-none');\n    });\n\n    // Search\n    advancedOptionsFormSearchElement.addEventListener('click', function () {});\n  };\n\n  // Public methods\n  return {\n    init: function init() {\n      // Elements\n      element = document.querySelector('#kt_header_search');\n      if (!element) {\n        return;\n      }\n      wrapperElement = element.querySelector('[data-kt-search-element=\"wrapper\"]');\n      formElement = element.querySelector('[data-kt-search-element=\"form\"]');\n      mainElement = element.querySelector('[data-kt-search-element=\"main\"]');\n      resultsElement = element.querySelector('[data-kt-search-element=\"results\"]');\n      emptyElement = element.querySelector('[data-kt-search-element=\"empty\"]');\n      preferencesElement = element.querySelector('[data-kt-search-element=\"preferences\"]');\n      preferencesShowElement = element.querySelector('[data-kt-search-element=\"preferences-show\"]');\n      preferencesDismissElement = element.querySelector('[data-kt-search-element=\"preferences-dismiss\"]');\n      advancedOptionsFormElement = element.querySelector('[data-kt-search-element=\"advanced-options-form\"]');\n      advancedOptionsFormShowElement = element.querySelector('[data-kt-search-element=\"advanced-options-form-show\"]');\n      advancedOptionsFormCancelElement = element.querySelector('[data-kt-search-element=\"advanced-options-form-cancel\"]');\n      advancedOptionsFormSearchElement = element.querySelector('[data-kt-search-element=\"advanced-options-form-search\"]');\n\n      // Initialize search handler\n      searchObject = new KTSearch(element);\n\n      // Search handler\n      searchObject.on('kt.search.process', processs);\n\n      // Clear handler\n      searchObject.on('kt.search.clear', clear);\n\n      // Custom handlers\n      handlePreferences();\n      handleAdvancedOptionsForm();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTLayoutSearch.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/layout/search.js\n");

/***/ }),

/***/ "./resources/src/js/layout/toolbar.js":
/*!********************************************!*\
  !*** ./resources/src/js/layout/toolbar.js ***!
  \********************************************/
/***/ (() => {

"use strict";
eval("\n\n// Class definition\nvar KTLayoutToolbar = function () {\n  // Private variables\n  var toolbar;\n\n  // Private functions\n  var initForm = function initForm() {\n    var rangeSlider = document.querySelector(\"#kt_toolbar_slider\");\n    var rangeSliderValueElement = document.querySelector(\"#kt_toolbar_slider_value\");\n    if (!rangeSlider) {\n      return;\n    }\n    noUiSlider.create(rangeSlider, {\n      start: [5],\n      connect: [true, false],\n      step: 1,\n      format: wNumb({\n        decimals: 1\n      }),\n      range: {\n        min: [1],\n        max: [10]\n      }\n    });\n    rangeSlider.noUiSlider.on(\"update\", function (values, handle) {\n      rangeSliderValueElement.innerHTML = values[handle];\n    });\n    var handle = rangeSlider.querySelector(\".noUi-handle\");\n    handle.setAttribute(\"tabindex\", 0);\n    handle.addEventListener(\"click\", function () {\n      this.focus();\n    });\n    handle.addEventListener(\"keydown\", function (event) {\n      var value = Number(rangeSlider.noUiSlider.get());\n      switch (event.which) {\n        case 37:\n          rangeSlider.noUiSlider.set(value - 1);\n          break;\n        case 39:\n          rangeSlider.noUiSlider.set(value + 1);\n          break;\n      }\n    });\n  };\n\n  // Public methods\n  return {\n    init: function init() {\n      // Elements\n      toolbar = document.querySelector('#kt_toolbar');\n      if (!toolbar) {\n        return;\n      }\n      initForm();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTLayoutToolbar.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc3JjL2pzL2xheW91dC90b29sYmFyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0EsSUFBSUEsZUFBZSxHQUFHLFlBQVk7RUFDOUI7RUFDQSxJQUFJQyxPQUFPOztFQUVYO0VBQ0EsSUFBSUMsUUFBUSxHQUFHLFNBQVhBLFFBQVFBLENBQUEsRUFBZTtJQUN2QixJQUFJQyxXQUFXLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLG9CQUFvQixDQUFDO0lBQzlELElBQUlDLHVCQUF1QixHQUFHRixRQUFRLENBQUNDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQztJQUVoRixJQUFJLENBQUNGLFdBQVcsRUFBRTtNQUNkO0lBQ0o7SUFFQUksVUFBVSxDQUFDQyxNQUFNLENBQUNMLFdBQVcsRUFBRTtNQUMzQk0sS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO01BQ1ZDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7TUFDdEJDLElBQUksRUFBRSxDQUFDO01BQ1BDLE1BQU0sRUFBRUMsS0FBSyxDQUFDO1FBQ1ZDLFFBQVEsRUFBRTtNQUNkLENBQUMsQ0FBQztNQUNGQyxLQUFLLEVBQUU7UUFDSEMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ1JDLEdBQUcsRUFBRSxDQUFDLEVBQUU7TUFDWjtJQUNKLENBQUMsQ0FBQztJQUVGZCxXQUFXLENBQUNJLFVBQVUsQ0FBQ1csRUFBRSxDQUFDLFFBQVEsRUFBRSxVQUFVQyxNQUFNLEVBQUVDLE1BQU0sRUFBRTtNQUMxRGQsdUJBQXVCLENBQUNlLFNBQVMsR0FBR0YsTUFBTSxDQUFDQyxNQUFNLENBQUM7SUFDdEQsQ0FBQyxDQUFDO0lBRUYsSUFBSUEsTUFBTSxHQUFHakIsV0FBVyxDQUFDRSxhQUFhLENBQUMsY0FBYyxDQUFDO0lBRXREZSxNQUFNLENBQUNFLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBRWxDRixNQUFNLENBQUNHLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFZO01BQ3pDLElBQUksQ0FBQ0MsS0FBSyxFQUFFO0lBQ2hCLENBQUMsQ0FBQztJQUVGSixNQUFNLENBQUNHLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxVQUFVRSxLQUFLLEVBQUU7TUFDaEQsSUFBSUMsS0FBSyxHQUFHQyxNQUFNLENBQUN4QixXQUFXLENBQUNJLFVBQVUsQ0FBQ3FCLEdBQUcsRUFBRSxDQUFDO01BRWhELFFBQVFILEtBQUssQ0FBQ0ksS0FBSztRQUNmLEtBQUssRUFBRTtVQUNIMUIsV0FBVyxDQUFDSSxVQUFVLENBQUN1QixHQUFHLENBQUNKLEtBQUssR0FBRyxDQUFDLENBQUM7VUFDckM7UUFDSixLQUFLLEVBQUU7VUFDSHZCLFdBQVcsQ0FBQ0ksVUFBVSxDQUFDdUIsR0FBRyxDQUFDSixLQUFLLEdBQUcsQ0FBQyxDQUFDO1VBQ3JDO01BQU07SUFFbEIsQ0FBQyxDQUFDO0VBQ04sQ0FBQzs7RUFFRDtFQUNBLE9BQU87SUFDSEssSUFBSSxFQUFFLFNBQUFBLEtBQUEsRUFBWTtNQUNkO01BQ0E5QixPQUFPLEdBQUdHLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGFBQWEsQ0FBQztNQUUvQyxJQUFJLENBQUNKLE9BQU8sRUFBRTtRQUNWO01BQ0o7TUFFQUMsUUFBUSxFQUFFO0lBQ2Q7RUFDSixDQUFDO0FBQ0wsQ0FBQyxFQUFFOztBQUVIO0FBQ0E4QixNQUFNLENBQUNDLGtCQUFrQixDQUFDLFlBQVk7RUFDbENqQyxlQUFlLENBQUMrQixJQUFJLEVBQUU7QUFDMUIsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9qcy9sYXlvdXQvdG9vbGJhci5qcz82NDEwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gQ2xhc3MgZGVmaW5pdGlvblxyXG52YXIgS1RMYXlvdXRUb29sYmFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gUHJpdmF0ZSB2YXJpYWJsZXNcclxuICAgIHZhciB0b29sYmFyO1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgaW5pdEZvcm0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJhbmdlU2xpZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrdF90b29sYmFyX3NsaWRlclwiKTtcclxuICAgICAgICB2YXIgcmFuZ2VTbGlkZXJWYWx1ZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2t0X3Rvb2xiYXJfc2xpZGVyX3ZhbHVlXCIpO1xyXG5cclxuICAgICAgICBpZiAoIXJhbmdlU2xpZGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG5vVWlTbGlkZXIuY3JlYXRlKHJhbmdlU2xpZGVyLCB7XHJcbiAgICAgICAgICAgIHN0YXJ0OiBbNV0sXHJcbiAgICAgICAgICAgIGNvbm5lY3Q6IFt0cnVlLCBmYWxzZV0sXHJcbiAgICAgICAgICAgIHN0ZXA6IDEsXHJcbiAgICAgICAgICAgIGZvcm1hdDogd051bWIoe1xyXG4gICAgICAgICAgICAgICAgZGVjaW1hbHM6IDFcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHJhbmdlOiB7XHJcbiAgICAgICAgICAgICAgICBtaW46IFsxXSxcclxuICAgICAgICAgICAgICAgIG1heDogWzEwXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJhbmdlU2xpZGVyLm5vVWlTbGlkZXIub24oXCJ1cGRhdGVcIiwgZnVuY3Rpb24gKHZhbHVlcywgaGFuZGxlKSB7XHJcbiAgICAgICAgICAgIHJhbmdlU2xpZGVyVmFsdWVFbGVtZW50LmlubmVySFRNTCA9IHZhbHVlc1toYW5kbGVdO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgaGFuZGxlID0gcmFuZ2VTbGlkZXIucXVlcnlTZWxlY3RvcihcIi5ub1VpLWhhbmRsZVwiKTtcclxuXHJcbiAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIDApO1xyXG5cclxuICAgICAgICBoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IE51bWJlcihyYW5nZVNsaWRlci5ub1VpU2xpZGVyLmdldCgpKTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQud2hpY2gpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VTbGlkZXIubm9VaVNsaWRlci5zZXQodmFsdWUgLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VTbGlkZXIubm9VaVNsaWRlci5zZXQodmFsdWUgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gRWxlbWVudHNcclxuICAgICAgICAgICAgdG9vbGJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF90b29sYmFyJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRvb2xiYXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdEZvcm0oKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KCk7XHJcblxyXG4vLyBPbiBkb2N1bWVudCByZWFkeVxyXG5LVFV0aWwub25ET01Db250ZW50TG9hZGVkKGZ1bmN0aW9uICgpIHtcclxuICAgIEtUTGF5b3V0VG9vbGJhci5pbml0KCk7XHJcbn0pOyJdLCJuYW1lcyI6WyJLVExheW91dFRvb2xiYXIiLCJ0b29sYmFyIiwiaW5pdEZvcm0iLCJyYW5nZVNsaWRlciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInJhbmdlU2xpZGVyVmFsdWVFbGVtZW50Iiwibm9VaVNsaWRlciIsImNyZWF0ZSIsInN0YXJ0IiwiY29ubmVjdCIsInN0ZXAiLCJmb3JtYXQiLCJ3TnVtYiIsImRlY2ltYWxzIiwicmFuZ2UiLCJtaW4iLCJtYXgiLCJvbiIsInZhbHVlcyIsImhhbmRsZSIsImlubmVySFRNTCIsInNldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJmb2N1cyIsImV2ZW50IiwidmFsdWUiLCJOdW1iZXIiLCJnZXQiLCJ3aGljaCIsInNldCIsImluaXQiLCJLVFV0aWwiLCJvbkRPTUNvbnRlbnRMb2FkZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/src/js/layout/toolbar.js\n");

/***/ }),

/***/ "./resources/src/webpack/scripts.js":
/*!******************************************!*\
  !*** ./resources/src/webpack/scripts.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Keenthemes' plugins\nwindow.KTUtil = __webpack_require__(/*! @/src/js/components/util.js */ \"./resources/src/js/components/util.js\");\nwindow.KTEventHandler = __webpack_require__(/*! @/src/js/components/event-handler.js */ \"./resources/src/js/components/event-handler.js\");\nwindow.KTBlockUI = __webpack_require__(/*! @/src/js/components/blockui.js */ \"./resources/src/js/components/blockui.js\");\nwindow.KTCookie = __webpack_require__(/*! @/src/js/components/cookie.js */ \"./resources/src/js/components/cookie.js\");\nwindow.KTDialer = __webpack_require__(/*! @/src/js/components/dialer.js */ \"./resources/src/js/components/dialer.js\");\nwindow.KTDrawer = __webpack_require__(/*! @/src/js/components/drawer.js */ \"./resources/src/js/components/drawer.js\");\nwindow.KTFeedback = __webpack_require__(/*! @/src/js/components/feedback.js */ \"./resources/src/js/components/feedback.js\");\nwindow.KTImageInput = __webpack_require__(/*! @/src/js/components/image-input.js */ \"./resources/src/js/components/image-input.js\");\nwindow.KTMenu = __webpack_require__(/*! @/src/js/components/menu.js */ \"./resources/src/js/components/menu.js\");\nwindow.KTPasswordMeter = __webpack_require__(/*! @/src/js/components/password-meter.js */ \"./resources/src/js/components/password-meter.js\");\nwindow.KTScroll = __webpack_require__(/*! @/src/js/components/scroll.js */ \"./resources/src/js/components/scroll.js\");\nwindow.KTScrolltop = __webpack_require__(/*! @/src/js/components/scrolltop.js */ \"./resources/src/js/components/scrolltop.js\");\nwindow.KTSearch = __webpack_require__(/*! @/src/js/components/search.js */ \"./resources/src/js/components/search.js\");\nwindow.KTStepper = __webpack_require__(/*! @/src/js/components/stepper.js */ \"./resources/src/js/components/stepper.js\");\nwindow.KTSticky = __webpack_require__(/*! @/src/js/components/sticky.js */ \"./resources/src/js/components/sticky.js\");\nwindow.KTSwapper = __webpack_require__(/*! @/src/js/components/swapper.js */ \"./resources/src/js/components/swapper.js\");\nwindow.KTToggle = __webpack_require__(/*! @/src/js/components/toggle.js */ \"./resources/src/js/components/toggle.js\");\n\n// Layout base js\nwindow.KTApp = __webpack_require__(/*! @/src/js/layout/app.js */ \"./resources/src/js/layout/app.js\");\nwindow.KTLayoutAside = __webpack_require__(/*! @/src/js/layout/aside.js */ \"./resources/src/js/layout/aside.js\");\nwindow.KTLayoutSearch = __webpack_require__(/*! @/src/js/layout/search.js */ \"./resources/src/js/layout/search.js\");\nwindow.KTLayoutToolbar = __webpack_require__(/*! @/src/js/layout/toolbar.js */ \"./resources/src/js/layout/toolbar.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc3JjL3dlYnBhY2svc2NyaXB0cy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBQSxNQUFNLENBQUNDLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQywwRUFBNkIsQ0FBQztBQUN0REYsTUFBTSxDQUFDRyxjQUFjLEdBQUdELG1CQUFPLENBQUMsNEZBQXNDLENBQUM7QUFDdkVGLE1BQU0sQ0FBQ0ksU0FBUyxHQUFHRixtQkFBTyxDQUFDLGdGQUFnQyxDQUFDO0FBQzVERixNQUFNLENBQUNLLFFBQVEsR0FBR0gsbUJBQU8sQ0FBQyw4RUFBK0IsQ0FBQztBQUMxREYsTUFBTSxDQUFDTSxRQUFRLEdBQUdKLG1CQUFPLENBQUMsOEVBQStCLENBQUM7QUFDMURGLE1BQU0sQ0FBQ08sUUFBUSxHQUFHTCxtQkFBTyxDQUFDLDhFQUErQixDQUFDO0FBQzFERixNQUFNLENBQUNRLFVBQVUsR0FBR04sbUJBQU8sQ0FBQyxrRkFBaUMsQ0FBQztBQUM5REYsTUFBTSxDQUFDUyxZQUFZLEdBQUdQLG1CQUFPLENBQUMsd0ZBQW9DLENBQUM7QUFDbkVGLE1BQU0sQ0FBQ1UsTUFBTSxHQUFHUixtQkFBTyxDQUFDLDBFQUE2QixDQUFDO0FBQ3RERixNQUFNLENBQUNXLGVBQWUsR0FBR1QsbUJBQU8sQ0FBQyw4RkFBdUMsQ0FBQztBQUN6RUYsTUFBTSxDQUFDWSxRQUFRLEdBQUdWLG1CQUFPLENBQUMsOEVBQStCLENBQUM7QUFDMURGLE1BQU0sQ0FBQ2EsV0FBVyxHQUFHWCxtQkFBTyxDQUFDLG9GQUFrQyxDQUFDO0FBQ2hFRixNQUFNLENBQUNjLFFBQVEsR0FBR1osbUJBQU8sQ0FBQyw4RUFBK0IsQ0FBQztBQUMxREYsTUFBTSxDQUFDZSxTQUFTLEdBQUdiLG1CQUFPLENBQUMsZ0ZBQWdDLENBQUM7QUFDNURGLE1BQU0sQ0FBQ2dCLFFBQVEsR0FBR2QsbUJBQU8sQ0FBQyw4RUFBK0IsQ0FBQztBQUMxREYsTUFBTSxDQUFDaUIsU0FBUyxHQUFHZixtQkFBTyxDQUFDLGdGQUFnQyxDQUFDO0FBQzVERixNQUFNLENBQUNrQixRQUFRLEdBQUdoQixtQkFBTyxDQUFDLDhFQUErQixDQUFDOztBQUUxRDtBQUNBRixNQUFNLENBQUNtQixLQUFLLEdBQUdqQixtQkFBTyxDQUFDLGdFQUF3QixDQUFDO0FBQ2hERixNQUFNLENBQUNvQixhQUFhLEdBQUdsQixtQkFBTyxDQUFDLG9FQUEwQixDQUFDO0FBQzFERixNQUFNLENBQUNxQixjQUFjLEdBQUduQixtQkFBTyxDQUFDLHNFQUEyQixDQUFDO0FBQzVERixNQUFNLENBQUNzQixlQUFlLEdBQUdwQixtQkFBTyxDQUFDLHdFQUE0QixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy93ZWJwYWNrL3NjcmlwdHMuanM/NDY2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBLZWVudGhlbWVzJyBwbHVnaW5zXHJcbndpbmRvdy5LVFV0aWwgPSByZXF1aXJlKCdAL3NyYy9qcy9jb21wb25lbnRzL3V0aWwuanMnKTtcclxud2luZG93LktURXZlbnRIYW5kbGVyID0gcmVxdWlyZSgnQC9zcmMvanMvY29tcG9uZW50cy9ldmVudC1oYW5kbGVyLmpzJyk7XHJcbndpbmRvdy5LVEJsb2NrVUkgPSByZXF1aXJlKCdAL3NyYy9qcy9jb21wb25lbnRzL2Jsb2NrdWkuanMnKTtcclxud2luZG93LktUQ29va2llID0gcmVxdWlyZSgnQC9zcmMvanMvY29tcG9uZW50cy9jb29raWUuanMnKTtcclxud2luZG93LktURGlhbGVyID0gcmVxdWlyZSgnQC9zcmMvanMvY29tcG9uZW50cy9kaWFsZXIuanMnKTtcclxud2luZG93LktURHJhd2VyID0gcmVxdWlyZSgnQC9zcmMvanMvY29tcG9uZW50cy9kcmF3ZXIuanMnKTtcclxud2luZG93LktURmVlZGJhY2sgPSByZXF1aXJlKCdAL3NyYy9qcy9jb21wb25lbnRzL2ZlZWRiYWNrLmpzJyk7XHJcbndpbmRvdy5LVEltYWdlSW5wdXQgPSByZXF1aXJlKCdAL3NyYy9qcy9jb21wb25lbnRzL2ltYWdlLWlucHV0LmpzJyk7XHJcbndpbmRvdy5LVE1lbnUgPSByZXF1aXJlKCdAL3NyYy9qcy9jb21wb25lbnRzL21lbnUuanMnKTtcclxud2luZG93LktUUGFzc3dvcmRNZXRlciA9IHJlcXVpcmUoJ0Avc3JjL2pzL2NvbXBvbmVudHMvcGFzc3dvcmQtbWV0ZXIuanMnKTtcclxud2luZG93LktUU2Nyb2xsID0gcmVxdWlyZSgnQC9zcmMvanMvY29tcG9uZW50cy9zY3JvbGwuanMnKTtcclxud2luZG93LktUU2Nyb2xsdG9wID0gcmVxdWlyZSgnQC9zcmMvanMvY29tcG9uZW50cy9zY3JvbGx0b3AuanMnKTtcclxud2luZG93LktUU2VhcmNoID0gcmVxdWlyZSgnQC9zcmMvanMvY29tcG9uZW50cy9zZWFyY2guanMnKTtcclxud2luZG93LktUU3RlcHBlciA9IHJlcXVpcmUoJ0Avc3JjL2pzL2NvbXBvbmVudHMvc3RlcHBlci5qcycpO1xyXG53aW5kb3cuS1RTdGlja3kgPSByZXF1aXJlKCdAL3NyYy9qcy9jb21wb25lbnRzL3N0aWNreS5qcycpO1xyXG53aW5kb3cuS1RTd2FwcGVyID0gcmVxdWlyZSgnQC9zcmMvanMvY29tcG9uZW50cy9zd2FwcGVyLmpzJyk7XHJcbndpbmRvdy5LVFRvZ2dsZSA9IHJlcXVpcmUoJ0Avc3JjL2pzL2NvbXBvbmVudHMvdG9nZ2xlLmpzJyk7XHJcblxyXG4vLyBMYXlvdXQgYmFzZSBqc1xyXG53aW5kb3cuS1RBcHAgPSByZXF1aXJlKCdAL3NyYy9qcy9sYXlvdXQvYXBwLmpzJyk7XHJcbndpbmRvdy5LVExheW91dEFzaWRlID0gcmVxdWlyZSgnQC9zcmMvanMvbGF5b3V0L2FzaWRlLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFNlYXJjaCA9IHJlcXVpcmUoJ0Avc3JjL2pzL2xheW91dC9zZWFyY2guanMnKTtcclxud2luZG93LktUTGF5b3V0VG9vbGJhciA9IHJlcXVpcmUoJ0Avc3JjL2pzL2xheW91dC90b29sYmFyLmpzJyk7XHJcbiJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJLVFV0aWwiLCJyZXF1aXJlIiwiS1RFdmVudEhhbmRsZXIiLCJLVEJsb2NrVUkiLCJLVENvb2tpZSIsIktURGlhbGVyIiwiS1REcmF3ZXIiLCJLVEZlZWRiYWNrIiwiS1RJbWFnZUlucHV0IiwiS1RNZW51IiwiS1RQYXNzd29yZE1ldGVyIiwiS1RTY3JvbGwiLCJLVFNjcm9sbHRvcCIsIktUU2VhcmNoIiwiS1RTdGVwcGVyIiwiS1RTdGlja3kiLCJLVFN3YXBwZXIiLCJLVFRvZ2dsZSIsIktUQXBwIiwiS1RMYXlvdXRBc2lkZSIsIktUTGF5b3V0U2VhcmNoIiwiS1RMYXlvdXRUb29sYmFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/src/webpack/scripts.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/src/webpack/scripts.js");
/******/ 	
/******/ })()
;