/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/apps/customers/view/adjust-balance.js":
/*!***********************************************************************!*\
  !*** ./resources/src/js/custom/apps/customers/view/adjust-balance.js ***!
  \***********************************************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTModalAdjustBalance = function () {\n  var element;\n  var submitButton;\n  var cancelButton;\n  var closeButton;\n  var validator;\n  var maskInput;\n  var newBalance;\n  var form;\n  var modal;\n\n  // Init form inputs\n  var initForm = function initForm() {\n    // Init inputmask plugin --- For more info please refer to the official documentation here: https://github.com/RobinHerbots/Inputmask\n    Inputmask(\"US$ 9,999,999.99\", {\n      \"numericInput\": true\n    }).mask(\"#kt_modal_inputmask\");\n  };\n  var handleBalanceCalculator = function handleBalanceCalculator() {\n    // Select elements\n    var currentBalance = element.querySelector('[kt-modal-adjust-balance=\"current_balance\"]');\n    newBalance = element.querySelector('[kt-modal-adjust-balance=\"new_balance\"]');\n    maskInput = document.getElementById('kt_modal_inputmask');\n\n    // Get current balance value\n    var isNegative = currentBalance.innerHTML.includes('-');\n    var currentValue = parseFloat(currentBalance.innerHTML.replace(/[^0-9.]/g, '').replace(',', ''));\n    currentValue = isNegative ? currentValue * -1 : currentValue;\n\n    // On change event for inputmask\n    var maskValue;\n    maskInput.addEventListener('focusout', function (e) {\n      // Get inputmask value on change\n      maskValue = parseFloat(e.target.value.replace(/[^0-9.]/g, '').replace(',', ''));\n\n      // Set mask value as 0 when NaN detected\n      if (isNaN(maskValue)) {\n        maskValue = 0;\n      }\n\n      // Calculate & set new balance value\n      newBalance.innerHTML = 'US$ ' + (maskValue + currentValue).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n    });\n  };\n\n  // Handle form validation and submittion\n  var handleForm = function handleForm() {\n    // Stepper custom navigation\n\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'adjustment': {\n          validators: {\n            notEmpty: {\n              message: 'Adjustment type is required'\n            }\n          }\n        },\n        'amount': {\n          validators: {\n            notEmpty: {\n              message: 'Amount is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    });\n\n    // Revalidate country field. For more info, plase visit the official plugin site: https://select2.org/\n    $(form.querySelector('[name=\"adjustment\"]')).on('change', function () {\n      // Revalidate the field when an option is chosen\n      validator.revalidateField('adjustment');\n    });\n\n    // Action buttons\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault();\n\n      // Validate form before submit\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on');\n\n            // Disable submit button whilst loading\n            submitButton.disabled = true;\n\n            // Simulate form submission\n            setTimeout(function () {\n              // Simulate form submission\n              submitButton.removeAttribute('data-kt-indicator');\n\n              // Show popup confirmation \n              Swal.fire({\n                text: \"Form has been successfully submitted!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide();\n\n                  // Enable submit button after loading\n                  submitButton.disabled = false;\n\n                  // Reset form for demo purposes only\n                  form.reset();\n                  newBalance.innerHTML = \"--\";\n                }\n              });\n\n              //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Show popup warning \n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n    closeButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  };\n  return {\n    // Public functions\n    init: function init() {\n      // Elements\n      element = document.querySelector('#kt_modal_adjust_balance');\n      modal = new bootstrap.Modal(element);\n      form = element.querySelector('#kt_modal_adjust_balance_form');\n      submitButton = form.querySelector('#kt_modal_adjust_balance_submit');\n      cancelButton = form.querySelector('#kt_modal_adjust_balance_cancel');\n      closeButton = element.querySelector('#kt_modal_adjust_balance_close');\n      initForm();\n      handleBalanceCalculator();\n      handleForm();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTModalAdjustBalance.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc3JjL2pzL2N1c3RvbS9hcHBzL2N1c3RvbWVycy92aWV3L2FkanVzdC1iYWxhbmNlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0EsSUFBSUEsb0JBQW9CLEdBQUcsWUFBWTtFQUNuQyxJQUFJQyxPQUFPO0VBQ1gsSUFBSUMsWUFBWTtFQUNoQixJQUFJQyxZQUFZO0VBQ2hCLElBQUlDLFdBQVc7RUFDZixJQUFJQyxTQUFTO0VBQ2IsSUFBSUMsU0FBUztFQUNiLElBQUlDLFVBQVU7RUFDZCxJQUFJQyxJQUFJO0VBQ1IsSUFBSUMsS0FBSzs7RUFFVDtFQUNBLElBQUlDLFFBQVEsR0FBRyxTQUFYQSxRQUFRQSxDQUFBLEVBQWU7SUFDdkI7SUFDQUMsU0FBUyxDQUFDLGtCQUFrQixFQUFFO01BQzFCLGNBQWMsRUFBRTtJQUNwQixDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLHFCQUFxQixDQUFDO0VBQ2xDLENBQUM7RUFFRCxJQUFJQyx1QkFBdUIsR0FBRyxTQUExQkEsdUJBQXVCQSxDQUFBLEVBQWU7SUFDdEM7SUFDQSxJQUFNQyxjQUFjLEdBQUdiLE9BQU8sQ0FBQ2MsYUFBYSxDQUFDLDZDQUE2QyxDQUFDO0lBQzNGUixVQUFVLEdBQUdOLE9BQU8sQ0FBQ2MsYUFBYSxDQUFDLHlDQUF5QyxDQUFDO0lBQzdFVCxTQUFTLEdBQUdVLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLG9CQUFvQixDQUFDOztJQUV6RDtJQUNBLElBQU1DLFVBQVUsR0FBR0osY0FBYyxDQUFDSyxTQUFTLENBQUNDLFFBQVEsQ0FBQyxHQUFHLENBQUM7SUFDekQsSUFBSUMsWUFBWSxHQUFHQyxVQUFVLENBQUNSLGNBQWMsQ0FBQ0ssU0FBUyxDQUFDSSxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDQSxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2hHRixZQUFZLEdBQUdILFVBQVUsR0FBR0csWUFBWSxHQUFHLENBQUMsQ0FBQyxH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RSxLQUFLO1lBQ3JCQyxpQkFBaUIsRUFBRSxhQUFhO1lBQ2hDQyxXQUFXLEVBQUU7Y0FDVEMsYUFBYSxFQUFFO1lBQ25CO1VBQ0osQ0FBQyxDQUFDO1FBQ047TUFDSixDQUFDLENBQUM7SUFDTixDQUFDLENBQUM7RUFDTixDQUFDO0VBRUQsT0FBTztJQUNIO0lBQ0FRLElBQUksRUFBRSxTQUFBQSxLQUFBLEVBQVk7TUFDZDtNQUNBekUsT0FBTyxHQUFHZSxRQUFRLENBQUNELGFBQWEsQ0FBQywwQkFBMEIsQ0FBQztNQUM1RE4sS0FBSyxHQUFHLElBQUlnQyxTQUFTLENBQUNrQyxLQUFLLENBQUMxRSxPQUFPLENBQUM7TUFFcENPLElBQUksR0FBR1AsT0FBTyxDQUFDYyxhQUFhLENBQUMsK0JBQStCLENBQUM7TUFDN0RiLFlBQVksR0FBR00sSUFBSSxDQUFDTyxhQUFhLENBQUMsaUNBQWlDLENBQUM7TUFDcEVaLFlBQVksR0FBR0ssSUFBSSxDQUFDTyxhQUFhLENBQUMsaUNBQWlDLENBQUM7TUFDcEVYLFdBQVcsR0FBR0gsT0FBTyxDQUFDYyxhQUFhLENBQUMsZ0NBQWdDLENBQUM7TUFFckVMLFFBQVEsRUFBRTtNQUNWRyx1QkFBdUIsRUFBRTtNQUN6QmtCLFVBQVUsRUFBRTtJQUNoQjtFQUNKLENBQUM7QUFDTCxDQUFDLEVBQUU7O0FBRUg7QUFDQTZDLE1BQU0sQ0FBQ0Msa0JBQWtCLENBQUMsWUFBWTtFQUNsQzdFLG9CQUFvQixDQUFDMEUsSUFBSSxFQUFFO0FBQy9CLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvanMvY3VzdG9tL2FwcHMvY3VzdG9tZXJzL3ZpZXcvYWRqdXN0LWJhbGFuY2UuanM/ZDU2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIENsYXNzIGRlZmluaXRpb25cclxudmFyIEtUTW9kYWxBZGp1c3RCYWxhbmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGVsZW1lbnQ7XHJcbiAgICB2YXIgc3VibWl0QnV0dG9uO1xyXG4gICAgdmFyIGNhbmNlbEJ1dHRvbjtcclxuICAgIHZhciBjbG9zZUJ1dHRvbjtcclxuICAgIHZhciB2YWxpZGF0b3I7XHJcbiAgICB2YXIgbWFza0lucHV0O1xyXG4gICAgdmFyIG5ld0JhbGFuY2U7XHJcbiAgICB2YXIgZm9ybTtcclxuICAgIHZhciBtb2RhbDtcclxuXHJcbiAgICAvLyBJbml0IGZvcm0gaW5wdXRzXHJcbiAgICB2YXIgaW5pdEZvcm0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gSW5pdCBpbnB1dG1hc2sgcGx1Z2luIC0tLSBGb3IgbW9yZSBpbmZvIHBsZWFzZSByZWZlciB0byB0aGUgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbiBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vUm9iaW5IZXJib3RzL0lucHV0bWFza1xyXG4gICAgICAgIElucHV0bWFzayhcIlVTJCA5LDk5OSw5OTkuOTlcIiwge1xyXG4gICAgICAgICAgICBcIm51bWVyaWNJbnB1dFwiOiB0cnVlXHJcbiAgICAgICAgfSkubWFzayhcIiNrdF9tb2RhbF9pbnB1dG1hc2tcIik7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGhhbmRsZUJhbGFuY2VDYWxjdWxhdG9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFNlbGVjdCBlbGVtZW50c1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRCYWxhbmNlID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdba3QtbW9kYWwtYWRqdXN0LWJhbGFuY2U9XCJjdXJyZW50X2JhbGFuY2VcIl0nKTtcclxuICAgICAgICBuZXdCYWxhbmNlID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdba3QtbW9kYWwtYWRqdXN0LWJhbGFuY2U9XCJuZXdfYmFsYW5jZVwiXScpO1xyXG4gICAgICAgIG1hc2tJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrdF9tb2RhbF9pbnB1dG1hc2snKTtcclxuXHJcbiAgICAgICAgLy8gR2V0IGN1cnJlbnQgYmFsYW5jZSB2YWx1ZVxyXG4gICAgICAgIGNvbnN0IGlzTmVnYXRpdmUgPSBjdXJyZW50QmFsYW5jZS5pbm5lckhUTUwuaW5jbHVkZXMoJy0nKTtcclxuICAgICAgICBsZXQgY3VycmVudFZhbHVlID0gcGFyc2VGbG9hdChjdXJyZW50QmFsYW5jZS5pbm5lckhUTUwucmVwbGFjZSgvW14wLTkuXS9nLCAnJykucmVwbGFjZSgnLCcsICcnKSk7XHJcbiAgICAgICAgY3VycmVudFZhbHVlID0gaXNOZWdhdGl2ZSA/IGN1cnJlbnRWYWx1ZSAqIC0xIDogY3VycmVudFZhbHVlOyBcclxuXHJcbiAgICAgICAgLy8gT24gY2hhbmdlIGV2ZW50IGZvciBpbnB1dG1hc2tcclxuICAgICAgICBsZXQgbWFza1ZhbHVlO1xyXG4gICAgICAgIG1hc2tJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIC8vIEdldCBpbnB1dG1hc2sgdmFsdWUgb24gY2hhbmdlXHJcbiAgICAgICAgICAgIG1hc2tWYWx1ZSA9IHBhcnNlRmxvYXQoZS50YXJnZXQudmFsdWUucmVwbGFjZSgvW14wLTkuXS9nLCAnJykucmVwbGFjZSgnLCcsICcnKSk7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXQgbWFzayB2YWx1ZSBhcyAwIHdoZW4gTmFOIGRldGVjdGVkXHJcbiAgICAgICAgICAgIGlmKGlzTmFOKG1hc2tWYWx1ZSkpe1xyXG4gICAgICAgICAgICAgICAgbWFza1ZhbHVlID0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlICYgc2V0IG5ldyBiYWxhbmNlIHZhbHVlXHJcbiAgICAgICAgICAgIG5ld0JhbGFuY2UuaW5uZXJIVE1MID0gJ1VTJCAnICsgKG1hc2tWYWx1ZSArIGN1cnJlbnRWYWx1ZSkudG9GaXhlZCgyKS5yZXBsYWNlKC9cXGQoPz0oXFxkezN9KStcXC4pL2csICckJiwnKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGUgZm9ybSB2YWxpZGF0aW9uIGFuZCBzdWJtaXR0aW9uXHJcbiAgICB2YXIgaGFuZGxlRm9ybSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBTdGVwcGVyIGN1c3RvbSBuYXZpZ2F0aW9uXHJcblxyXG4gICAgICAgIC8vIEluaXQgZm9ybSB2YWxpZGF0aW9uIHJ1bGVzLiBGb3IgbW9yZSBpbmZvIGNoZWNrIHRoZSBGb3JtVmFsaWRhdGlvbiBwbHVnaW4ncyBvZmZpY2lhbCBkb2N1bWVudGF0aW9uOmh0dHBzOi8vZm9ybXZhbGlkYXRpb24uaW8vXHJcbiAgICAgICAgdmFsaWRhdG9yID0gRm9ybVZhbGlkYXRpb24uZm9ybVZhbGlkYXRpb24oXHJcbiAgICAgICAgICAgIGZvcm0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdhZGp1c3RtZW50Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RFbXB0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdBZGp1c3RtZW50IHR5cGUgaXMgcmVxdWlyZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICdhbW91bnQnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEVtcHR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0Ftb3VudCBpcyByZXF1aXJlZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgcGx1Z2luczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLlRyaWdnZXIoKSxcclxuICAgICAgICAgICAgICAgICAgICBib290c3RyYXA6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLkJvb3RzdHJhcDUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dTZWxlY3RvcjogJy5mdi1yb3cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVJbnZhbGlkQ2xhc3M6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVWYWxpZENsYXNzOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBSZXZhbGlkYXRlIGNvdW50cnkgZmllbGQuIEZvciBtb3JlIGluZm8sIHBsYXNlIHZpc2l0IHRoZSBvZmZpY2lhbCBwbHVnaW4gc2l0ZTogaHR0cHM6Ly9zZWxlY3QyLm9yZy9cclxuICAgICAgICAkKGZvcm0ucXVlcnlTZWxlY3RvcignW25hbWU9XCJhZGp1c3RtZW50XCJdJykpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIFJldmFsaWRhdGUgdGhlIGZpZWxkIHdoZW4gYW4gb3B0aW9uIGlzIGNob3NlblxyXG4gICAgICAgICAgICB2YWxpZGF0b3IucmV2YWxpZGF0ZUZpZWxkKCdhZGp1c3RtZW50Jyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEFjdGlvbiBidXR0b25zXHJcbiAgICAgICAgc3VibWl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgLy8gUHJldmVudCBkZWZhdWx0IGJ1dHRvbiBhY3Rpb25cclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gVmFsaWRhdGUgZm9ybSBiZWZvcmUgc3VibWl0XHJcbiAgICAgICAgICAgIGlmICh2YWxpZGF0b3IpIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRvci52YWxpZGF0ZSgpLnRoZW4oZnVuY3Rpb24gKHN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd2YWxpZGF0ZWQhJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gJ1ZhbGlkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG93IGxvYWRpbmcgaW5kaWNhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLWt0LWluZGljYXRvcicsICdvbicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzYWJsZSBzdWJtaXQgYnV0dG9uIHdoaWxzdCBsb2FkaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW11bGF0ZSBmb3JtIHN1Ym1pc3Npb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW11bGF0ZSBmb3JtIHN1Ym1pc3Npb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEta3QtaW5kaWNhdG9yJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hvdyBwb3B1cCBjb25maXJtYXRpb24gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiRm9ybSBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgc3VibWl0dGVkIVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwic3VjY2Vzc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLmhpZGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuYWJsZSBzdWJtaXQgYnV0dG9uIGFmdGVyIGxvYWRpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCBmb3JtIGZvciBkZW1vIHB1cnBvc2VzIG9ubHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdCYWxhbmNlLmlubmVySFRNTCA9IFwiLS1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2Zvcm0uc3VibWl0KCk7IC8vIFN1Ym1pdCBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNob3cgcG9wdXAgd2FybmluZyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiU29ycnksIGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNvbWUgZXJyb3JzIGRldGVjdGVkLCBwbGVhc2UgdHJ5IGFnYWluLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJlcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gYnRuLXByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjYW5jZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgdGV4dDogXCJBcmUgeW91IHN1cmUgeW91IHdvdWxkIGxpa2UgdG8gY2FuY2VsP1wiLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogXCJ3YXJuaW5nXCIsXHJcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzLCBjYW5jZWwgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCByZXR1cm5cIixcclxuICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gYnRuLXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b246IFwiYnRuIGJ0bi1hY3RpdmUtbGlnaHRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtLnJlc2V0KCk7IC8vIFJlc2V0IGZvcm1cdFxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLmhpZGUoKTsgLy8gSGlkZSBtb2RhbFx0XHRcdFx0XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5kaXNtaXNzID09PSAnY2FuY2VsJykge1xyXG4gICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiWW91ciBmb3JtIGhhcyBub3QgYmVlbiBjYW5jZWxsZWQhLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcImVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiQXJlIHlvdSBzdXJlIHlvdSB3b3VsZCBsaWtlIHRvIGNhbmNlbD9cIixcclxuICAgICAgICAgICAgICAgIGljb246IFwid2FybmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIlllcywgY2FuY2VsIGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCJObywgcmV0dXJuXCIsXHJcbiAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uOiBcImJ0biBidG4tYWN0aXZlLWxpZ2h0XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybS5yZXNldCgpOyAvLyBSZXNldCBmb3JtXHRcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbC5oaWRlKCk7IC8vIEhpZGUgbW9kYWxcdFx0XHRcdFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuZGlzbWlzcyA9PT0gJ2NhbmNlbCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIllvdXIgZm9ybSBoYXMgbm90IGJlZW4gY2FuY2VsbGVkIS5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJlcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBidG4tcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8vIFB1YmxpYyBmdW5jdGlvbnNcclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEVsZW1lbnRzXHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcja3RfbW9kYWxfYWRqdXN0X2JhbGFuY2UnKTtcclxuICAgICAgICAgICAgbW9kYWwgPSBuZXcgYm9vdHN0cmFwLk1vZGFsKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgZm9ybSA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignI2t0X21vZGFsX2FkanVzdF9iYWxhbmNlX2Zvcm0nKTtcclxuICAgICAgICAgICAgc3VibWl0QnV0dG9uID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcja3RfbW9kYWxfYWRqdXN0X2JhbGFuY2Vfc3VibWl0Jyk7XHJcbiAgICAgICAgICAgIGNhbmNlbEJ1dHRvbiA9IGZvcm0ucXVlcnlTZWxlY3RvcignI2t0X21vZGFsX2FkanVzdF9iYWxhbmNlX2NhbmNlbCcpO1xyXG4gICAgICAgICAgICBjbG9zZUJ1dHRvbiA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignI2t0X21vZGFsX2FkanVzdF9iYWxhbmNlX2Nsb3NlJyk7XHJcblxyXG4gICAgICAgICAgICBpbml0Rm9ybSgpO1xyXG4gICAgICAgICAgICBoYW5kbGVCYWxhbmNlQ2FsY3VsYXRvcigpO1xyXG4gICAgICAgICAgICBoYW5kbGVGb3JtKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSgpO1xyXG5cclxuLy8gT24gZG9jdW1lbnQgcmVhZHlcclxuS1RVdGlsLm9uRE9NQ29udGVudExvYWRlZChmdW5jdGlvbiAoKSB7XHJcbiAgICBLVE1vZGFsQWRqdXN0QmFsYW5jZS5pbml0KCk7XHJcbn0pOyJdLCJuYW1lcyI6WyJLVE1vZGFsQWRqdXN0QmFsYW5jZSIsImVsZW1lbnQiLCJzdWJtaXRCdXR0b24iLCJjYW5jZWxCdXR0b24iLCJjbG9zZUJ1dHRvbiIsInZhbGlkYXRvciIsIm1hc2tJbnB1dCIsIm5ld0JhbGFuY2UiLCJmb3JtIiwibW9kYWwiLCJpbml0Rm9ybSIsIklucHV0bWFzayIsIm1hc2siLCJoYW5kbGVCYWxhbmNlQ2FsY3VsYXRvciIsImN1cnJlbnRCYWxhbmNlIiwicXVlcnlTZWxlY3RvciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpc05lZ2F0aXZlIiwiaW5uZXJIVE1MIiwiaW5jbHVkZXMiLCJjdXJyZW50VmFsdWUiLCJwYXJzZUZsb2F0IiwicmVwbGFjZSIsIm1hc2tWYWx1ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwidGFyZ2V0IiwidmFsdWUiLCJpc05hTiIsInRvRml4ZWQiLCJoYW5kbGVGb3JtIiwiRm9ybVZhbGlkYXRpb24iLCJmb3JtVmFsaWRhdGlvbiIsImZpZWxkcyIsInZhbGlkYXRvcnMiLCJub3RFbXB0eSIsIm1lc3NhZ2UiLCJwbHVnaW5zIiwidHJpZ2dlciIsIlRyaWdnZXIiLCJib290c3RyYXAiLCJCb290c3RyYXA1Iiwicm93U2VsZWN0b3IiLCJlbGVJbnZhbGlkQ2xhc3MiLCJlbGVWYWxpZENsYXNzIiwiJCIsIm9uIiwicmV2YWxpZGF0ZUZpZWxkIiwicHJldmVudERlZmF1bHQiLCJ2YWxpZGF0ZSIsInRoZW4iLCJzdGF0dXMiLCJjb25zb2xlIiwibG9nIiwic2V0QXR0cmlidXRlIiwiZGlzYWJsZWQiLCJzZXRUaW1lb3V0IiwicmVtb3ZlQXR0cmlidXRlIiwiU3dhbCIsImZpcmUiLCJ0ZXh0IiwiaWNvbiIsImJ1dHRvbnNTdHlsaW5nIiwiY29uZmlybUJ1dHRvblRleHQiLCJjdXN0b21DbGFzcyIsImNvbmZpcm1CdXR0b24iLCJyZXN1bHQiLCJpc0NvbmZpcm1lZCIsImhpZGUiLCJyZXNldCIsInNob3dDYW5jZWxCdXR0b24iLCJjYW5jZWxCdXR0b25UZXh0IiwiZGlzbWlzcyIsImluaXQiLCJNb2RhbCIsIktUVXRpbCIsIm9uRE9NQ29udGVudExvYWRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/src/js/custom/apps/customers/view/adjust-balance.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/apps/customers/view/adjust-balance.js"]();
/******/ 	
/******/ })()
;